/*
 * SD_Card.c
 * Adapted for SPL from https://github.com/afiskon/stm32-sdcard/blob/master/sdcard/sdcard.c#L92
 * Further reading http://www.dejazzer.com/ee379/lecture_notes/lec12_sd_card.pdf
 *  Created on: Jun 9, 2019
 *      Author: Jamie
 */
#include "SD_Card.h"
#include "tm_stm32f4_spi.h"
#include "stdio.h"
void SD_SET_CS(FunctionalState en)
{
	if(!en)
	{
		GPIO_WriteBit(GPIOB,GPIO_PIN_5,RESET);
	}
	else
	{
		GPIO_WriteBit(GPIOB,GPIO_PIN_5,SET);
	}
}

void init_SD_CS(void)
{
	TM_GPIO_Init(GPIOB,GPIO_PIN_5,TM_GPIO_Mode_OUT,TM_GPIO_OType_PP,TM_GPIO_PuPd_DOWN,TM_GPIO_Speed_Fast);
}


/*
 * Read 8bit return from SD card
 *
 * format:
 *  		7th bit	:	cmd arg outside range
 *  		6th bit :	misaligned address in command
 *  		5th bit :	error in sequence of commands
 *  		4th bit :	crc check error
 *  		3rd bit :	illigal command
 *  		2nd bit :	rase sequence clear
 *  		1st bit :	card in idle state
 */
void SD_SET_SPI(void)
{
	//set CS HIGH
	SD_SET_CS(ENABLE);
	for (int i = 0; i < 10; ++i)
	{
		TM_SPI_Send(SD_SPI,0xFF);
	}
	SD_SET_CS(DISABLE);

}
void SD_COMMAND(uint8_t cmd,uint32_t arg,uint8_t crc)
{
    // transmit command to sd card
    TM_SPI_Send(SD_SPI,(cmd|0x40));
    // transmit argument
    TM_SPI_Send(SD_SPI,(uint8_t)(arg >> 24)));
    TM_SPI_Send(SD_SPI,(uint8_t)(arg >> 16)));
    TM_SPI_Send(SD_SPI,(uint8_t)(arg >> 8)));
    TM_SPI_Send(SD_SPI,(uint8_t)(arg)));
    // transmit crc
    SPI_transfer(crc|0x01);
}
uint8_t init_SDCARD(void)
{
	return 0;
}
