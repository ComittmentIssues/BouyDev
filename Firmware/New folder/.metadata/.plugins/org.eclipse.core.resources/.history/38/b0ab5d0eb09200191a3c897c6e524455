/*
******************************************************************************
File:     main.c
Info:     Generated by Atollic TrueSTUDIO(R) 7.1.1   2019-06-18

The MIT License (MIT)
Copyright (c) 2009-2017 Atollic AB

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include <defines.h>
#include <stdlib.h>
#include <tm_stm32f4_delay.h>
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include <string.h>
#include <stdio.h>
#include "../Temp_sensor/tm_stm32f4_ds18b20.h"
#include "../Temp_sensor/tm_stm32f4_onewire.h"
#include "memory.h"
#include "../src/fatfs/ff.h"
/* Private macro */
/* Private variables */
char buff[40];
float temp;
uint8_t device[8];
TM_OneWire_t oneWire;
FATFS FatFs;
/* Private function prototypes */
void init_temp_sensor(void);
void ftoa(float f);
/* Private functions */

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
	  /* Initialize LEDs */
	  STM_EVAL_LEDInit(LED3); STM_EVAL_LEDInit(LED4); STM_EVAL_LEDInit(LED5); STM_EVAL_LEDInit(LED6);
	  init_temp_sensor();
	  /* SD Card Check */
	  /* FATFS */
	  FATFS file_system;
	  FIL file_pointer;
	  UINT bytes_written;
	  FRESULT f_err_code = 0;
	  file_flag.log_enabled = 1;
	  file_flag.file_opened = 0;
	  file_flag.filename_ok = PASS;

	  char status = 0;
	  char filename[13] = "test_sd.bin\0";
	  for (int i = 0; i < 50 ;i++)mydata[i] = 0xFA;
	  while(status != SD_CARD_OK)
	  {
		  status = check_memory(&file_system,&file_pointer,f_err_code);

	  }
	  if (status == SD_CARD_OK){STM_EVAL_LEDOn(LED4);}
 /* TODO - Add your application code here */


  /* Infinite loop */

	for (int i = 0; i < 5; ++i) {
		TM_DS18B20_Start(&oneWire,device);
		while(!TM_DS18B20_AllDone(&oneWire));
		TM_DS18B20_Read(&oneWire,device,&temp);
		ftoa(temp);
		status = write_to_memory(&file_system,&file_pointer,f_err_code,filename,&bytes_written,buff,strlen(buff),&file_flag);
		 while(file_flag.log_enabled == 1)
		 {
			 STM_EVAL_LEDOn(LED5);
			 status = write_to_memory(&file_system,&file_pointer,f_err_code,filename,&bytes_written,buff,strlen(buff),&file_flag);
			 if(status == (LOGGING_ON|SD_CARD_OK))
			 {
				 file_flag.log_enabled = 0;
			 }
			 Delayms(100);
		 }
		 f_lseek(&file_pointer,&file_pointer->fsize);
		file_flag.log_enabled = 1;
	}
 f_close(&file_pointer);
 while(1)
 {

 }
}

void init_temp_sensor(void)
{

	  SystemInit();
	  TM_DELAY_Init();
	  TM_OneWire_Init(&oneWire, GPIOD, GPIO_Pin_6);
	  /* Check for devices on oneWire bus*/
	  uint8_t devices = TM_OneWire_First(&oneWire);
	  if(devices)
	  {
		  STM_EVAL_LEDOn(LED3);
		  TM_OneWire_GetFullROM(&oneWire, device);
	  }
}

void ftoa(float f)
{
	//get int;
	int num = (int)f;
	f -= (float)num;
	int dec = f*1000;
	sprintf(buff,"%d.%d\n",num,dec);

}
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */

