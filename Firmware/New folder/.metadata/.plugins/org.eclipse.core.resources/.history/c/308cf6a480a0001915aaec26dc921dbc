/*
******************************************************************************
File:     main.c
Info:     Generated by Atollic TrueSTUDIO(R) 7.1.1   2019-07-06

The MIT License (MIT)
Copyright (c) 2009-2017 Atollic AB

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "../My_Peripheral_Libraries/Iridium.h"
#include "../My_Peripheral_Libraries/eeprom.h"
#include "../My_Peripheral_Libraries/RTC.h"
#include "../My_Peripheral_Libraries/GPS.h"


/* Private Structs*/
typedef struct{
	Coord_t coord;
	uint32_t Etime;
	Diagnostic_t diag;
	float temp;
	float battery_voltage;
} Packet;

/* Private macro */
#define GPSPACKET_LENGTH 25
#define Temp_GPIO GPIOD
#define One_Wire_Pin GPIO_PIN_6
#define length(x) sizeof(x)/sizeof(*x)

/* Private Typedefs */
RTC_TimeTypeDef rtc_time;
RTC_AlarmTypeDef rtc_alarma;
Packet packet;

/* Private variables */
uint16_t VirtAddVarTab[] = {0x1000, 0x2000, 0x3000,0x4000};
uint16_t VirtAddPacketNo = 0x0001;
uint8_t packetno;
/* Private Data Buffers*/
uint8_t logbuff[GPSPACKET_LENGTH];
char fbuff[60];
/* Peripheral Status Flags */
uint8_t Iridium_On;
uint8_t RTC_On;
uint8_t GPS_On;
uint8_t Temp_On;
uint8_t VBatCheck_On;

/* System State Flags*/
uint8_t Wake_up;
uint8_t RunMode; // 0 - Data Log, 1 - Transmit, 2 - IMU

/* Private function prototypes */
void init_RCC_Clock(void);
uint8_t check_Latest(void);
void Power_Down(void);
void ftoa(float f);
void to_binary_format(Packet packet);
void clear_packet(void);
/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{	//TODO: Delete When done
	  /* Initialize LEDs */
	  STM_EVAL_LEDInit(LED3);
	  STM_EVAL_LEDInit(LED4);
	  STM_EVAL_LEDInit(LED5);
	  STM_EVAL_LEDInit(LED6);
  /*********************** BASE INITIALIZATIONS ****************************/

	/*
	 *  1. Initialize clock to 48 MHz
	 */

	init_RCC_Clock();

	/*
	 * 2. Initialize RTC Clock. Note: Prevents drift from prolonged oscilations
	 */
		init_RTC();
	/*
	 * 3. Init Flash. Note: Does not erase flash sectors.
	 *
	 */
		FLASH_Unlock();
		EE_Init();
	/*
	 * 4. Init Delay Timer
	 */
		init_Delay();

	/********************* Get System State ****************************/

		/* Check if system powered up or woke up*/
		Wake_up = (uint8_t)PWR_GetFlagStatus(PWR_FLAG_WU);

		/* If System Woke up, Check the memory status */
		if(Wake_up)
		{
			packetno = check_Latest();
			switch (packetno)
			{
				/* Packet full, transmit*/
				case 4:
					RunMode = 1;
					break;
				/* Log more data*/
				default:
					RunMode = 0;
					break;
			}
		}


	/***************** PERIPHERAL INITIALIZATIONS *********************/
		if(!RunMode)
		{
			/*
			 * 1. Init GPS
			 */
			//init_USART_GPS();
			/*
			 * 2. Check if temp sensor is online
			 */

			/*
			 * 3. Check if battery voltage online
			 */
		}
	/************************ Routines ********************************/


  /* Routine 1: Log GPS + diagnostics: */
	/*
	 * 1. wait for GPS signal
	 */



  /* When Completed Set Alarm, Enter Standby Mode */
	Power_Down();
	set_StdBy_Mode();
			while (1)
			{

			}
}
/* FUNCTION Definitions */

/*
 * Returns a flag based on the latest packet to be stored in memory
 * 0 - Error/ No Data
 * 1 - Base Packet virtual Address = 0x1000
 * 2 - Base Packet virtual Address = 0x2000
 * 3 - Base Packet virtual Address = 0x3000
 * 4 - Base Packet virtual Address = 0x4000
 */
uint8_t check_Latest(void)
{
	uint8_t i;
	uint16_t data;
	for (i = 0; i < 4; ++i)
	{
		//Check if base virtual address contains data
		if(EE_ReadVariable(VirtAddPacketNo,&data))
		{
			//If address has never been used
			return i+1;
		}
	}

	return data;
}

/*
 * Function call to set alarm and put to sleep
 */

void Power_Down(void)
{
	/* de initialise functions*/
	deinit_USART_GPS();
	deinit_Delay();
	/* Lock Flash*/
	FLASH_Lock();

	rtc_alarma.RTC_AlarmMask = RTC_AlarmMask_All&(~RTC_AlarmMask_Minutes);
	RTC_GetTime(RTC_Format_BIN,&rtc_time);
	rtc_time.RTC_Seconds += 15;
	set_RTCAlarm_A(&rtc_time,&rtc_alarma);

}
/*
 * Sets System Clock to 48 MHz
 */
void init_RCC_Clock(void)
{
	/* Set RCC value to default state*/
	RCC_DeInit();
	/* Enable external Crystal Oscilator*/
	RCC_HSEConfig(RCC_HSE_ON);
	ErrorStatus errorstatus = RCC_WaitForHSEStartUp();
	if(errorstatus == SUCCESS)
	{
		/* Configure PLL clock for 48 MHz*/
		RCC_PLLConfig(RCC_PLLSource_HSE,4,192,8,8);
		/* enable pll and wait until ready*/
		RCC_PLLCmd(ENABLE);
		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);

		/* Set Flash Latency*/
		FLASH_SetLatency(FLASH_Latency_1);
		/* Set AHB prescaler*/
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
		/* Set APB1 Scaler */
		RCC_PCLK1Config(RCC_HCLK_Div2);
		/* Set APB2 Scaler*/
		RCC_PCLK2Config(RCC_HCLK_Div1);
		 /* Set Clock source to PLL*/
		 RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);

	}else
	{
			//Set clock source to default config
			RCC_DeInit();
	}
	SystemCoreClockUpdate();
}
/*
 * custom function for parsing float to char
 */
void ftoa(float f)
{
	//get int;
	int num = (int)f;
	f -= (float)num;
	int dec = f*1000;
	sprintf(fbuff,"%d.%d\n\r",num,dec);

}
/*
 * Convert data to an array of bytes
 */
void to_binary_format(Packet packet)
{
	logbuff[0] = 1; // ID
	logbuff[1] = (packet.Etime&0xFF000000)>>24;
	logbuff[2] = (packet.Etime&0x00FF0000)>>16;
	logbuff[3] = (packet.Etime&0x0000FF00)>>8;
	logbuff[4] = (packet.Etime&0x000000FF);
	/* Add coordinates bytes 1 - 5 = lat, bytes 6 - 10 = long*/
	union
	{
		float a;
		unsigned char bytes[4];
	} coord_int;
	coord_int.a = packet.coord.lat;
	for (int i = 5; i < 9; ++i)
	{
		logbuff[i] = coord_int.bytes[i-5];
	}
	coord_int.a = packet.coord.longi;

	for (int i = 9; i < 13; ++i)
	{
			logbuff[i] =  coord_int.bytes[i-9];
	}
	/* break time down into MSB and LSB and store as as 2 unsigned bytes in big endian */

	//convert HDOP,VDOP, PDOP to 2 bytes big endian
	logbuff[13] = packet.diag.HDOP.digit;
	logbuff[14] = packet.diag.HDOP.precision;
	logbuff[15] = packet.diag.VDOP.digit;
	logbuff[16] = packet.diag.VDOP.precision;
	logbuff[17] = packet.diag.PDOP.digit;
	logbuff[18] = packet.diag.PDOP.precision;
	logbuff[19] = (packet.diag.num_sats);
	logbuff[19] = logbuff[19]<<2;
	logbuff[19] |= packet.diag.fix_type;

	/*Temperature - 2 bytes (dec), (precision ) - 2 decimal places */
	if(Temp_On)
	{
		logbuff[20] = (uint8_t)(packet.temp);
		logbuff[21] = (uint8_t)(packet.temp*100+0.5); //adding 0.5 to account for offsets
	}
	/* Battery Conversion: 2 bytes */
	logbuff[22] = (uint8_t)(packet.battery_voltage);
	logbuff[23] = (uint8_t)((packet.battery_voltage- (float)logbuff[22])*100);
	logbuff[24] = '\r'; //END OF PACKET CHARACHTER
}

void clear_packet(void)
{
	for (int i = 0; i < length(logbuff); ++i)
	{
		logbuff[i]=0;
	}
}
