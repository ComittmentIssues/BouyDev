
C:\Users\user\Documents\GitHub\BouyDev\Firmware\New folder\Test_Temp_F4\Debug\Test_Temp_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08007548  08007548  00017548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005e8  20000000  080079a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000205e8  2**0
                  CONTENTS
  8 .bss          00001cc4  200005e8  200005e8  000205e8  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200022ac  200022ac  000205e8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000a64a  00000000  00000000  00020618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e3b  00000000  00000000  0002ac62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d10  00000000  00000000  0002caa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000be8  00000000  00000000  0002d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004abd  00000000  00000000  0002e398  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003c5f  00000000  00000000  00032e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00036ab4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000474c  00000000  00000000  00036b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000018  00000000  00000000  0003b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000123  00000000  00000000  0003b280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005e8 	.word	0x200005e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007530 	.word	0x08007530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005ec 	.word	0x200005ec
 80001c4:	08007530 	.word	0x08007530

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_d2iz>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a98:	d215      	bcs.n	8000ac6 <__aeabi_d2iz+0x36>
 8000a9a:	d511      	bpl.n	8000ac0 <__aeabi_d2iz+0x30>
 8000a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa4:	d912      	bls.n	8000acc <__aeabi_d2iz+0x3c>
 8000aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aba:	bf18      	it	ne
 8000abc:	4240      	negne	r0, r0
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d105      	bne.n	8000ad8 <__aeabi_d2iz+0x48>
 8000acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	bf08      	it	eq
 8000ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b97e 	b.w	8000ed4 <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	460e      	mov	r6, r1
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	9d08      	ldr	r5, [sp, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d150      	bne.n	8000ca2 <__udivmoddi4+0xb2>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d96c      	bls.n	8000ce0 <__udivmoddi4+0xf0>
 8000c06:	fab2 fe82 	clz	lr, r2
 8000c0a:	f1be 0f00 	cmp.w	lr, #0
 8000c0e:	d00b      	beq.n	8000c28 <__udivmoddi4+0x38>
 8000c10:	f1ce 0420 	rsb	r4, lr, #32
 8000c14:	fa20 f404 	lsr.w	r4, r0, r4
 8000c18:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c1c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c20:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	0c22      	lsrs	r2, r4, #16
 8000c2e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c32:	fa1f f887 	uxth.w	r8, r7
 8000c36:	fb09 c610 	mls	r6, r9, r0, ip
 8000c3a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c3e:	fb00 f308 	mul.w	r3, r0, r8
 8000c42:	42b3      	cmp	r3, r6
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x6a>
 8000c46:	19f6      	adds	r6, r6, r7
 8000c48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4c:	f080 8122 	bcs.w	8000e94 <__udivmoddi4+0x2a4>
 8000c50:	42b3      	cmp	r3, r6
 8000c52:	f240 811f 	bls.w	8000e94 <__udivmoddi4+0x2a4>
 8000c56:	3802      	subs	r0, #2
 8000c58:	443e      	add	r6, r7
 8000c5a:	1af6      	subs	r6, r6, r3
 8000c5c:	b2a2      	uxth	r2, r4
 8000c5e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c62:	fb09 6613 	mls	r6, r9, r3, r6
 8000c66:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c6a:	fb03 f808 	mul.w	r8, r3, r8
 8000c6e:	45a0      	cmp	r8, r4
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x96>
 8000c72:	19e4      	adds	r4, r4, r7
 8000c74:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c78:	f080 810a 	bcs.w	8000e90 <__udivmoddi4+0x2a0>
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	f240 8107 	bls.w	8000e90 <__udivmoddi4+0x2a0>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	443c      	add	r4, r7
 8000c86:	ebc8 0404 	rsb	r4, r8, r4
 8000c8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	d062      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000c94:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c98:	2300      	movs	r3, #0
 8000c9a:	602c      	str	r4, [r5, #0]
 8000c9c:	606b      	str	r3, [r5, #4]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0xc6>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d055      	beq.n	8000d56 <__udivmoddi4+0x166>
 8000caa:	2100      	movs	r1, #0
 8000cac:	e885 0041 	stmia.w	r5, {r0, r6}
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x1f0>
 8000cc0:	42b3      	cmp	r3, r6
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0xda>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80f8 	bhi.w	8000eba <__udivmoddi4+0x2ca>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb66 0603 	sbc.w	r6, r6, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	46b4      	mov	ip, r6
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d040      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000cd8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	b912      	cbnz	r2, 8000ce8 <__udivmoddi4+0xf8>
 8000ce2:	2701      	movs	r7, #1
 8000ce4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ce8:	fab7 fe87 	clz	lr, r7
 8000cec:	f1be 0f00 	cmp.w	lr, #0
 8000cf0:	d135      	bne.n	8000d5e <__udivmoddi4+0x16e>
 8000cf2:	1bf3      	subs	r3, r6, r7
 8000cf4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb08 3610 	mls	r6, r8, r0, r3
 8000d08:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d0c:	fb0c f300 	mul.w	r3, ip, r0
 8000d10:	42b3      	cmp	r3, r6
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x134>
 8000d14:	19f6      	adds	r6, r6, r7
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x132>
 8000d1c:	42b3      	cmp	r3, r6
 8000d1e:	f200 80ce 	bhi.w	8000ebe <__udivmoddi4+0x2ce>
 8000d22:	4610      	mov	r0, r2
 8000d24:	1af6      	subs	r6, r6, r3
 8000d26:	b2a2      	uxth	r2, r4
 8000d28:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d2c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d30:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d34:	fb0c fc03 	mul.w	ip, ip, r3
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x15c>
 8000d3c:	19e4      	adds	r4, r4, r7
 8000d3e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x15a>
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	f200 80b5 	bhi.w	8000eb4 <__udivmoddi4+0x2c4>
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	ebcc 0404 	rsb	r4, ip, r4
 8000d50:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d54:	e79c      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000d56:	4629      	mov	r1, r5
 8000d58:	4628      	mov	r0, r5
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1ce 0120 	rsb	r1, lr, #32
 8000d62:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d6a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d72:	40ce      	lsrs	r6, r1
 8000d74:	ea49 0903 	orr.w	r9, r9, r3
 8000d78:	fbb6 faf8 	udiv	sl, r6, r8
 8000d7c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d80:	fb08 661a 	mls	r6, r8, sl, r6
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d8c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d90:	429a      	cmp	r2, r3
 8000d92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1be>
 8000d98:	19db      	adds	r3, r3, r7
 8000d9a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d9e:	f080 8087 	bcs.w	8000eb0 <__udivmoddi4+0x2c0>
 8000da2:	429a      	cmp	r2, r3
 8000da4:	f240 8084 	bls.w	8000eb0 <__udivmoddi4+0x2c0>
 8000da8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dac:	443b      	add	r3, r7
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	fa1f f989 	uxth.w	r9, r9
 8000db4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dbc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000dc0:	fb01 f60c 	mul.w	r6, r1, ip
 8000dc4:	429e      	cmp	r6, r3
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x1e8>
 8000dc8:	19db      	adds	r3, r3, r7
 8000dca:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dce:	d26b      	bcs.n	8000ea8 <__udivmoddi4+0x2b8>
 8000dd0:	429e      	cmp	r6, r3
 8000dd2:	d969      	bls.n	8000ea8 <__udivmoddi4+0x2b8>
 8000dd4:	3902      	subs	r1, #2
 8000dd6:	443b      	add	r3, r7
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dde:	e78e      	b.n	8000cfe <__udivmoddi4+0x10e>
 8000de0:	f1c1 0e20 	rsb	lr, r1, #32
 8000de4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000de8:	408b      	lsls	r3, r1
 8000dea:	4323      	orrs	r3, r4
 8000dec:	fa20 f70e 	lsr.w	r7, r0, lr
 8000df0:	fa06 f401 	lsl.w	r4, r6, r1
 8000df4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000df8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000dfc:	433c      	orrs	r4, r7
 8000dfe:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e02:	0c27      	lsrs	r7, r4, #16
 8000e04:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e08:	fa1f f883 	uxth.w	r8, r3
 8000e0c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e10:	fb09 f708 	mul.w	r7, r9, r8
 8000e14:	42b7      	cmp	r7, r6
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x242>
 8000e20:	18f6      	adds	r6, r6, r3
 8000e22:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e26:	d241      	bcs.n	8000eac <__udivmoddi4+0x2bc>
 8000e28:	42b7      	cmp	r7, r6
 8000e2a:	d93f      	bls.n	8000eac <__udivmoddi4+0x2bc>
 8000e2c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e30:	441e      	add	r6, r3
 8000e32:	1bf6      	subs	r6, r6, r7
 8000e34:	b2a0      	uxth	r0, r4
 8000e36:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e3a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e3e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e42:	fb04 f808 	mul.w	r8, r4, r8
 8000e46:	45b8      	cmp	r8, r7
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x26a>
 8000e4a:	18ff      	adds	r7, r7, r3
 8000e4c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e50:	d228      	bcs.n	8000ea4 <__udivmoddi4+0x2b4>
 8000e52:	45b8      	cmp	r8, r7
 8000e54:	d926      	bls.n	8000ea4 <__udivmoddi4+0x2b4>
 8000e56:	3c02      	subs	r4, #2
 8000e58:	441f      	add	r7, r3
 8000e5a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e5e:	ebc8 0707 	rsb	r7, r8, r7
 8000e62:	fba0 8902 	umull	r8, r9, r0, r2
 8000e66:	454f      	cmp	r7, r9
 8000e68:	4644      	mov	r4, r8
 8000e6a:	464e      	mov	r6, r9
 8000e6c:	d314      	bcc.n	8000e98 <__udivmoddi4+0x2a8>
 8000e6e:	d029      	beq.n	8000ec4 <__udivmoddi4+0x2d4>
 8000e70:	b365      	cbz	r5, 8000ecc <__udivmoddi4+0x2dc>
 8000e72:	ebba 0304 	subs.w	r3, sl, r4
 8000e76:	eb67 0706 	sbc.w	r7, r7, r6
 8000e7a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	40cf      	lsrs	r7, r1
 8000e82:	ea4e 0303 	orr.w	r3, lr, r3
 8000e86:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	4613      	mov	r3, r2
 8000e92:	e6f8      	b.n	8000c86 <__udivmoddi4+0x96>
 8000e94:	4610      	mov	r0, r2
 8000e96:	e6e0      	b.n	8000c5a <__udivmoddi4+0x6a>
 8000e98:	ebb8 0402 	subs.w	r4, r8, r2
 8000e9c:	eb69 0603 	sbc.w	r6, r9, r3
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	e7e5      	b.n	8000e70 <__udivmoddi4+0x280>
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	e7d8      	b.n	8000e5a <__udivmoddi4+0x26a>
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	e795      	b.n	8000dd8 <__udivmoddi4+0x1e8>
 8000eac:	4681      	mov	r9, r0
 8000eae:	e7c0      	b.n	8000e32 <__udivmoddi4+0x242>
 8000eb0:	468a      	mov	sl, r1
 8000eb2:	e77c      	b.n	8000dae <__udivmoddi4+0x1be>
 8000eb4:	3b02      	subs	r3, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e748      	b.n	8000d4c <__udivmoddi4+0x15c>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e70a      	b.n	8000cd4 <__udivmoddi4+0xe4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	443e      	add	r6, r7
 8000ec2:	e72f      	b.n	8000d24 <__udivmoddi4+0x134>
 8000ec4:	45c2      	cmp	sl, r8
 8000ec6:	d3e7      	bcc.n	8000e98 <__udivmoddi4+0x2a8>
 8000ec8:	463e      	mov	r6, r7
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x280>
 8000ecc:	4629      	mov	r1, r5
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <zero_dma_gnss_memory>:
}

//==========================================================================
/* USART BUFFER FUNCTIONS*/
void zero_dma_gnss_memory(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
		for (int i = 0; i < DMA_RX_BUFFER_SIZE; i++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	e007      	b.n	8000ef4 <zero_dma_gnss_memory+0x1c>
		{
			DMA_RX_Buffer[i] = 0;
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <zero_dma_gnss_memory+0x30>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]

//==========================================================================
/* USART BUFFER FUNCTIONS*/
void zero_dma_gnss_memory(void)
{
		for (int i = 0; i < DMA_RX_BUFFER_SIZE; i++)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000efa:	dbf3      	blt.n	8000ee4 <zero_dma_gnss_memory+0xc>
		{
			DMA_RX_Buffer[i] = 0;
		}
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20000e94 	.word	0x20000e94

08000f0c <zero_gnss_memory>:
void zero_gnss_memory(void)
	{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
		for (int i = 0; i < GNSS_LOG_BUFFER_SIZE; i++){
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	e007      	b.n	8000f28 <zero_gnss_memory+0x1c>
			GNSS_LOG_Buffer[i] = 0;
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <zero_gnss_memory+0x30>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
			DMA_RX_Buffer[i] = 0;
		}
}
void zero_gnss_memory(void)
	{
		for (int i = 0; i < GNSS_LOG_BUFFER_SIZE; i++){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3301      	adds	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f2e:	dbf3      	blt.n	8000f18 <zero_gnss_memory+0xc>
			GNSS_LOG_Buffer[i] = 0;
		}
	}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200006a0 	.word	0x200006a0

08000f40 <USART1_IRQHandler>:
/*
 * called when USART has finished receiving
 * disables the stream
 */
void USART1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
	//idle line detection
	if(USART_GetFlagStatus(USART1,USART_FLAG_IDLE) != RESET)
 8000f46:	2110      	movs	r1, #16
 8000f48:	4812      	ldr	r0, [pc, #72]	; (8000f94 <USART1_IRQHandler+0x54>)
 8000f4a:	f000 feeb 	bl	8001d24 <USART_GetFlagStatus>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d01a      	beq.n	8000f8a <USART1_IRQHandler+0x4a>
	{
		//clear reg
		RX_COMPLETE_FLAG = 0;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <USART1_IRQHandler+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
		volatile uint32_t tmp;
		tmp = USART_GetITStatus(USART1, USART_IT_IDLE);
 8000f5a:	f240 4124 	movw	r1, #1060	; 0x424
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <USART1_IRQHandler+0x54>)
 8000f60:	f000 fefc 	bl	8001d5c <USART_GetITStatus>
 8000f64:	4603      	mov	r3, r0
 8000f66:	607b      	str	r3, [r7, #4]
		tmp = USART_ReceiveData(USART1);
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <USART1_IRQHandler+0x54>)
 8000f6a:	f000 fecb 	bl	8001d04 <USART_ReceiveData>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	607b      	str	r3, [r7, #4]
		(void)tmp;
 8000f72:	687b      	ldr	r3, [r7, #4]

		DMA_Cmd(DMA2_Stream2,DISABLE);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <USART1_IRQHandler+0x5c>)
 8000f78:	f000 fb74 	bl	8001664 <DMA_Cmd>
		while(DMA_GetCmdStatus(DMA2_Stream2) != DISABLE);
 8000f7c:	bf00      	nop
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <USART1_IRQHandler+0x5c>)
 8000f80:	f000 fb9a 	bl	80016b8 <DMA_GetCmdStatus>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f9      	bne.n	8000f7e <USART1_IRQHandler+0x3e>

	}

}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40011000 	.word	0x40011000
 8000f98:	20000e80 	.word	0x20000e80
 8000f9c:	40026440 	.word	0x40026440

08000fa0 <DMA2_Stream2_IRQHandler>:

/* UART-MEM IRQ HANDLER */
#ifdef STM32_GNSS_USE_DMA
void DMA2_Stream2_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	//check transfer complete flag
	if(DMA_GetFlagStatus(DMA2_Stream2,DMA_FLAG_TCIF2) == SET)
 8000fa4:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8000fa8:	4810      	ldr	r0, [pc, #64]	; (8000fec <DMA2_Stream2_IRQHandler+0x4c>)
 8000faa:	f000 fb9d 	bl	80016e8 <DMA_GetFlagStatus>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d119      	bne.n	8000fe8 <DMA2_Stream2_IRQHandler+0x48>
	{

		//set log to off
		RX_COMPLETE_FLAG = 0;
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <DMA2_Stream2_IRQHandler+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
		//get data that still needs to be transferred
		gnss_length = DMA_RX_BUFFER_SIZE - DMA_GetCurrDataCounter(DMA2_Stream2);
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <DMA2_Stream2_IRQHandler+0x4c>)
 8000fbc:	f000 fb6e 	bl	800169c <DMA_GetCurrDataCounter>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <DMA2_Stream2_IRQHandler+0x54>)
 8000fc8:	6013      	str	r3, [r2, #0]
		//zero_gnss_memory();

		//clear USART-DMA Transfer bit
		DMA_ClearITPendingBit(DMA2_Stream2, DMA_IT_TCIF2);
 8000fca:	490b      	ldr	r1, [pc, #44]	; (8000ff8 <DMA2_Stream2_IRQHandler+0x58>)
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <DMA2_Stream2_IRQHandler+0x4c>)
 8000fce:	f000 fbc7 	bl	8001760 <DMA_ClearITPendingBit>

		/* Enable DMA transfer to memory */
		#ifdef STM32_GMEM_USE_DMA
		DMA_Cmd(DMA2_Stream0, ENABLE);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <DMA2_Stream2_IRQHandler+0x5c>)
 8000fd6:	f000 fb45 	bl	8001664 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA2_Stream0) != ENABLE) { ; }
 8000fda:	bf00      	nop
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <DMA2_Stream2_IRQHandler+0x5c>)
 8000fde:	f000 fb6b 	bl	80016b8 <DMA_GetCmdStatus>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d1f9      	bne.n	8000fdc <DMA2_Stream2_IRQHandler+0x3c>
		DMA_Cmd(DMA2_Stream2, ENABLE);
		while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != ENABLE) { ; }
		#endif
	}

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40026440 	.word	0x40026440
 8000ff0:	20000e80 	.word	0x20000e80
 8000ff4:	20000e70 	.word	0x20000e70
 8000ff8:	10208000 	.word	0x10208000
 8000ffc:	40026410 	.word	0x40026410

08001000 <DMA2_Stream0_IRQHandler>:
#endif
/* MEM _ MEM IRQ HANDLER */
#ifdef STM32_GMEM_USE_DMA
void DMA2_Stream0_IRQHandler (void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	/* Test on DMA Stream Transfer Complete interrupt */
	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_TCIF0) != RESET)
 8001006:	4934      	ldr	r1, [pc, #208]	; (80010d8 <DMA2_Stream0_IRQHandler+0xd8>)
 8001008:	4834      	ldr	r0, [pc, #208]	; (80010dc <DMA2_Stream0_IRQHandler+0xdc>)
 800100a:	f000 fb6d 	bl	80016e8 <DMA_GetFlagStatus>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d05d      	beq.n	80010d0 <DMA2_Stream0_IRQHandler+0xd0>
	{

		RX_COMPLETE_FLAG = 1;
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <DMA2_Stream0_IRQHandler+0xe0>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
		// transfer message to buffer
		char* msg;
		msg = strtok((char*)DMA_RX_Buffer,"$");
 800101a:	4932      	ldr	r1, [pc, #200]	; (80010e4 <DMA2_Stream0_IRQHandler+0xe4>)
 800101c:	4832      	ldr	r0, [pc, #200]	; (80010e8 <DMA2_Stream0_IRQHandler+0xe8>)
 800101e:	f003 fcf7 	bl	8004a10 <strtok>
 8001022:	6078      	str	r0, [r7, #4]
		while(msg != NULL)
 8001024:	e03e      	b.n	80010a4 <DMA2_Stream0_IRQHandler+0xa4>
		{
			switch(is_valid(msg))
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f866 	bl	80010f8 <is_valid>
 800102c:	4603      	mov	r3, r0
 800102e:	2b02      	cmp	r3, #2
 8001030:	d012      	beq.n	8001058 <DMA2_Stream0_IRQHandler+0x58>
 8001032:	2b03      	cmp	r3, #3
 8001034:	d01e      	beq.n	8001074 <DMA2_Stream0_IRQHandler+0x74>
 8001036:	2b01      	cmp	r3, #1
 8001038:	d000      	beq.n	800103c <DMA2_Stream0_IRQHandler+0x3c>
						packet_full |= 0b100;
					}
					break;
				default:
					// invalid case
					break;
 800103a:	e02e      	b.n	800109a <DMA2_Stream0_IRQHandler+0x9a>
		while(msg != NULL)
		{
			switch(is_valid(msg))
			{
				case 1:
					if(Parse_GLL(msg) == 2)
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f9d1 	bl	80013e4 <Parse_GLL>
 8001042:	4603      	mov	r3, r0
 8001044:	2b02      	cmp	r3, #2
 8001046:	d123      	bne.n	8001090 <DMA2_Stream0_IRQHandler+0x90>
					{
						packet_full |= 0b1;
 8001048:	4b28      	ldr	r3, [pc, #160]	; (80010ec <DMA2_Stream0_IRQHandler+0xec>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <DMA2_Stream0_IRQHandler+0xec>)
 8001054:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001056:	e01b      	b.n	8001090 <DMA2_Stream0_IRQHandler+0x90>
				case 2:

					if(parse_GSA(msg) == 0)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 fa5b 	bl	8001514 <parse_GSA>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d117      	bne.n	8001094 <DMA2_Stream0_IRQHandler+0x94>
					{
						packet_full |= 0b10;
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <DMA2_Stream0_IRQHandler+0xec>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <DMA2_Stream0_IRQHandler+0xec>)
 8001070:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001072:	e00f      	b.n	8001094 <DMA2_Stream0_IRQHandler+0x94>
				case 3:
					if(parse_ZDA(msg) == 0)
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f8ed 	bl	8001254 <parse_ZDA>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10b      	bne.n	8001098 <DMA2_Stream0_IRQHandler+0x98>
					{
						packet_full |= 0b100;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <DMA2_Stream0_IRQHandler+0xec>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <DMA2_Stream0_IRQHandler+0xec>)
 800108c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800108e:	e003      	b.n	8001098 <DMA2_Stream0_IRQHandler+0x98>
				case 1:
					if(Parse_GLL(msg) == 2)
					{
						packet_full |= 0b1;
					}
					break;
 8001090:	bf00      	nop
 8001092:	e002      	b.n	800109a <DMA2_Stream0_IRQHandler+0x9a>

					if(parse_GSA(msg) == 0)
					{
						packet_full |= 0b10;
					}
					break;
 8001094:	bf00      	nop
 8001096:	e000      	b.n	800109a <DMA2_Stream0_IRQHandler+0x9a>
				case 3:
					if(parse_ZDA(msg) == 0)
					{
						packet_full |= 0b100;
					}
					break;
 8001098:	bf00      	nop
				default:
					// invalid case
					break;
			}
			msg = strtok(NULL,"$");
 800109a:	4912      	ldr	r1, [pc, #72]	; (80010e4 <DMA2_Stream0_IRQHandler+0xe4>)
 800109c:	2000      	movs	r0, #0
 800109e:	f003 fcb7 	bl	8004a10 <strtok>
 80010a2:	6078      	str	r0, [r7, #4]

		RX_COMPLETE_FLAG = 1;
		// transfer message to buffer
		char* msg;
		msg = strtok((char*)DMA_RX_Buffer,"$");
		while(msg != NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1bd      	bne.n	8001026 <DMA2_Stream0_IRQHandler+0x26>
					// invalid case
					break;
			}
			msg = strtok(NULL,"$");
		}
		zero_dma_gnss_memory();
 80010aa:	f7ff ff15 	bl	8000ed8 <zero_dma_gnss_memory>
		zero_gnss_memory();
 80010ae:	f7ff ff2d 	bl	8000f0c <zero_gnss_memory>
		/* Clear DMA Stream Transfer Complete interrupt pending bit */
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);
 80010b2:	490f      	ldr	r1, [pc, #60]	; (80010f0 <DMA2_Stream0_IRQHandler+0xf0>)
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <DMA2_Stream0_IRQHandler+0xdc>)
 80010b6:	f000 fb53 	bl	8001760 <DMA_ClearITPendingBit>

		/* Enable DMA transfer */
		DMA_Cmd(DMA2_Stream2, ENABLE);
 80010ba:	2101      	movs	r1, #1
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <DMA2_Stream0_IRQHandler+0xf4>)
 80010be:	f000 fad1 	bl	8001664 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA2_Stream2 ) != ENABLE);
 80010c2:	bf00      	nop
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <DMA2_Stream0_IRQHandler+0xf4>)
 80010c6:	f000 faf7 	bl	80016b8 <DMA_GetCmdStatus>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d1f9      	bne.n	80010c4 <DMA2_Stream0_IRQHandler+0xc4>

	}
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	10000020 	.word	0x10000020
 80010dc:	40026410 	.word	0x40026410
 80010e0:	20000e80 	.word	0x20000e80
 80010e4:	08007548 	.word	0x08007548
 80010e8:	20000e94 	.word	0x20000e94
 80010ec:	20000e88 	.word	0x20000e88
 80010f0:	10008020 	.word	0x10008020
 80010f4:	40026440 	.word	0x40026440

080010f8 <is_valid>:
 *   1 GLL msg
 *   2 GGA msg
 *   3 ZDA msg
 */
uint8_t is_valid(char* nmeamsg)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	77fb      	strb	r3, [r7, #31]

	char msg[4] = {0};
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	e00d      	b.n	800112a <is_valid+0x32>
	{
		msg[i] = *(nmeamsg+2+i);
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	3302      	adds	r3, #2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	7819      	ldrb	r1, [r3, #0]
 8001118:	f107 020c 	add.w	r2, r7, #12
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4413      	add	r3, r2
 8001120:	460a      	mov	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
uint8_t is_valid(char* nmeamsg)
{
	uint8_t flag = 0;

	char msg[4] = {0};
	for (int i = 0; i < 3; ++i)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	3301      	adds	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b02      	cmp	r3, #2
 800112e:	ddee      	ble.n	800110e <is_valid+0x16>
	{
		msg[i] = *(nmeamsg+2+i);
	}
	if((strcmp((char*)msg,"GLL") != 0))
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	492c      	ldr	r1, [pc, #176]	; (80011e8 <is_valid+0xf0>)
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f846 	bl	80001c8 <strcmp>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d019      	beq.n	8001176 <is_valid+0x7e>
	{

		if (strcmp((char*)msg,"ZDA") != 0)
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4929      	ldr	r1, [pc, #164]	; (80011ec <is_valid+0xf4>)
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f83d 	bl	80001c8 <strcmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00d      	beq.n	8001170 <is_valid+0x78>
		{
			if(strcmp((char*)msg,"GSA") != 0)
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4925      	ldr	r1, [pc, #148]	; (80011f0 <is_valid+0xf8>)
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f834 	bl	80001c8 <strcmp>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <is_valid+0x72>
			{
				return -1;
 8001166:	23ff      	movs	r3, #255	; 0xff
 8001168:	e039      	b.n	80011de <is_valid+0xe6>
			}
			else
			{
				flag = 2;
 800116a:	2302      	movs	r3, #2
 800116c:	77fb      	strb	r3, [r7, #31]
 800116e:	e004      	b.n	800117a <is_valid+0x82>
			}
		}else
		{
			flag = 3;
 8001170:	2303      	movs	r3, #3
 8001172:	77fb      	strb	r3, [r7, #31]
 8001174:	e001      	b.n	800117a <is_valid+0x82>
		}

	}
	else
	{
		flag = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	77fb      	strb	r3, [r7, #31]
	}
	/* check sum */
	uint16_t checksum = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	82fb      	strh	r3, [r7, #22]
	while(*nmeamsg != '*')
 800117e:	e008      	b.n	8001192 <is_valid+0x9a>
	{
		checksum^= *nmeamsg;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b29a      	uxth	r2, r3
 8001186:	8afb      	ldrh	r3, [r7, #22]
 8001188:	4053      	eors	r3, r2
 800118a:	82fb      	strh	r3, [r7, #22]
		nmeamsg++;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3301      	adds	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
	{
		flag = 1;
	}
	/* check sum */
	uint16_t checksum = 0;
	while(*nmeamsg != '*')
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b2a      	cmp	r3, #42	; 0x2a
 8001198:	d1f2      	bne.n	8001180 <is_valid+0x88>
	{
		checksum^= *nmeamsg;
		nmeamsg++;
	}
	uint8_t h = char_to_hex(*(++nmeamsg))*16;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3301      	adds	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 f825 	bl	80011f4 <char_to_hex>
 80011aa:	4603      	mov	r3, r0
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	757b      	strb	r3, [r7, #21]
	uint8_t l = char_to_hex(*(++nmeamsg));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3301      	adds	r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f81a 	bl	80011f4 <char_to_hex>
 80011c0:	4603      	mov	r3, r0
 80011c2:	753b      	strb	r3, [r7, #20]
	uint16_t checkbyte= h+l;
 80011c4:	7d7b      	ldrb	r3, [r7, #21]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	7d3b      	ldrb	r3, [r7, #20]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	827b      	strh	r3, [r7, #18]

	if(!(checksum == checkbyte))
 80011d0:	8afa      	ldrh	r2, [r7, #22]
 80011d2:	8a7b      	ldrh	r3, [r7, #18]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <is_valid+0xe4>
	{
		return -1;
 80011d8:	23ff      	movs	r3, #255	; 0xff
 80011da:	e000      	b.n	80011de <is_valid+0xe6>
	}

	return flag;
 80011dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800754c 	.word	0x0800754c
 80011ec:	08007550 	.word	0x08007550
 80011f0:	08007554 	.word	0x08007554

080011f4 <char_to_hex>:
/*
 * Flag keeps track of successful coordinate retrievals
 */
uint8_t char_to_hex(char c)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	if(c == '\0')
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <char_to_hex+0x14>
	{
		return 0;
 8001204:	2300      	movs	r3, #0
 8001206:	e01e      	b.n	8001246 <char_to_hex+0x52>
	}
	if ((c >='0') &&(c <='9'))
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b2f      	cmp	r3, #47	; 0x2f
 800120c:	d906      	bls.n	800121c <char_to_hex+0x28>
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b39      	cmp	r3, #57	; 0x39
 8001212:	d803      	bhi.n	800121c <char_to_hex+0x28>
	{
		return (uint8_t)c - 48;
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3b30      	subs	r3, #48	; 0x30
 8001218:	b2db      	uxtb	r3, r3
 800121a:	e014      	b.n	8001246 <char_to_hex+0x52>
	}
	if((c >='a') &&(c <='f'))
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b60      	cmp	r3, #96	; 0x60
 8001220:	d906      	bls.n	8001230 <char_to_hex+0x3c>
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b66      	cmp	r3, #102	; 0x66
 8001226:	d803      	bhi.n	8001230 <char_to_hex+0x3c>
	{
		return (uint8_t)c - 87;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	3b57      	subs	r3, #87	; 0x57
 800122c:	b2db      	uxtb	r3, r3
 800122e:	e00a      	b.n	8001246 <char_to_hex+0x52>
	}
	if((c >='A') &&(c <='F'))
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b40      	cmp	r3, #64	; 0x40
 8001234:	d906      	bls.n	8001244 <char_to_hex+0x50>
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b46      	cmp	r3, #70	; 0x46
 800123a:	d803      	bhi.n	8001244 <char_to_hex+0x50>
	{
		return (uint8_t)c - 55;
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	3b37      	subs	r3, #55	; 0x37
 8001240:	b2db      	uxtb	r3, r3
 8001242:	e000      	b.n	8001246 <char_to_hex+0x52>
	}
	return -1; //invalid charachter
 8001244:	23ff      	movs	r3, #255	; 0xff
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop

08001254 <parse_ZDA>:
/*
 * Parser Functions:
 * Extract key data from NMEA message strings.
 */
uint8_t parse_ZDA(char* ZDAstring)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	time_t t;
	struct tm *timepointer;

	t = time(NULL);
 800125c:	2000      	movs	r0, #0
 800125e:	f003 fc41 	bl	8004ae4 <time>
 8001262:	4603      	mov	r3, r0
 8001264:	60fb      	str	r3, [r7, #12]
	timepointer = localtime(&t);
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f810 	bl	8003290 <localtime>
 8001270:	61b8      	str	r0, [r7, #24]
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
 8001272:	bf00      	nop
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b2c      	cmp	r3, #44	; 0x2c
 800127e:	d1f9      	bne.n	8001274 <parse_ZDA+0x20>
	char* temp = ZDAstring++;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	e011      	b.n	80012b2 <parse_ZDA+0x5e>
	{
		if ((ZDAstring[i]==',')&&(ZDAstring[i+1] == ','))
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b2c      	cmp	r3, #44	; 0x2c
 8001298:	d108      	bne.n	80012ac <parse_ZDA+0x58>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b2c      	cmp	r3, #44	; 0x2c
 80012a6:	d101      	bne.n	80012ac <parse_ZDA+0x58>
		{
			/* Data is invalid*/
			return -1;
 80012a8:	23ff      	movs	r3, #255	; 0xff
 80012aa:	e094      	b.n	80013d6 <parse_ZDA+0x182>
	t = time(NULL);
	timepointer = localtime(&t);
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
	char* temp = ZDAstring++;
	for (int i = 0; i < strlen(ZDAstring); ++i)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	3301      	adds	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7fe ff92 	bl	80001dc <strlen>
 80012b8:	4602      	mov	r2, r0
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8e6      	bhi.n	800128e <parse_ZDA+0x3a>
		{
			/* Data is invalid*/
			return -1;
		}
	}
	timepointer->tm_hour = (temp[0]-48)*10+ (temp[1]-48)+2;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	461a      	mov	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3b30      	subs	r3, #48	; 0x30
 80012da:	4413      	add	r3, r2
 80012dc:	1c9a      	adds	r2, r3, #2
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	609a      	str	r2, [r3, #8]
	timepointer->tm_min = (temp[2]-48)*10+ (temp[3]-48)-1;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3302      	adds	r3, #2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	461a      	mov	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3303      	adds	r3, #3
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	3b30      	subs	r3, #48	; 0x30
 80012fe:	4413      	add	r3, r2
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	605a      	str	r2, [r3, #4]
	timepointer->tm_sec = (temp[4]-48)*10+ (temp[5]-48) -1 ;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3304      	adds	r3, #4
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	461a      	mov	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3305      	adds	r3, #5
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3b30      	subs	r3, #48	; 0x30
 8001322:	4413      	add	r3, r2
 8001324:	1e5a      	subs	r2, r3, #1
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	601a      	str	r2, [r3, #0]
	while(*ZDAstring++ != ',');
 800132a:	bf00      	nop
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b2c      	cmp	r3, #44	; 0x2c
 8001336:	d1f9      	bne.n	800132c <parse_ZDA+0xd8>
	temp = ZDAstring;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	617b      	str	r3, [r7, #20]
	timepointer->tm_mday = (temp[0]-48)*10+ (temp[1]-48);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	461a      	mov	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	3b30      	subs	r3, #48	; 0x30
 8001356:	441a      	add	r2, r3
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
	timepointer->tm_mon = (temp[3]-48)*10+ (temp[4]-48)-1;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3303      	adds	r3, #3
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	461a      	mov	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3304      	adds	r3, #4
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3b30      	subs	r3, #48	; 0x30
 8001378:	4413      	add	r3, r2
 800137a:	1e5a      	subs	r2, r3, #1
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	611a      	str	r2, [r3, #16]
	timepointer->tm_year = (temp[6]-48)*1000 +(temp[7]-48)*100 + (temp[8]-48)*10 +(temp[9]-48)-1900;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3306      	adds	r3, #6
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3b30      	subs	r3, #48	; 0x30
 8001388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800138c:	fb02 f203 	mul.w	r2, r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3307      	adds	r3, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	3b30      	subs	r3, #48	; 0x30
 8001398:	2164      	movs	r1, #100	; 0x64
 800139a:	fb01 f303 	mul.w	r3, r1, r3
 800139e:	18d1      	adds	r1, r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3308      	adds	r3, #8
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	18ca      	adds	r2, r1, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3309      	adds	r3, #9
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	3b30      	subs	r3, #48	; 0x30
 80013bc:	4413      	add	r3, r2
 80013be:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	615a      	str	r2, [r3, #20]
	time_t result;

	 result = mktime(timepointer);
 80013c6:	69b8      	ldr	r0, [r7, #24]
 80013c8:	f002 fb7a 	bl	8003ac0 <mktime>
 80013cc:	6138      	str	r0, [r7, #16]
	 eTime =  result;
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <parse_ZDA+0x18c>)
 80013d2:	6013      	str	r3, [r2, #0]
	return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000e84 	.word	0x20000e84

080013e4 <Parse_GLL>:
uint8_t Parse_GLL(char* GLLstring)
{
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	/* Extract latitude*/
	uint8_t flag = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	75fb      	strb	r3, [r7, #23]
	GLLstring+= 6;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3306      	adds	r3, #6
 80013f4:	607b      	str	r3, [r7, #4]
	char* temp = GLLstring;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	613b      	str	r3, [r7, #16]
	uint8_t count = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 80013fe:	e002      	b.n	8001406 <Parse_GLL+0x22>
	{
		count++;
 8001400:	7dbb      	ldrb	r3, [r7, #22]
 8001402:	3301      	adds	r3, #1
 8001404:	75bb      	strb	r3, [r7, #22]
	/* Extract latitude*/
	uint8_t flag = 0;
	GLLstring+= 6;
	char* temp = GLLstring;
	uint8_t count = 0;
	while(*GLLstring++ != ',')
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b2c      	cmp	r3, #44	; 0x2c
 8001410:	d1f6      	bne.n	8001400 <Parse_GLL+0x1c>
	{
		count++;
	}
	if((count > 0))
 8001412:	7dbb      	ldrb	r3, [r7, #22]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d02e      	beq.n	8001476 <Parse_GLL+0x92>
	{
		temp[count] = '\0';
 8001418:	7dbb      	ldrb	r3, [r7, #22]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4413      	add	r3, r2
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
		int8_t sign = 1 -2*( temp[++count] =='S');
 8001422:	7dbb      	ldrb	r3, [r7, #22]
 8001424:	3301      	adds	r3, #1
 8001426:	75bb      	strb	r3, [r7, #22]
 8001428:	7dbb      	ldrb	r3, [r7, #22]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b53      	cmp	r3, #83	; 0x53
 8001432:	d102      	bne.n	800143a <Parse_GLL+0x56>
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	e000      	b.n	800143c <Parse_GLL+0x58>
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
		GPS_coord.lat = sign*atof(temp);
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f824 	bl	8000490 <__aeabi_i2d>
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	6938      	ldr	r0, [r7, #16]
 800144e:	f001 fef5 	bl	800323c <atof>
 8001452:	ec53 2b10 	vmov	r2, r3, d0
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7ff f87f 	bl	800055c <__aeabi_dmul>
 800145e:	4603      	mov	r3, r0
 8001460:	460c      	mov	r4, r1
 8001462:	4618      	mov	r0, r3
 8001464:	4621      	mov	r1, r4
 8001466:	f7ff fb5b 	bl	8000b20 <__aeabi_d2f>
 800146a:	4602      	mov	r2, r0
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <Parse_GLL+0x12c>)
 800146e:	601a      	str	r2, [r3, #0]
		flag++;
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	3301      	adds	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
	}

	/* Extract longitude */
	while(*GLLstring++ !=',');
 8001476:	bf00      	nop
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b2c      	cmp	r3, #44	; 0x2c
 8001482:	d1f9      	bne.n	8001478 <Parse_GLL+0x94>
	temp = GLLstring;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	613b      	str	r3, [r7, #16]
	count = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 800148c:	e002      	b.n	8001494 <Parse_GLL+0xb0>
	{
			count++;
 800148e:	7dbb      	ldrb	r3, [r7, #22]
 8001490:	3301      	adds	r3, #1
 8001492:	75bb      	strb	r3, [r7, #22]

	/* Extract longitude */
	while(*GLLstring++ !=',');
	temp = GLLstring;
	count = 0;
	while(*GLLstring++ != ',')
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b2c      	cmp	r3, #44	; 0x2c
 800149e:	d1f6      	bne.n	800148e <Parse_GLL+0xaa>
	{
			count++;
	}
	if((count > 0))
 80014a0:	7dbb      	ldrb	r3, [r7, #22]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d02e      	beq.n	8001504 <Parse_GLL+0x120>
	{
			temp[count] = '\0';
 80014a6:	7dbb      	ldrb	r3, [r7, #22]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4413      	add	r3, r2
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
			int8_t sign = 1 -2*( temp[++count] =='W');
 80014b0:	7dbb      	ldrb	r3, [r7, #22]
 80014b2:	3301      	adds	r3, #1
 80014b4:	75bb      	strb	r3, [r7, #22]
 80014b6:	7dbb      	ldrb	r3, [r7, #22]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b57      	cmp	r3, #87	; 0x57
 80014c0:	d102      	bne.n	80014c8 <Parse_GLL+0xe4>
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e000      	b.n	80014ca <Parse_GLL+0xe6>
 80014c8:	2301      	movs	r3, #1
 80014ca:	73bb      	strb	r3, [r7, #14]
			GPS_coord.longi = sign*atof(temp);
 80014cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ffdd 	bl	8000490 <__aeabi_i2d>
 80014d6:	4604      	mov	r4, r0
 80014d8:	460d      	mov	r5, r1
 80014da:	6938      	ldr	r0, [r7, #16]
 80014dc:	f001 feae 	bl	800323c <atof>
 80014e0:	ec53 2b10 	vmov	r2, r3, d0
 80014e4:	4620      	mov	r0, r4
 80014e6:	4629      	mov	r1, r5
 80014e8:	f7ff f838 	bl	800055c <__aeabi_dmul>
 80014ec:	4603      	mov	r3, r0
 80014ee:	460c      	mov	r4, r1
 80014f0:	4618      	mov	r0, r3
 80014f2:	4621      	mov	r1, r4
 80014f4:	f7ff fb14 	bl	8000b20 <__aeabi_d2f>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <Parse_GLL+0x12c>)
 80014fc:	605a      	str	r2, [r3, #4]
			flag++;
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	3301      	adds	r3, #1
 8001502:	75fb      	strb	r3, [r7, #23]

	}

return flag;
 8001504:	7dfb      	ldrb	r3, [r7, #23]

}
 8001506:	4618      	mov	r0, r3
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bdb0      	pop	{r4, r5, r7, pc}
 800150e:	bf00      	nop
 8001510:	20000e8c 	.word	0x20000e8c

08001514 <parse_GSA>:
uint8_t parse_GSA(char* GSA_string)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	77fb      	strb	r3, [r7, #31]
	char* t = GSA_string;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	61bb      	str	r3, [r7, #24]
	while(count < 2)
 8001524:	e008      	b.n	8001538 <parse_GSA+0x24>
	{
		if(*t++==',')count++;
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	61ba      	str	r2, [r7, #24]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b2c      	cmp	r3, #44	; 0x2c
 8001530:	d102      	bne.n	8001538 <parse_GSA+0x24>
 8001532:	7ffb      	ldrb	r3, [r7, #31]
 8001534:	3301      	adds	r3, #1
 8001536:	77fb      	strb	r3, [r7, #31]
uint8_t parse_GSA(char* GSA_string)
{
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
	char* t = GSA_string;
	while(count < 2)
 8001538:	7ffb      	ldrb	r3, [r7, #31]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d9f3      	bls.n	8001526 <parse_GSA+0x12>
	{
		if(*t++==',')count++;
	}
	diag.fix_type = (*t++-48);
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	61ba      	str	r2, [r7, #24]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	3b30      	subs	r3, #48	; 0x30
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b45      	ldr	r3, [pc, #276]	; (8001660 <parse_GSA+0x14c>)
 800154c:	71da      	strb	r2, [r3, #7]

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]
	uint8_t numfields = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 8001556:	e015      	b.n	8001584 <parse_GSA+0x70>
	{
		uint8_t count = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	757b      	strb	r3, [r7, #21]
		while(*++t !=',')count++;
 800155c:	e002      	b.n	8001564 <parse_GSA+0x50>
 800155e:	7d7b      	ldrb	r3, [r7, #21]
 8001560:	3301      	adds	r3, #1
 8001562:	757b      	strb	r3, [r7, #21]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	3301      	adds	r3, #1
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b2c      	cmp	r3, #44	; 0x2c
 8001570:	d1f5      	bne.n	800155e <parse_GSA+0x4a>
		if(count > 0)
 8001572:	7d7b      	ldrb	r3, [r7, #21]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <parse_GSA+0x6a>
		{
			numsats++;
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	3301      	adds	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
		}
		numfields++;
 800157e:	7dbb      	ldrb	r3, [r7, #22]
 8001580:	3301      	adds	r3, #1
 8001582:	75bb      	strb	r3, [r7, #22]
	diag.fix_type = (*t++-48);

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
	uint8_t numfields = 0;
	while(numfields < 12)
 8001584:	7dbb      	ldrb	r3, [r7, #22]
 8001586:	2b0b      	cmp	r3, #11
 8001588:	d9e6      	bls.n	8001558 <parse_GSA+0x44>
			numsats++;
		}
		numfields++;

	}
	diag.num_sats = numsats;
 800158a:	4a35      	ldr	r2, [pc, #212]	; (8001660 <parse_GSA+0x14c>)
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	7193      	strb	r3, [r2, #6]
	DOP_t dop[3] = {0};
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 3; ++i)
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	e043      	b.n	8001628 <parse_GSA+0x114>
	{
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	f107 0220 	add.w	r2, r7, #32
 80015a8:	4413      	add	r3, r2
 80015aa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80015ae:	461a      	mov	r2, r3
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3b30      	subs	r3, #48	; 0x30
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	f107 0120 	add.w	r1, r7, #32
 80015cc:	440b      	add	r3, r1
 80015ce:	f803 2c18 	strb.w	r2, [r3, #-24]
	diag.num_sats = numsats;
	DOP_t dop[3] = {0};
	for (int i = 0; i < 3; ++i)
	{
		//get digit
		while(*++t != '.')
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b2e      	cmp	r3, #46	; 0x2e
 80015de:	d1df      	bne.n	80015a0 <parse_GSA+0x8c>
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
		}
		while(*++t != ',')
 80015e0:	e018      	b.n	8001614 <parse_GSA+0x100>
		{
			dop[i].precision = dop[i].precision*10+(*t-48);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	f107 0220 	add.w	r2, r7, #32
 80015ea:	4413      	add	r3, r2
 80015ec:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 80015f0:	461a      	mov	r2, r3
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	b2db      	uxtb	r3, r3
 8001602:	3b30      	subs	r3, #48	; 0x30
 8001604:	b2da      	uxtb	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	f107 0120 	add.w	r1, r7, #32
 800160e:	440b      	add	r3, r1
 8001610:	f803 2c17 	strb.w	r2, [r3, #-23]
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
		}
		while(*++t != ',')
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	3301      	adds	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b2c      	cmp	r3, #44	; 0x2c
 8001620:	d1df      	bne.n	80015e2 <parse_GSA+0xce>
		numfields++;

	}
	diag.num_sats = numsats;
	DOP_t dop[3] = {0};
	for (int i = 0; i < 3; ++i)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	3301      	adds	r3, #1
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b02      	cmp	r3, #2
 800162c:	ddd1      	ble.n	80015d2 <parse_GSA+0xbe>
	}
	/*
	 * If successful, add to diagnostic struct
	 *
	 */
diag.HDOP = dop[0];
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <parse_GSA+0x14c>)
 8001630:	3302      	adds	r3, #2
 8001632:	f107 0208 	add.w	r2, r7, #8
 8001636:	8812      	ldrh	r2, [r2, #0]
 8001638:	801a      	strh	r2, [r3, #0]
diag.PDOP = dop[1];
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <parse_GSA+0x14c>)
 800163c:	461a      	mov	r2, r3
 800163e:	f107 030a 	add.w	r3, r7, #10
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	8013      	strh	r3, [r2, #0]
diag.VDOP = dop[2];
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <parse_GSA+0x14c>)
 8001648:	3304      	adds	r3, #4
 800164a:	f107 020c 	add.w	r2, r7, #12
 800164e:	8812      	ldrh	r2, [r2, #0]
 8001650:	801a      	strh	r2, [r3, #0]
	return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3724      	adds	r7, #36	; 0x24
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000e78 	.word	0x20000e78

08001664 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8001682:	e005      	b.n	8001690 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 0201 	bic.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	601a      	str	r2, [r3, #0]
  }
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	b29b      	uxth	r3, r3
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop

080016b8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e001      	b.n	80016da <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a15      	ldr	r2, [pc, #84]	; (8001754 <DMA_GetFlagStatus+0x6c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d802      	bhi.n	8001708 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <DMA_GetFlagStatus+0x70>)
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	e001      	b.n	800170c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <DMA_GetFlagStatus+0x74>)
 800170a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e002      	b.n	8001724 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800172a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800172e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
 800173e:	e001      	b.n	8001744 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001744:	7dfb      	ldrb	r3, [r7, #23]
}
 8001746:	4618      	mov	r0, r3
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	4002640f 	.word	0x4002640f
 8001758:	40026000 	.word	0x40026000
 800175c:	40026400 	.word	0x40026400

08001760 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <DMA_ClearITPendingBit+0x50>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d802      	bhi.n	8001778 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <DMA_ClearITPendingBit+0x54>)
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e001      	b.n	800177c <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <DMA_ClearITPendingBit+0x58>)
 800177a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800178c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8001794:	e006      	b.n	80017a4 <DMA_ClearITPendingBit+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800179c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	6093      	str	r3, [r2, #8]
  }   
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	4002640f 	.word	0x4002640f
 80017b4:	40026000 	.word	0x40026000
 80017b8:	40026400 	.word	0x40026400

080017bc <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <EXTI_GetITStatus+0x44>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4013      	ands	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <EXTI_GetITStatus+0x44>)
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <EXTI_GetITStatus+0x32>
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e001      	b.n	80017f2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40013c00 	.word	0x40013c00

08001804 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <EXTI_ClearITPendingBit+0x1c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6153      	str	r3, [r2, #20]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40013c00 	.word	0x40013c00

08001824 <FLASH_SetLatency>:
  *          For STM32F40xx/41xx and STM32F427x/437x devices this parameter can be   
  *          a value between FLASH_Latency_0 and FLASH_Latency_7.   
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <FLASH_SetLatency+0x1c>)
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40023c00 	.word	0x40023c00

08001844 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e001      	b.n	800186a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800187c:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <RCC_DeInit+0x50>)
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <RCC_DeInit+0x50>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <RCC_DeInit+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <RCC_DeInit+0x50>)
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <RCC_DeInit+0x50>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8001898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <RCC_DeInit+0x50>)
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <RCC_DeInit+0x54>)
 80018a2:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <RCC_DeInit+0x50>)
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <RCC_DeInit+0x58>)
 80018a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018ac:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <RCC_DeInit+0x50>)
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <RCC_DeInit+0x50>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <RCC_DeInit+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40023800 	.word	0x40023800
 80018cc:	24003010 	.word	0x24003010
 80018d0:	20003000 	.word	0x20003000

080018d4 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <RCC_HSEConfig+0x24>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <RCC_HSEConfig+0x24>)
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	7013      	strb	r3, [r2, #0]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023802 	.word	0x40023802

080018fc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001906:	2300      	movs	r3, #0
 8001908:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800190e:	2031      	movs	r0, #49	; 0x31
 8001910:	f000 f968 	bl	8001be4 <RCC_GetFlagStatus>
 8001914:	4603      	mov	r3, r0
 8001916:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001924:	d002      	beq.n	800192c <RCC_WaitForHSEStartUp+0x30>
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800192c:	2031      	movs	r0, #49	; 0x31
 800192e:	f000 f959 	bl	8001be4 <RCC_GetFlagStatus>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001938:	2301      	movs	r3, #1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	e001      	b.n	8001942 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800193e:	2300      	movs	r3, #0
 8001940:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8001942:	79fb      	ldrb	r3, [r7, #7]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800195a:	490b      	ldr	r1, [pc, #44]	; (8001988 <RCC_PLLConfig+0x3c>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	019a      	lsls	r2, r3, #6
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	431a      	orrs	r2, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	3b01      	subs	r3, #1
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	431a      	orrs	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	061b      	lsls	r3, r3, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
                 (PLLQ << 24);
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <RCC_PLLCmd+0x1c>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	42470060 	.word	0x42470060

080019ac <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <RCC_SYSCLKConfig+0x34>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f023 0303 	bic.w	r3, r3, #3
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <RCC_SYSCLKConfig+0x34>)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6093      	str	r3, [r2, #8]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40023800 	.word	0x40023800

080019e4 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <RCC_HCLKConfig+0x34>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <RCC_HCLKConfig+0x34>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6093      	str	r3, [r2, #8]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40023800 	.word	0x40023800

08001a1c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <RCC_PCLK1Config+0x34>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <RCC_PCLK1Config+0x34>)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6093      	str	r3, [r2, #8]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	40023800 	.word	0x40023800

08001a54 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <RCC_PCLK2Config+0x38>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <RCC_PCLK2Config+0x38>)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6093      	str	r3, [r2, #8]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	2302      	movs	r3, #2
 8001aae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001ab0:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <RCC_GetClocksFreq+0x144>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d007      	beq.n	8001ad0 <RCC_GetClocksFreq+0x40>
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d009      	beq.n	8001ad8 <RCC_GetClocksFreq+0x48>
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d13f      	bne.n	8001b48 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <RCC_GetClocksFreq+0x148>)
 8001acc:	601a      	str	r2, [r3, #0]
      break;
 8001ace:	e03f      	b.n	8001b50 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a42      	ldr	r2, [pc, #264]	; (8001bdc <RCC_GetClocksFreq+0x14c>)
 8001ad4:	601a      	str	r2, [r3, #0]
      break;
 8001ad6:	e03b      	b.n	8001b50 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001ad8:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <RCC_GetClocksFreq+0x144>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae0:	0d9b      	lsrs	r3, r3, #22
 8001ae2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae4:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <RCC_GetClocksFreq+0x144>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aec:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001af4:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <RCC_GetClocksFreq+0x14c>)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001afc:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <RCC_GetClocksFreq+0x144>)
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b04:	400b      	ands	r3, r1
 8001b06:	099b      	lsrs	r3, r3, #6
 8001b08:	fb03 f302 	mul.w	r3, r3, r2
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e00c      	b.n	8001b2a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001b10:	4a31      	ldr	r2, [pc, #196]	; (8001bd8 <RCC_GetClocksFreq+0x148>)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <RCC_GetClocksFreq+0x144>)
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b20:	400b      	ands	r3, r1
 8001b22:	099b      	lsrs	r3, r3, #6
 8001b24:	fb03 f302 	mul.w	r3, r3, r2
 8001b28:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <RCC_GetClocksFreq+0x144>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	3301      	adds	r3, #1
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	601a      	str	r2, [r3, #0]
      break;
 8001b46:	e003      	b.n	8001b50 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <RCC_GetClocksFreq+0x148>)
 8001b4c:	601a      	str	r2, [r3, #0]
      break;
 8001b4e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <RCC_GetClocksFreq+0x144>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b58:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001b60:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <RCC_GetClocksFreq+0x150>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4413      	add	r3, r2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	40da      	lsrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <RCC_GetClocksFreq+0x144>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b80:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	0a9b      	lsrs	r3, r3, #10
 8001b86:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001b88:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <RCC_GetClocksFreq+0x150>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	40da      	lsrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <RCC_GetClocksFreq+0x144>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001ba8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	0b5b      	lsrs	r3, r3, #13
 8001bae:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <RCC_GetClocksFreq+0x150>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	40da      	lsrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3724      	adds	r7, #36	; 0x24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	007a1200 	.word	0x007a1200
 8001be0:	20000000 	.word	0x20000000

08001be4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d103      	bne.n	8001c10 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <RCC_GetFlagStatus+0x70>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e009      	b.n	8001c24 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d103      	bne.n	8001c1e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <RCC_GetFlagStatus+0x70>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e002      	b.n	8001c24 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <RCC_GetFlagStatus+0x70>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c22:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	74fb      	strb	r3, [r7, #19]
 8001c40:	e001      	b.n	8001c46 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001c46:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40023800 	.word	0x40023800

08001c58 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001c7a:	e007      	b.n	8001c8c <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	801a      	strh	r2, [r3, #0]
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	899b      	ldrh	r3, [r3, #12]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001cbe:	e009      	b.n	8001cd4 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	899b      	ldrh	r3, [r3, #12]
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	819a      	strh	r2, [r3, #12]
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	821a      	strh	r2, [r3, #16]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d16:	b29b      	uxth	r3, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e001      	b.n	8001d4e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	899b      	ldrh	r3, [r3, #12]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4013      	ands	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e011      	b.n	8001dce <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d107      	bne.n	8001dc0 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8a1b      	ldrh	r3, [r3, #16]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e006      	b.n	8001dce <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	8a9b      	ldrh	r3, [r3, #20]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <USART_GetITStatus+0xa4>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	74fb      	strb	r3, [r7, #19]
 8001dfe:	e001      	b.n	8001e04 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop

08001e14 <TM_DS18B20_Start>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "../Temp_sensor/tm_stm32f4_ds18b20.h"

uint8_t TM_DS18B20_Start(TM_OneWire_t* OneWire, uint8_t *ROM) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
	/* Check if device is DS18B20 */
	if (!TM_DS18B20_Is(ROM)) {
 8001e1e:	6838      	ldr	r0, [r7, #0]
 8001e20:	f000 f916 	bl	8002050 <TM_DS18B20_Is>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <TM_DS18B20_Start+0x1a>
		return 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e00b      	b.n	8001e46 <TM_DS18B20_Start+0x32>
	}
	
	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f978 	bl	8002124 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8001e34:	6839      	ldr	r1, [r7, #0]
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fb5c 	bl	80024f4 <TM_OneWire_SelectWithPointer>
	/* Start temperature conversion */
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8001e3c:	2144      	movs	r1, #68	; 0x44
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa2e 	bl	80022a0 <TM_OneWire_WriteByte>
	
	return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop

08001e50 <TM_DS18B20_Read>:
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
	/* Start conversion on all connected devices */
	TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
}

uint8_t TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t *ROM, float *destination) {
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b08b      	sub	sp, #44	; 0x2c
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!TM_DS18B20_Is(ROM)) {
 8001e66:	68b8      	ldr	r0, [r7, #8]
 8001e68:	f000 f8f2 	bl	8002050 <TM_DS18B20_Is>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <TM_DS18B20_Read+0x26>
		return 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e0e1      	b.n	800203a <TM_DS18B20_Read+0x1ea>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!TM_OneWire_ReadBit(OneWire)) {
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f9de 	bl	8002238 <TM_OneWire_ReadBit>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <TM_DS18B20_Read+0x36>
		/* Conversion is not finished yet */
		return 0; 
 8001e82:	2300      	movs	r3, #0
 8001e84:	e0d9      	b.n	800203a <TM_DS18B20_Read+0x1ea>
	}

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f94c 	bl	8002124 <TM_OneWire_Reset>
	/* Select ROM number */
	TM_OneWire_SelectWithPointer(OneWire, ROM);
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fb30 	bl	80024f4 <TM_OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001e94:	21be      	movs	r1, #190	; 0xbe
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 fa02 	bl	80022a0 <TM_OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	77fb      	strb	r3, [r7, #31]
 8001ea0:	e00d      	b.n	8001ebe <TM_DS18B20_Read+0x6e>
		/* Read byte by byte */
		data[i] = TM_OneWire_ReadByte(OneWire);
 8001ea2:	7ffc      	ldrb	r4, [r7, #31]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 fa19 	bl	80022dc <TM_OneWire_ReadByte>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb2:	4423      	add	r3, r4
 8001eb4:	f803 2c14 	strb.w	r2, [r3, #-20]
	TM_OneWire_SelectWithPointer(OneWire, ROM);
	/* Read scratchpad command by onewire protocol */
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
	
	/* Get data */
	for (i = 0; i < 9; i++) {
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	77fb      	strb	r3, [r7, #31]
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d9ee      	bls.n	8001ea2 <TM_DS18B20_Read+0x52>
		/* Read byte by byte */
		data[i] = TM_OneWire_ReadByte(OneWire);
	}
	
	/* Calculate CRC */
	crc = TM_OneWire_CRC8(data, 8);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2108      	movs	r1, #8
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fb4c 	bl	8002568 <TM_OneWire_CRC8>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8]) {
 8001ed4:	7f3b      	ldrb	r3, [r7, #28]
 8001ed6:	7fba      	ldrb	r2, [r7, #30]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <TM_DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e0ac      	b.n	800203a <TM_DS18B20_Read+0x1ea>
	}
	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8001ee0:	7d3b      	ldrb	r3, [r7, #20]
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	7d7b      	ldrb	r3, [r7, #21]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	4313      	orrs	r3, r2
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	TM_OneWire_Reset(OneWire);
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f917 	bl	8002124 <TM_OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000) {
 8001ef6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da05      	bge.n	8001f0a <TM_DS18B20_Read+0xba>
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8001efe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f00:	425b      	negs	r3, r3
 8001f02:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8001f0a:	7e3b      	ldrb	r3, [r7, #24]
 8001f0c:	115b      	asrs	r3, r3, #5
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	3309      	adds	r3, #9
 8001f18:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8001f1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8001f24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f32:	b25a      	sxtb	r2, r3
 8001f34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	
	/* Store decimal digits */
	switch (resolution) {
 8001f3e:	7f7b      	ldrb	r3, [r7, #29]
 8001f40:	3b09      	subs	r3, #9
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d858      	bhi.n	8001ff8 <TM_DS18B20_Read+0x1a8>
 8001f46:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <TM_DS18B20_Read+0xfc>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001f5d 	.word	0x08001f5d
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08001fad 	.word	0x08001fad
 8001f58:	08001fd5 	.word	0x08001fd5
		case 9: {
			decimal = (temperature >> 3) & 0x01;
 8001f5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f5e:	08db      	lsrs	r3, r3, #3
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8001f72:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7e:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8001f82:	e03e      	b.n	8002002 <TM_DS18B20_Read+0x1b2>
		case 10: {
			decimal = (temperature >> 2) & 0x03;
 8001f84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f96:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8001f9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f9e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8001faa:	e02a      	b.n	8002002 <TM_DS18B20_Read+0x1b2>
		case 11: {
			decimal = (temperature >> 1) & 0x07;
 8001fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbe:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8001fc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fc6:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fce:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8001fd2:	e016      	b.n	8002002 <TM_DS18B20_Read+0x1b2>
		case 12: {
			decimal = temperature & 0x0F;
 8001fd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe2:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8001fe6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fea:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002044 <TM_DS18B20_Read+0x1f4>
 8001fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff2:	edc7 7a08 	vstr	s15, [r7, #32]
		} break;
 8001ff6:	e004      	b.n	8002002 <TM_DS18B20_Read+0x1b2>
		default: {
			decimal = 0xFF;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <TM_DS18B20_Read+0x1f8>)
 8001ffa:	623b      	str	r3, [r7, #32]
			digit = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 8002002:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002016:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus) {
 800201a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <TM_DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002022:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800204c <TM_DS18B20_Read+0x1fc>
 8002026:	edd7 7a08 	vldr	s15, [r7, #32]
 800202a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202e:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	
	/* Set to pointer */
	*destination = decimal;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return 1;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	372c      	adds	r7, #44	; 0x2c
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop
 8002044:	3d800000 	.word	0x3d800000
 8002048:	437f0000 	.word	0x437f0000
 800204c:	00000000 	.word	0x00000000

08002050 <TM_DS18B20_Is>:
	TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
	
	return 1;
}

uint8_t TM_DS18B20_Is(uint8_t *ROM) {
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b28      	cmp	r3, #40	; 0x28
 800205e:	d101      	bne.n	8002064 <TM_DS18B20_Is+0x14>
		return 1;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <TM_DS18B20_Is+0x16>
	}
	return 0;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop

08002074 <TM_DS18B20_AllDone>:
uint8_t TM_DS18B20_AlarmSearch(TM_OneWire_t* OneWire) {
	/* Start alarm search */
	return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return TM_OneWire_ReadBit(OneWire);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8db 	bl	8002238 <TM_OneWire_ReadBit>
 8002082:	4603      	mov	r3, r0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <Delay>:
 * @param  Delays for specific amount of microseconds
 * @param  micros: Time in microseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delay(uint32_t micros) {
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	} while (--micros);
#else
	uint32_t amicros;

	/* Multiply micro seconds */
	amicros = (micros) * (mult);
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <Delay+0x4c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	60fb      	str	r3, [r7, #12]

	#ifdef __GNUC__
		if (SystemCoreClock == 180000000 || SystemCoreClock == 100000000) {
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <Delay+0x50>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <Delay+0x54>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <Delay+0x28>
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <Delay+0x50>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <Delay+0x58>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d104      	bne.n	80020be <Delay+0x32>
			amicros -= mult;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <Delay+0x4c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	60fb      	str	r3, [r7, #12]
	#if defined(STM32F411xE)
	amicros += mult;
	#endif

	/* While loop */
	while (amicros--);
 80020be:	bf00      	nop
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	60fa      	str	r2, [r7, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1fa      	bne.n	80020c0 <Delay+0x34>
#endif /* TM_DELAY_TIM */
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	200022a4 	.word	0x200022a4
 80020dc:	20000020 	.word	0x20000020
 80020e0:	0aba9500 	.word	0x0aba9500
 80020e4:	05f5e100 	.word	0x05f5e100

080020e8 <TM_OneWire_Init>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "../Temp_sensor/tm_stm32f4_onewire.h"

void TM_OneWire_Init(TM_OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
	/* Initialize delay if it was not already */
	TM_DELAY_Init();
 80020f6:	f000 ff4d 	bl	8002f94 <TM_DELAY_Init>

	/* Init GPIO pin */
	TM_GPIO_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
 80020fa:	88f9      	ldrh	r1, [r7, #6]
 80020fc:	2301      	movs	r3, #1
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2301      	movs	r3, #1
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2300      	movs	r3, #0
 8002106:	2201      	movs	r2, #1
 8002108:	68b8      	ldr	r0, [r7, #8]
 800210a:	f000 ff6d 	bl	8002fe8 <TM_GPIO_Init>
	
	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	88fa      	ldrh	r2, [r7, #6]
 8002118:	809a      	strh	r2, [r3, #4]
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop

08002124 <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t* OneWireStruct) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	8892      	ldrh	r2, [r2, #4]
 8002134:	835a      	strh	r2, [r3, #26]
	ONEWIRE_OUTPUT(OneWireStruct);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	889b      	ldrh	r3, [r3, #4]
 800213e:	4619      	mov	r1, r3
 8002140:	4610      	mov	r0, r2
 8002142:	f000 ff9d 	bl	8003080 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(480);
 8002146:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800214a:	f7ff ff9f 	bl	800208c <Delay>
	
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	889b      	ldrh	r3, [r3, #4]
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f000 ff69 	bl	8003030 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(70);
 800215e:	2046      	movs	r0, #70	; 0x46
 8002160:	f7ff ff94 	bl	800208c <Delay>
	
	/* Check bit value */
	i = TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	8892      	ldrh	r2, [r2, #4]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 800217c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002180:	f7ff ff84 	bl	800208c <Delay>
	
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop

08002190 <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t* OneWireStruct, uint8_t bit) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
	if (bit) {
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d023      	beq.n	80021ea <TM_OneWire_WriteBit+0x5a>
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	8892      	ldrh	r2, [r2, #4]
 80021aa:	835a      	strh	r2, [r3, #26]
		ONEWIRE_OUTPUT(OneWireStruct);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	889b      	ldrh	r3, [r3, #4]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 ff62 	bl	8003080 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(10);
 80021bc:	200a      	movs	r0, #10
 80021be:	f7ff ff65 	bl	800208c <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	889b      	ldrh	r3, [r3, #4]
 80021ca:	4619      	mov	r1, r3
 80021cc:	4610      	mov	r0, r2
 80021ce:	f000 ff2f 	bl	8003030 <TM_GPIO_SetPinAsInput>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 80021d2:	2037      	movs	r0, #55	; 0x37
 80021d4:	f7ff ff5a 	bl	800208c <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	889b      	ldrh	r3, [r3, #4]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f000 ff24 	bl	8003030 <TM_GPIO_SetPinAsInput>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 80021e8:	e022      	b.n	8002230 <TM_OneWire_WriteBit+0xa0>
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
		ONEWIRE_INPUT(OneWireStruct);
	} else {
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	8892      	ldrh	r2, [r2, #4]
 80021f2:	835a      	strh	r2, [r3, #26]
		ONEWIRE_OUTPUT(OneWireStruct);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	889b      	ldrh	r3, [r3, #4]
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f000 ff3e 	bl	8003080 <TM_GPIO_SetPinAsOutput>
		ONEWIRE_DELAY(65);
 8002204:	2041      	movs	r0, #65	; 0x41
 8002206:	f7ff ff41 	bl	800208c <Delay>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	889b      	ldrh	r3, [r3, #4]
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f000 ff0b 	bl	8003030 <TM_GPIO_SetPinAsInput>
		
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
 800221a:	2005      	movs	r0, #5
 800221c:	f7ff ff36 	bl	800208c <Delay>
		ONEWIRE_INPUT(OneWireStruct);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	889b      	ldrh	r3, [r3, #4]
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f000 ff00 	bl	8003030 <TM_GPIO_SetPinAsInput>
	}

}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t* OneWireStruct) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	8892      	ldrh	r2, [r2, #4]
 800224c:	835a      	strh	r2, [r3, #26]
	ONEWIRE_OUTPUT(OneWireStruct);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	889b      	ldrh	r3, [r3, #4]
 8002256:	4619      	mov	r1, r3
 8002258:	4610      	mov	r0, r2
 800225a:	f000 ff11 	bl	8003080 <TM_GPIO_SetPinAsOutput>
	ONEWIRE_DELAY(3);
 800225e:	2003      	movs	r0, #3
 8002260:	f7ff ff14 	bl	800208c <Delay>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	4619      	mov	r1, r3
 800226e:	4610      	mov	r0, r2
 8002270:	f000 fede 	bl	8003030 <TM_GPIO_SetPinAsInput>
	ONEWIRE_DELAY(10);
 8002274:	200a      	movs	r0, #10
 8002276:	f7ff ff09 	bl	800208c <Delay>
	
	/* Read line value */
	if (TM_GPIO_GetInputPinValue(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	8892      	ldrh	r2, [r2, #4]
 8002284:	4013      	ands	r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <TM_OneWire_ReadBit+0x56>
		/* Bit is HIGH */
		bit = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 800228e:	2032      	movs	r0, #50	; 0x32
 8002290:	f7ff fefc 	bl	800208c <Delay>
	
	/* Return bit value */
	return bit;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop

080022a0 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80022ac:	2308      	movs	r3, #8
 80022ae:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80022b0:	e00a      	b.n	80022c8 <TM_OneWire_WriteByte+0x28>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff67 	bl	8002190 <TM_OneWire_WriteBit>
		byte >>= 1;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	70fb      	strb	r3, [r7, #3]
}

void TM_OneWire_WriteByte(TM_OneWire_t* OneWireStruct, uint8_t byte) {
	uint8_t i = 8;
	/* Write 8 bits */
	while (i--) {
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	1e5a      	subs	r2, r3, #1
 80022cc:	73fa      	strb	r2, [r7, #15]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ef      	bne.n	80022b2 <TM_OneWire_WriteByte+0x12>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
		byte >>= 1;
	}
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop

080022dc <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80022e4:	2308      	movs	r3, #8
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	2300      	movs	r3, #0
 80022ea:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80022ec:	e00d      	b.n	800230a <TM_OneWire_ReadByte+0x2e>
		byte >>= 1;
 80022ee:	7bbb      	ldrb	r3, [r7, #14]
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	73bb      	strb	r3, [r7, #14]
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff9f 	bl	8002238 <TM_OneWire_ReadBit>
 80022fa:	4603      	mov	r3, r0
 80022fc:	01db      	lsls	r3, r3, #7
 80022fe:	b25a      	sxtb	r2, r3
 8002300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002304:	4313      	orrs	r3, r2
 8002306:	b25b      	sxtb	r3, r3
 8002308:	73bb      	strb	r3, [r7, #14]
	}
}

uint8_t TM_OneWire_ReadByte(TM_OneWire_t* OneWireStruct) {
	uint8_t i = 8, byte = 0;
	while (i--) {
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	1e5a      	subs	r2, r3, #1
 800230e:	73fa      	strb	r2, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ec      	bne.n	80022ee <TM_OneWire_ReadByte+0x12>
		byte >>= 1;
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
	}
	
	return byte;
 8002314:	7bbb      	ldrb	r3, [r7, #14]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop

08002320 <TM_OneWire_First>:

uint8_t TM_OneWire_First(TM_OneWire_t* OneWireStruct) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	TM_OneWire_ResetSearch(OneWireStruct);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f809 	bl	8002340 <TM_OneWire_ResetSearch>

	/* Start with searching */
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 800232e:	21f0      	movs	r1, #240	; 0xf0
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f819 	bl	8002368 <TM_OneWire_Search>
 8002336:	4603      	mov	r3, r0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <TM_OneWire_ResetSearch>:
uint8_t TM_OneWire_Next(TM_OneWire_t* OneWireStruct) {
   /* Leave the search state alone */
   return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
}

void TM_OneWire_ResetSearch(TM_OneWire_t* OneWireStruct) {
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	71da      	strb	r2, [r3, #7]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop

08002368 <TM_OneWire_Search>:

uint8_t TM_OneWire_Search(TM_OneWire_t* OneWireStruct, uint8_t command) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8002380:	2301      	movs	r3, #1
 8002382:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag) {
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7a1b      	ldrb	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 809a 	bne.w	80024c6 <TM_OneWire_Search+0x15e>
		// 1-Wire reset
		if (TM_OneWire_Reset(OneWireStruct)) {
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fec6 	bl	8002124 <TM_OneWire_Reset>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <TM_OneWire_Search+0x4c>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	71da      	strb	r2, [r3, #7]
			return 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e09b      	b.n	80024ec <TM_OneWire_Search+0x184>
		}

		// issue the search command 
		TM_OneWire_WriteByte(OneWireStruct, command);  
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff71 	bl	80022a0 <TM_OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ff3a 	bl	8002238 <TM_OneWire_ReadBit>
 80023c4:	4603      	mov	r3, r0
 80023c6:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff35 	bl	8002238 <TM_OneWire_ReadBit>
 80023ce:	4603      	mov	r3, r0
 80023d0:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80023d2:	7a7b      	ldrb	r3, [r7, #9]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <TM_OneWire_Search+0x76>
 80023d8:	7a3b      	ldrb	r3, [r7, #8]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d064      	beq.n	80024a8 <TM_OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80023de:	7a7a      	ldrb	r2, [r7, #9]
 80023e0:	7a3b      	ldrb	r3, [r7, #8]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d002      	beq.n	80023ec <TM_OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80023e6:	7a7b      	ldrb	r3, [r7, #9]
 80023e8:	72bb      	strb	r3, [r7, #10]
 80023ea:	e026      	b.n	800243a <TM_OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	799b      	ldrb	r3, [r3, #6]
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d20d      	bcs.n	8002412 <TM_OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80023f6:	7b7b      	ldrb	r3, [r7, #13]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	7a5a      	ldrb	r2, [r3, #9]
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	4013      	ands	r3, r2
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	72bb      	strb	r3, [r7, #10]
 8002410:	e008      	b.n	8002424 <TM_OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	799b      	ldrb	r3, [r3, #6]
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	429a      	cmp	r2, r3
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	72bb      	strb	r3, [r7, #10]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8002424:	7abb      	ldrb	r3, [r7, #10]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <TM_OneWire_Search+0xd2>
						last_zero = id_bit_number;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 800242e:	7bbb      	ldrb	r3, [r7, #14]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d802      	bhi.n	800243a <TM_OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7bba      	ldrb	r2, [r7, #14]
 8002438:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800243a:	7abb      	ldrb	r3, [r7, #10]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d10c      	bne.n	800245a <TM_OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8002440:	7b7b      	ldrb	r3, [r7, #13]
 8002442:	7b7a      	ldrb	r2, [r7, #13]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	440a      	add	r2, r1
 8002448:	7a51      	ldrb	r1, [r2, #9]
 800244a:	7afa      	ldrb	r2, [r7, #11]
 800244c:	430a      	orrs	r2, r1
 800244e:	b2d1      	uxtb	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	460a      	mov	r2, r1
 8002456:	725a      	strb	r2, [r3, #9]
 8002458:	e010      	b.n	800247c <TM_OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800245a:	7b7b      	ldrb	r3, [r7, #13]
 800245c:	7b7a      	ldrb	r2, [r7, #13]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	440a      	add	r2, r1
 8002462:	7a52      	ldrb	r2, [r2, #9]
 8002464:	b251      	sxtb	r1, r2
 8002466:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800246a:	43d2      	mvns	r2, r2
 800246c:	b252      	sxtb	r2, r2
 800246e:	400a      	ands	r2, r1
 8002470:	b252      	sxtb	r2, r2
 8002472:	b2d1      	uxtb	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	460a      	mov	r2, r1
 800247a:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 800247c:	7abb      	ldrb	r3, [r7, #10]
 800247e:	4619      	mov	r1, r3
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fe85 	bl	8002190 <TM_OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8002492:	7afb      	ldrb	r3, [r7, #11]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d104      	bne.n	80024a2 <TM_OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8002498:	7b7b      	ldrb	r3, [r7, #13]
 800249a:	3301      	adds	r3, #1
 800249c:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80024a2:	7b7b      	ldrb	r3, [r7, #13]
 80024a4:	2b07      	cmp	r3, #7
 80024a6:	d98a      	bls.n	80023be <TM_OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d90b      	bls.n	80024c6 <TM_OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7bba      	ldrb	r2, [r7, #14]
 80024b2:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	799b      	ldrb	r3, [r3, #6]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <TM_OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80024c6:	7b3b      	ldrb	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <TM_OneWire_Search+0x16c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7a5b      	ldrb	r3, [r3, #9]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <TM_OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80024ea:	7b3b      	ldrb	r3, [r7, #12]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80024fe:	2155      	movs	r1, #85	; 0x55
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fecd 	bl	80022a0 <TM_OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e00a      	b.n	8002522 <TM_OneWire_SelectWithPointer+0x2e>
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	4413      	add	r3, r2
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fec2 	bl	80022a0 <TM_OneWire_WriteByte>

void TM_OneWire_SelectWithPointer(TM_OneWire_t* OneWireStruct, uint8_t *ROM) {
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
	
	for (i = 0; i < 8; i++) {
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	3301      	adds	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b07      	cmp	r3, #7
 8002526:	d9f1      	bls.n	800250c <TM_OneWire_SelectWithPointer+0x18>
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
	}	
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e00a      	b.n	8002556 <TM_OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	4413      	add	r3, r2
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	440a      	add	r2, r1
 800254c:	7a52      	ldrb	r2, [r2, #9]
 800254e:	701a      	strb	r2, [r3, #0]
	}	
}

void TM_OneWire_GetFullROM(TM_OneWire_t* OneWireStruct, uint8_t *firstIndex) {
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	3301      	adds	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b07      	cmp	r3, #7
 800255a:	d9f1      	bls.n	8002540 <TM_OneWire_GetFullROM+0x10>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
	}
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 8002578:	e022      	b.n	80025c0 <TM_OneWire_CRC8+0x58>
		inbyte = *addr++;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8002584:	2308      	movs	r3, #8
 8002586:	737b      	strb	r3, [r7, #13]
 8002588:	e017      	b.n	80025ba <TM_OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	7bbb      	ldrb	r3, [r7, #14]
 800258e:	4053      	eors	r3, r2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 800259e:	7b3b      	ldrb	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <TM_OneWire_CRC8+0x46>
				crc ^= 0x8C;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80025aa:	43db      	mvns	r3, r3
 80025ac:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 80025ae:	7bbb      	ldrb	r3, [r7, #14]
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	73bb      	strb	r3, [r7, #14]
uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
	uint8_t crc = 0, inbyte, i, mix;
	
	while (len--) {
		inbyte = *addr++;
		for (i = 8; i; i--) {
 80025b4:	7b7b      	ldrb	r3, [r7, #13]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	737b      	strb	r3, [r7, #13]
 80025ba:	7b7b      	ldrb	r3, [r7, #13]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e4      	bne.n	800258a <TM_OneWire_CRC8+0x22>
}

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
	uint8_t crc = 0, inbyte, i, mix;
	
	while (len--) {
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	1e5a      	subs	r2, r3, #1
 80025c4:	70fa      	strb	r2, [r7, #3]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1d7      	bne.n	800257a <TM_OneWire_CRC8+0x12>
			inbyte >>= 1;
		}
	}
	
	/* Return calculated CRC */
	return crc;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <STM_EVAL_LEDOn+0x28>)
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	79fa      	ldrb	r2, [r7, #7]
 80025ec:	4905      	ldr	r1, [pc, #20]	; (8002604 <STM_EVAL_LEDOn+0x2c>)
 80025ee:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80025f2:	831a      	strh	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	20000010 	.word	0x20000010
 8002604:	080075a4 	.word	0x080075a4

08002608 <TIM2_IRQHandler>:
	Delay_Timer->ARR = arr_value;
	TIM_Cmd(Delay_Timer, ENABLE);
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,ENABLE);
}
void Delay_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	//set timeout flag
	timeout = 1;
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <TIM2_IRQHandler+0x1c>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]
	//disable timer
	TIM_ClearITPendingBit(Delay_Timer, TIM_IT_Update);
 8002612:	2101      	movs	r1, #1
 8002614:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002618:	f7ff fb62 	bl	8001ce0 <TIM_ClearITPendingBit>
	Delay_Disable();
 800261c:	f000 f804 	bl	8002628 <Delay_Disable>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20001668 	.word	0x20001668

08002628 <Delay_Disable>:

void Delay_Disable(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	//turn off timer
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,DISABLE);
 800262c:	2200      	movs	r2, #0
 800262e:	2101      	movs	r1, #1
 8002630:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002634:	f7ff fb30 	bl	8001c98 <TIM_ITConfig>
	TIM_Cmd(Delay_Timer, DISABLE);
 8002638:	2100      	movs	r1, #0
 800263a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800263e:	f7ff fb0b 	bl	8001c58 <TIM_Cmd>
	//clear counter
	assert_param(IS_TIM_ALL_PERIPH(Delay_Timer));
	Delay_Timer->CNT = 0;
 8002642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop

08002650 <init_Rx_Buff>:
	 GPIO_Init(Iridium_GPIO, &GPIO_InitStructure);

}

void init_Rx_Buff(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
	Iridium_data_length = 0;
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <init_Rx_Buff+0x38>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Iridium_RX_Buffsize; ++i)
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	e007      	b.n	8002672 <init_Rx_Buff+0x22>
	{
		Iridium_Rx_Buff[i] = 0;
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <init_Rx_Buff+0x3c>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
}

void init_Rx_Buff(void)
{
	Iridium_data_length = 0;
	for (int i = 0; i < Iridium_RX_Buffsize; ++i)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3301      	adds	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002678:	dbf3      	blt.n	8002662 <init_Rx_Buff+0x12>
	{
		Iridium_Rx_Buff[i] = 0;
	}
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20002240 	.word	0x20002240
 800268c:	20001e54 	.word	0x20001e54

08002690 <get_status>:
	}
	return 0;
}

void get_status(char* cmd)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	77fb      	strb	r3, [r7, #31]

	for(int j = 0; j < 6; j++)
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	e05d      	b.n	800275e <get_status+0xce>
	{
		uint8_t numcount =0 ;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
		uint len = strlen(cmd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fd fd98 	bl	80001dc <strlen>
 80026ac:	60f8      	str	r0, [r7, #12]
		while(cmd[count] != ',')
 80026ae:	e015      	b.n	80026dc <get_status+0x4c>
		{
			if((count) == len)
 80026b0:	7ffa      	ldrb	r2, [r7, #31]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d018      	beq.n	80026ea <get_status+0x5a>
			{
				break;
			}
			if(cmd[count] >= '0' && cmd[count] <= '9')
 80026b8:	7ffb      	ldrb	r3, [r7, #31]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b2f      	cmp	r3, #47	; 0x2f
 80026c2:	d908      	bls.n	80026d6 <get_status+0x46>
 80026c4:	7ffb      	ldrb	r3, [r7, #31]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b39      	cmp	r3, #57	; 0x39
 80026ce:	d802      	bhi.n	80026d6 <get_status+0x46>
			{
				numcount++;
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	3301      	adds	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
			}

			count++;
 80026d6:	7ffb      	ldrb	r3, [r7, #31]
 80026d8:	3301      	adds	r3, #1
 80026da:	77fb      	strb	r3, [r7, #31]

	for(int j = 0; j < 6; j++)
	{
		uint8_t numcount =0 ;
		uint len = strlen(cmd);
		while(cmd[count] != ',')
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b2c      	cmp	r3, #44	; 0x2c
 80026e6:	d1e3      	bne.n	80026b0 <get_status+0x20>
 80026e8:	e000      	b.n	80026ec <get_status+0x5c>
		{
			if((count) == len)
			{
				break;
 80026ea:	bf00      	nop
			}

			count++;
		}
		//combine numbers
		int16_t temp = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	82bb      	strh	r3, [r7, #20]

		for (int i = 0; i < numcount; ++i)
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	e024      	b.n	8002740 <get_status+0xb0>
		{
			temp = temp*10+ (cmd[count -numcount+i ]-48);
 80026f6:	8abb      	ldrh	r3, [r7, #20]
 80026f8:	461a      	mov	r2, r3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	7ff9      	ldrb	r1, [r7, #31]
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	1ac9      	subs	r1, r1, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	440b      	add	r3, r1
 800270c:	4619      	mov	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	440b      	add	r3, r1
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	4413      	add	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b30      	subs	r3, #48	; 0x30
 800271c:	b29b      	uxth	r3, r3
 800271e:	82bb      	strh	r3, [r7, #20]
			if (cmd[count-numcount -1] == '-')
 8002720:	7ffa      	ldrb	r2, [r7, #31]
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b2d      	cmp	r3, #45	; 0x2d
 8002730:	d103      	bne.n	800273a <get_status+0xaa>
			{
				temp = temp*(-1);
 8002732:	8abb      	ldrh	r3, [r7, #20]
 8002734:	425b      	negs	r3, r3
 8002736:	b29b      	uxth	r3, r3
 8002738:	82bb      	strh	r3, [r7, #20]
			count++;
		}
		//combine numbers
		int16_t temp = 0;

		for (int i = 0; i < numcount; ++i)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	3301      	adds	r3, #1
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	7dfa      	ldrb	r2, [r7, #23]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	dcd6      	bgt.n	80026f6 <get_status+0x66>
			if (cmd[count-numcount -1] == '-')
			{
				temp = temp*(-1);
			}
		}
		SBDIX_status[j] = temp;
 8002748:	4908      	ldr	r1, [pc, #32]	; (800276c <get_status+0xdc>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	8aba      	ldrh	r2, [r7, #20]
 800274e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		count++;
 8002752:	7ffb      	ldrb	r3, [r7, #31]
 8002754:	3301      	adds	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]

void get_status(char* cmd)
{
	uint8_t count = 0;

	for(int j = 0; j < 6; j++)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	3301      	adds	r3, #1
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b05      	cmp	r3, #5
 8002762:	dd9e      	ble.n	80026a2 <get_status+0x12>
			}
		}
		SBDIX_status[j] = temp;
		count++;
	}
}
 8002764:	bf00      	nop
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20001674 	.word	0x20001674

08002770 <clear_Status>:

void clear_Status(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; ++i)
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	e007      	b.n	800278c <clear_Status+0x1c>
	{
		SBDIX_status[i] = 0;
 800277c:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <clear_Status+0x30>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2100      	movs	r1, #0
 8002782:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
}

void clear_Status(void)
{
	for (int i = 0; i < 6; ++i)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3301      	adds	r3, #1
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b05      	cmp	r3, #5
 8002790:	ddf4      	ble.n	800277c <clear_Status+0xc>
	{
		SBDIX_status[i] = 0;
	}
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20001674 	.word	0x20001674

080027a4 <get_AT_response>:
/*
 * Retrieve the Iridium response only from Rx buffer
 */
char* get_AT_response(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
	//clear flag
	char* tmp = (char*)Iridium_Rx_Buff;
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <get_AT_response+0x98>)
 80027ac:	607b      	str	r3, [r7, #4]
	if(status_Received== 1)
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <get_AT_response+0x9c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10c      	bne.n	80027d0 <get_AT_response+0x2c>
	{
		//get transmission status
		tmp+=2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3302      	adds	r3, #2
 80027ba:	607b      	str	r3, [r7, #4]
		bin_message_received = *tmp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <get_AT_response+0xa0>)
 80027c2:	701a      	strb	r2, [r3, #0]
		status_Received = 0;
 80027c4:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <get_AT_response+0x9c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
		tmp+=2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3302      	adds	r3, #2
 80027ce:	607b      	str	r3, [r7, #4]
	}
	tmp = strtok((char*)Iridium_Rx_Buff,"\r\n");
 80027d0:	491d      	ldr	r1, [pc, #116]	; (8002848 <get_AT_response+0xa4>)
 80027d2:	481a      	ldr	r0, [pc, #104]	; (800283c <get_AT_response+0x98>)
 80027d4:	f002 f91c 	bl	8004a10 <strtok>
 80027d8:	6078      	str	r0, [r7, #4]
	if(strlen(tmp) == 0)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <get_AT_response+0x42>
	{
		return NULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e026      	b.n	8002834 <get_AT_response+0x90>
	}
	if(session_flag == 1)
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <get_AT_response+0xa8>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d10f      	bne.n	800280e <get_AT_response+0x6a>
	{
		//SBD session: update status buffer
		clear_Status();
 80027ee:	f7ff ffbf 	bl	8002770 <clear_Status>
		char* msg = strtok(NULL,"\r\n");
 80027f2:	4915      	ldr	r1, [pc, #84]	; (8002848 <get_AT_response+0xa4>)
 80027f4:	2000      	movs	r0, #0
 80027f6:	f002 f90b 	bl	8004a10 <strtok>
 80027fa:	6038      	str	r0, [r7, #0]
		get_status(tmp);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff47 	bl	8002690 <get_status>
		tmp = msg;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	607b      	str	r3, [r7, #4]
		session_flag = 0;
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <get_AT_response+0xa8>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e004      	b.n	8002818 <get_AT_response+0x74>
	}else
	{
		tmp = strtok(NULL,"\r\n");
 800280e:	490e      	ldr	r1, [pc, #56]	; (8002848 <get_AT_response+0xa4>)
 8002810:	2000      	movs	r0, #0
 8002812:	f002 f8fd 	bl	8004a10 <strtok>
 8002816:	6078      	str	r0, [r7, #4]
	}
	init_message_buff();
 8002818:	f000 f81c 	bl	8002854 <init_message_buff>
	memcpy(temp_buff,tmp,strlen(tmp));
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fd fcdd 	bl	80001dc <strlen>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4809      	ldr	r0, [pc, #36]	; (8002850 <get_AT_response+0xac>)
 800282a:	f001 f859 	bl	80038e0 <memcpy>
	init_Rx_Buff();
 800282e:	f7ff ff0f 	bl	8002650 <init_Rx_Buff>
	return temp_buff;
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <get_AT_response+0xac>)
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20001e54 	.word	0x20001e54
 8002840:	20001a68 	.word	0x20001a68
 8002844:	20001a6a 	.word	0x20001a6a
 8002848:	0800756c 	.word	0x0800756c
 800284c:	2000223c 	.word	0x2000223c
 8002850:	20001680 	.word	0x20001680

08002854 <init_message_buff>:

void init_message_buff()
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
	for (int i = 0; i < Iridium_message_Buffsize; ++i)
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	e00c      	b.n	800287a <init_message_buff+0x26>
	{
		message_buff[i] = 0;
 8002860:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <init_message_buff+0x3c>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
		temp_buff[i] =0;
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <init_message_buff+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
	return temp_buff;
}

void init_message_buff()
{
	for (int i = 0; i < Iridium_message_Buffsize; ++i)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3301      	adds	r3, #1
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002880:	dbee      	blt.n	8002860 <init_message_buff+0xc>
	{
		message_buff[i] = 0;
		temp_buff[i] =0;
	}
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20001a6c 	.word	0x20001a6c
 8002894:	20001680 	.word	0x20001680

08002898 <USART3_IRQHandler>:
}

//==========================================================================
/** IRQ HANDLERS **/
void Iridium_USART_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
	//TODO: USART pin handler
	if (USART_GetFlagStatus(Iridium_USART,USART_FLAG_IDLE) != RESET)
 800289e:	2110      	movs	r1, #16
 80028a0:	4810      	ldr	r0, [pc, #64]	; (80028e4 <USART3_IRQHandler+0x4c>)
 80028a2:	f7ff fa3f 	bl	8001d24 <USART_GetFlagStatus>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d017      	beq.n	80028dc <USART3_IRQHandler+0x44>
	{
		/* Clear USART registers */
		volatile uint32_t tmp;
		tmp = USART_GetITStatus(Iridium_USART, USART_IT_IDLE);
 80028ac:	f240 4124 	movw	r1, #1060	; 0x424
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <USART3_IRQHandler+0x4c>)
 80028b2:	f7ff fa53 	bl	8001d5c <USART_GetITStatus>
 80028b6:	4603      	mov	r3, r0
 80028b8:	607b      	str	r3, [r7, #4]
		tmp = USART_ReceiveData(Iridium_USART);
 80028ba:	480a      	ldr	r0, [pc, #40]	; (80028e4 <USART3_IRQHandler+0x4c>)
 80028bc:	f7ff fa22 	bl	8001d04 <USART_ReceiveData>
 80028c0:	4603      	mov	r3, r0
 80028c2:	607b      	str	r3, [r7, #4]
		(void)tmp;
 80028c4:	687b      	ldr	r3, [r7, #4]
		/* Disable DMA RX Stream */
		DMA_Cmd(Iridium_DMA_RX_Stream, DISABLE);
 80028c6:	2100      	movs	r1, #0
 80028c8:	4807      	ldr	r0, [pc, #28]	; (80028e8 <USART3_IRQHandler+0x50>)
 80028ca:	f7fe fecb 	bl	8001664 <DMA_Cmd>
		while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != DISABLE) { ; }
 80028ce:	bf00      	nop
 80028d0:	4805      	ldr	r0, [pc, #20]	; (80028e8 <USART3_IRQHandler+0x50>)
 80028d2:	f7fe fef1 	bl	80016b8 <DMA_GetCmdStatus>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f9      	bne.n	80028d0 <USART3_IRQHandler+0x38>
	}
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40004800 	.word	0x40004800
 80028e8:	40026028 	.word	0x40026028

080028ec <DMA1_Stream1_IRQHandler>:

#ifdef IRIDIUM_Periph_Use_DMA
void DMA_USART_RX_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	/* Test on DMA Stream Transfer Complete interrupt */
		if (DMA_GetFlagStatus(Iridium_DMA_RX_Stream, DMA_FLAG_TCIF1) != RESET)
 80028f0:	4910      	ldr	r1, [pc, #64]	; (8002934 <DMA1_Stream1_IRQHandler+0x48>)
 80028f2:	4811      	ldr	r0, [pc, #68]	; (8002938 <DMA1_Stream1_IRQHandler+0x4c>)
 80028f4:	f7fe fef8 	bl	80016e8 <DMA_GetFlagStatus>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d017      	beq.n	800292e <DMA1_Stream1_IRQHandler+0x42>
		{
			Iridium_data_length = Iridium_RX_Buffsize - DMA_GetCurrDataCounter(Iridium_DMA_RX_Stream);
 80028fe:	480e      	ldr	r0, [pc, #56]	; (8002938 <DMA1_Stream1_IRQHandler+0x4c>)
 8002900:	f7fe fecc 	bl	800169c <DMA_GetCurrDataCounter>
 8002904:	4603      	mov	r3, r0
 8002906:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800290a:	461a      	mov	r2, r3
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <DMA1_Stream1_IRQHandler+0x50>)
 800290e:	601a      	str	r2, [r3, #0]

			/* Clear DMA Stream Transfer Complete interrupt pending bit */
			DMA_ClearITPendingBit(Iridium_DMA_RX_Stream, DMA_IT_TCIF1);
 8002910:	490b      	ldr	r1, [pc, #44]	; (8002940 <DMA1_Stream1_IRQHandler+0x54>)
 8002912:	4809      	ldr	r0, [pc, #36]	; (8002938 <DMA1_Stream1_IRQHandler+0x4c>)
 8002914:	f7fe ff24 	bl	8001760 <DMA_ClearITPendingBit>

			/* Enable DMA transfer */
			#ifdef IRIDIUM_MEM_Use_DMA
			DMA_Cmd(Iridium_DMA_MEM_Stream, ENABLE);
 8002918:	2101      	movs	r1, #1
 800291a:	480a      	ldr	r0, [pc, #40]	; (8002944 <DMA1_Stream1_IRQHandler+0x58>)
 800291c:	f7fe fea2 	bl	8001664 <DMA_Cmd>
			while (DMA_GetCmdStatus(Iridium_DMA_MEM_Stream ) != ENABLE) { ; }
 8002920:	bf00      	nop
 8002922:	4808      	ldr	r0, [pc, #32]	; (8002944 <DMA1_Stream1_IRQHandler+0x58>)
 8002924:	f7fe fec8 	bl	80016b8 <DMA_GetCmdStatus>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d1f9      	bne.n	8002922 <DMA1_Stream1_IRQHandler+0x36>
			#else
			DMA_Cmd(Iridium_DMA_RX_Stream, ENABLE);
			while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != ENABLE) { ; }
			#endif
		}
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	10000800 	.word	0x10000800
 8002938:	40026028 	.word	0x40026028
 800293c:	20002240 	.word	0x20002240
 8002940:	10008800 	.word	0x10008800
 8002944:	40026428 	.word	0x40026428

08002948 <DMA2_Stream1_IRQHandler>:
#endif

#ifdef IRIDIUM_MEM_Use_DMA
void DMA_USART_MEM_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(Iridium_DMA_MEM_Stream, DMA_FLAG_TCIF1) != RESET)
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <DMA2_Stream1_IRQHandler+0x60>)
 800294e:	4817      	ldr	r0, [pc, #92]	; (80029ac <DMA2_Stream1_IRQHandler+0x64>)
 8002950:	f7fe feca 	bl	80016e8 <DMA_GetFlagStatus>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d023      	beq.n	80029a2 <DMA2_Stream1_IRQHandler+0x5a>
		{

			//set flag

			if(session_flag)
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <DMA2_Stream1_IRQHandler+0x68>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <DMA2_Stream1_IRQHandler+0x32>
			{
				if(strlen((char*)Iridium_Rx_Buff)> 9)
 8002962:	4814      	ldr	r0, [pc, #80]	; (80029b4 <DMA2_Stream1_IRQHandler+0x6c>)
 8002964:	f7fd fc3a 	bl	80001dc <strlen>
 8002968:	4603      	mov	r3, r0
 800296a:	2b09      	cmp	r3, #9
 800296c:	d90a      	bls.n	8002984 <DMA2_Stream1_IRQHandler+0x3c>
				{
					IR_Rx_done = 1;
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <DMA2_Stream1_IRQHandler+0x70>)
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
					//Get Message
					get_AT_response();
 8002974:	f7ff ff16 	bl	80027a4 <get_AT_response>
 8002978:	e004      	b.n	8002984 <DMA2_Stream1_IRQHandler+0x3c>
				}
			}else
			{
				IR_Rx_done = 1;
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <DMA2_Stream1_IRQHandler+0x70>)
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
				//Get Message
				get_AT_response();
 8002980:	f7ff ff10 	bl	80027a4 <get_AT_response>
			}
			/* Enable DMA transfer */
			DMA_Cmd(Iridium_DMA_RX_Stream, ENABLE);
 8002984:	2101      	movs	r1, #1
 8002986:	480d      	ldr	r0, [pc, #52]	; (80029bc <DMA2_Stream1_IRQHandler+0x74>)
 8002988:	f7fe fe6c 	bl	8001664 <DMA_Cmd>
			while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != ENABLE) { ; }
 800298c:	bf00      	nop
 800298e:	480b      	ldr	r0, [pc, #44]	; (80029bc <DMA2_Stream1_IRQHandler+0x74>)
 8002990:	f7fe fe92 	bl	80016b8 <DMA_GetCmdStatus>
 8002994:	4603      	mov	r3, r0
 8002996:	2b01      	cmp	r3, #1
 8002998:	d1f9      	bne.n	800298e <DMA2_Stream1_IRQHandler+0x46>
			/* Clear DMA Stream Transfer Complete interrupt pending bit */
			DMA_ClearITPendingBit(Iridium_DMA_MEM_Stream, DMA_IT_TCIF1);
 800299a:	4909      	ldr	r1, [pc, #36]	; (80029c0 <DMA2_Stream1_IRQHandler+0x78>)
 800299c:	4803      	ldr	r0, [pc, #12]	; (80029ac <DMA2_Stream1_IRQHandler+0x64>)
 800299e:	f7fe fedf 	bl	8001760 <DMA_ClearITPendingBit>
		}
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	10000800 	.word	0x10000800
 80029ac:	40026428 	.word	0x40026428
 80029b0:	2000223c 	.word	0x2000223c
 80029b4:	20001e54 	.word	0x20001e54
 80029b8:	20001a69 	.word	0x20001a69
 80029bc:	40026028 	.word	0x40026028
 80029c0:	10008800 	.word	0x10008800

080029c4 <EXTI0_IRQHandler>:
#endif

void EXTI0_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 80029c8:	2001      	movs	r0, #1
 80029ca:	f7fe fef7 	bl	80017bc <EXTI_GetITStatus>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d019      	beq.n	8002a08 <EXTI0_IRQHandler+0x44>
	{
		if(GPIO_ReadInputDataBit(Iridium_GPIO,Iridium_NetAv_Pin) == SET)
 80029d4:	2101      	movs	r1, #1
 80029d6:	480d      	ldr	r0, [pc, #52]	; (8002a0c <EXTI0_IRQHandler+0x48>)
 80029d8:	f7fe ff34 	bl	8001844 <GPIO_ReadInputDataBit>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <EXTI0_IRQHandler+0x2a>
		{
			network_available = 1;
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <EXTI0_IRQHandler+0x4c>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
			STM_EVAL_LEDOn(LED5);
 80029e8:	2002      	movs	r0, #2
 80029ea:	f7ff fdf5 	bl	80025d8 <STM_EVAL_LEDOn>

		}
		if(GPIO_ReadInputDataBit(Iridium_GPIO,Iridium_NetAv_Pin) == RESET)
 80029ee:	2101      	movs	r1, #1
 80029f0:	4806      	ldr	r0, [pc, #24]	; (8002a0c <EXTI0_IRQHandler+0x48>)
 80029f2:	f7fe ff27 	bl	8001844 <GPIO_ReadInputDataBit>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <EXTI0_IRQHandler+0x3e>
		{
			network_available = 0;
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <EXTI0_IRQHandler+0x4c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
		}
		EXTI_ClearITPendingBit(EXTI_Line0);
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7fe fefe 	bl	8001804 <EXTI_ClearITPendingBit>
	}
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	20001a6b 	.word	0x20001a6b

08002a14 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	init_RCC_Clock();
 8002a18:	f000 f832 	bl	8002a80 <init_RCC_Clock>
	TM_DELAY_Init();
 8002a1c:	f000 faba 	bl	8002f94 <TM_DELAY_Init>
	/* Initialize OneWire on pin PD0 */
	TM_OneWire_Init(&OneWire, Temp_GPIO, One_Wire_Pin);
 8002a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a24:	4911      	ldr	r1, [pc, #68]	; (8002a6c <main+0x58>)
 8002a26:	4812      	ldr	r0, [pc, #72]	; (8002a70 <main+0x5c>)
 8002a28:	f7ff fb5e 	bl	80020e8 <TM_OneWire_Init>
	device_online = TM_OneWire_First(&OneWire);
 8002a2c:	4810      	ldr	r0, [pc, #64]	; (8002a70 <main+0x5c>)
 8002a2e:	f7ff fc77 	bl	8002320 <TM_OneWire_First>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <main+0x60>)
 8002a38:	701a      	strb	r2, [r3, #0]

	if(device_online)
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <main+0x60>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d013      	beq.n	8002a6a <main+0x56>
	{
		TM_OneWire_GetFullROM(&OneWire, device);
 8002a42:	490d      	ldr	r1, [pc, #52]	; (8002a78 <main+0x64>)
 8002a44:	480a      	ldr	r0, [pc, #40]	; (8002a70 <main+0x5c>)
 8002a46:	f7ff fd73 	bl	8002530 <TM_OneWire_GetFullROM>
		TM_DS18B20_Start(&OneWire,device);
 8002a4a:	490b      	ldr	r1, [pc, #44]	; (8002a78 <main+0x64>)
 8002a4c:	4808      	ldr	r0, [pc, #32]	; (8002a70 <main+0x5c>)
 8002a4e:	f7ff f9e1 	bl	8001e14 <TM_DS18B20_Start>
		while(!TM_DS18B20_AllDone(&OneWire));
 8002a52:	bf00      	nop
 8002a54:	4806      	ldr	r0, [pc, #24]	; (8002a70 <main+0x5c>)
 8002a56:	f7ff fb0d 	bl	8002074 <TM_DS18B20_AllDone>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f9      	beq.n	8002a54 <main+0x40>

		TM_DS18B20_Read(&OneWire,device,&temp);
 8002a60:	4a06      	ldr	r2, [pc, #24]	; (8002a7c <main+0x68>)
 8002a62:	4905      	ldr	r1, [pc, #20]	; (8002a78 <main+0x64>)
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <main+0x5c>)
 8002a66:	f7ff f9f3 	bl	8001e50 <TM_DS18B20_Read>
	}
	while(1)
	{

	}
 8002a6a:	e7fe      	b.n	8002a6a <main+0x56>
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	20002288 	.word	0x20002288
 8002a74:	20002284 	.word	0x20002284
 8002a78:	2000229c 	.word	0x2000229c
 8002a7c:	20002280 	.word	0x20002280

08002a80 <init_RCC_Clock>:




void init_RCC_Clock(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af02      	add	r7, sp, #8
	/* Set RCC value to default state*/
	RCC_DeInit();
 8002a86:	f7fe fef7 	bl	8001878 <RCC_DeInit>
	/* Enable external Crystal Oscilator*/
	RCC_HSEConfig(RCC_HSE_ON);
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f7fe ff22 	bl	80018d4 <RCC_HSEConfig>
	ErrorStatus errorstatus = RCC_WaitForHSEStartUp();
 8002a90:	f7fe ff34 	bl	80018fc <RCC_WaitForHSEStartUp>
 8002a94:	4603      	mov	r3, r0
 8002a96:	71fb      	strb	r3, [r7, #7]
	if(errorstatus == SUCCESS)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d123      	bne.n	8002ae6 <init_RCC_Clock+0x66>
	{
		/* Configure PLL clock for 48 MHz*/
		RCC_PLLConfig(RCC_PLLSource_HSE,4,192,8,8);
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	22c0      	movs	r2, #192	; 0xc0
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002aac:	f7fe ff4e 	bl	800194c <RCC_PLLConfig>
		/* enable pll and wait until ready*/
		RCC_PLLCmd(ENABLE);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7fe ff6b 	bl	800198c <RCC_PLLCmd>
		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8002ab6:	bf00      	nop
 8002ab8:	2039      	movs	r0, #57	; 0x39
 8002aba:	f7ff f893 	bl	8001be4 <RCC_GetFlagStatus>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f9      	beq.n	8002ab8 <init_RCC_Clock+0x38>

		/* Set Flash Latency*/
		FLASH_SetLatency(FLASH_Latency_1);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7fe fead 	bl	8001824 <FLASH_SetLatency>
		/* Set AHB prescaler*/
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe ff8a 	bl	80019e4 <RCC_HCLKConfig>
		/* Set APB1 Scaler */
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8002ad0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ad4:	f7fe ffa2 	bl	8001a1c <RCC_PCLK1Config>
		/* Set APB2 Scaler*/
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fe ffbb 	bl	8001a54 <RCC_PCLK2Config>
		 /* Set Clock source to PLL*/
		 RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8002ade:	2002      	movs	r0, #2
 8002ae0:	f7fe ff64 	bl	80019ac <RCC_SYSCLKConfig>
 8002ae4:	e001      	b.n	8002aea <init_RCC_Clock+0x6a>

	}else
	{
			//Set clock source to default config
			RCC_DeInit();
 8002ae6:	f7fe fec7 	bl	8001878 <RCC_DeInit>
	}
	SystemCoreClockUpdate();
 8002aea:	f000 f895 	bl	8002c18 <SystemCoreClockUpdate>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop

08002af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002afe:	e003      	b.n	8002b08 <LoopCopyDataInit>

08002b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b06:	3104      	adds	r1, #4

08002b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b08:	480b      	ldr	r0, [pc, #44]	; (8002b38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b10:	d3f6      	bcc.n	8002b00 <CopyDataInit>
  ldr  r2, =_sbss
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b14:	e002      	b.n	8002b1c <LoopFillZerobss>

08002b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b18:	f842 3b04 	str.w	r3, [r2], #4

08002b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b20:	d3f9      	bcc.n	8002b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b22:	f000 f843 	bl	8002bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b26:	f000 fb8d 	bl	8003244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b2a:	f7ff ff73 	bl	8002a14 <main>
  bx  lr    
 8002b2e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b30:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002b34:	080079a0 	.word	0x080079a0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b3c:	200005e8 	.word	0x200005e8
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002b40:	200005e8 	.word	0x200005e8
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b44:	200022ac 	.word	0x200022ac

08002b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <ADC_IRQHandler>
	...

08002b4c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop

08002b5c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8002b60:	e7fe      	b.n	8002b60 <HardFault_Handler+0x4>
 8002b62:	bf00      	nop

08002b64 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8002b68:	e7fe      	b.n	8002b68 <MemManage_Handler+0x4>
 8002b6a:	bf00      	nop

08002b6c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8002b70:	e7fe      	b.n	8002b70 <BusFault_Handler+0x4>
 8002b72:	bf00      	nop

08002b74 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8002b78:	e7fe      	b.n	8002b78 <UsageFault_Handler+0x4>
 8002b7a:	bf00      	nop

08002b7c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop

08002b8c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop

08002bac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bb0:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <SystemInit+0x60>)
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <SystemInit+0x60>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <SystemInit+0x64>)
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <SystemInit+0x64>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <SystemInit+0x64>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002bd2:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <SystemInit+0x64>)
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <SystemInit+0x64>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <SystemInit+0x64>)
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <SystemInit+0x68>)
 8002be6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002be8:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <SystemInit+0x64>)
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <SystemInit+0x64>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <SystemInit+0x64>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002bfa:	f000 f88b 	bl	8002d14 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bfe:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <SystemInit+0x60>)
 8002c00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c04:	609a      	str	r2, [r3, #8]
#endif
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	24003010 	.word	0x24003010

08002c18 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	2302      	movs	r3, #2
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	2302      	movs	r3, #2
 8002c30:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002c32:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <SystemCoreClockUpdate+0xe8>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d007      	beq.n	8002c52 <SystemCoreClockUpdate+0x3a>
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d009      	beq.n	8002c5a <SystemCoreClockUpdate+0x42>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d13f      	bne.n	8002cca <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <SystemCoreClockUpdate+0xec>)
 8002c4c:	4a2e      	ldr	r2, [pc, #184]	; (8002d08 <SystemCoreClockUpdate+0xf0>)
 8002c4e:	601a      	str	r2, [r3, #0]
      break;
 8002c50:	e03f      	b.n	8002cd2 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002c52:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <SystemCoreClockUpdate+0xec>)
 8002c54:	4a2d      	ldr	r2, [pc, #180]	; (8002d0c <SystemCoreClockUpdate+0xf4>)
 8002c56:	601a      	str	r2, [r3, #0]
      break;
 8002c58:	e03b      	b.n	8002cd2 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <SystemCoreClockUpdate+0xe8>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	0d9b      	lsrs	r3, r3, #22
 8002c64:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <SystemCoreClockUpdate+0xe8>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c6e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002c76:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <SystemCoreClockUpdate+0xf4>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <SystemCoreClockUpdate+0xe8>)
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c86:	400b      	ands	r3, r1
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	fb03 f302 	mul.w	r3, r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e00c      	b.n	8002cac <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002c92:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <SystemCoreClockUpdate+0xf0>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <SystemCoreClockUpdate+0xe8>)
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	fb03 f302 	mul.w	r3, r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <SystemCoreClockUpdate+0xe8>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <SystemCoreClockUpdate+0xec>)
 8002cc6:	6013      	str	r3, [r2, #0]
      break;
 8002cc8:	e003      	b.n	8002cd2 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <SystemCoreClockUpdate+0xec>)
 8002ccc:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <SystemCoreClockUpdate+0xf0>)
 8002cce:	601a      	str	r2, [r3, #0]
      break;
 8002cd0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <SystemCoreClockUpdate+0xe8>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <SystemCoreClockUpdate+0xf8>)
 8002cde:	5cd3      	ldrb	r3, [r2, r3]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <SystemCoreClockUpdate+0xec>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <SystemCoreClockUpdate+0xec>)
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	20000020 	.word	0x20000020
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	007a1200 	.word	0x007a1200
 8002d10:	20000024 	.word	0x20000024

08002d14 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002d22:	4a36      	ldr	r2, [pc, #216]	; (8002dfc <SetSysClock+0xe8>)
 8002d24:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <SetSysClock+0xe8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002d2e:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <SetSysClock+0xe8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <SetSysClock+0x38>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002d4a:	d1f0      	bne.n	8002d2e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <SetSysClock+0xe8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	e001      	b.n	8002d62 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d142      	bne.n	8002dee <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002d68:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <SetSysClock+0xe8>)
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <SetSysClock+0xe8>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <SetSysClock+0xec>)
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <SetSysClock+0xec>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d7e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <SetSysClock+0xe8>)
 8002d82:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <SetSysClock+0xe8>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002d88:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <SetSysClock+0xe8>)
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <SetSysClock+0xe8>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d92:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <SetSysClock+0xe8>)
 8002d96:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <SetSysClock+0xe8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002d9e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <SetSysClock+0xe8>)
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <SetSysClock+0xf0>)
 8002da4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002da6:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <SetSysClock+0xe8>)
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <SetSysClock+0xe8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002db2:	bf00      	nop
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <SetSysClock+0xe8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f9      	beq.n	8002db4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <SetSysClock+0xf4>)
 8002dc2:	f240 6205 	movw	r2, #1541	; 0x605
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <SetSysClock+0xe8>)
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <SetSysClock+0xe8>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f023 0303 	bic.w	r3, r3, #3
 8002dd2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002dd4:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <SetSysClock+0xe8>)
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <SetSysClock+0xe8>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002de0:	bf00      	nop
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <SetSysClock+0xe8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d1f9      	bne.n	8002de2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40007000 	.word	0x40007000
 8002e04:	07405408 	.word	0x07405408
 8002e08:	40023c00 	.word	0x40023c00

08002e0c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	da0b      	bge.n	8002e38 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002e20:	490d      	ldr	r1, [pc, #52]	; (8002e58 <NVIC_SetPriority+0x4c>)
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	3b04      	subs	r3, #4
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	440b      	add	r3, r1
 8002e34:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8002e36:	e009      	b.n	8002e4c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002e38:	4908      	ldr	r1, [pc, #32]	; (8002e5c <NVIC_SetPriority+0x50>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	440b      	add	r3, r1
 8002e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000ed00 	.word	0xe000ed00
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e6e:	d301      	bcc.n	8002e74 <SysTick_Config+0x14>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e011      	b.n	8002e98 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <SysTick_Config+0x40>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8002e80:	210f      	movs	r1, #15
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295
 8002e86:	f7ff ffc1 	bl	8002e0c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SysTick_Config+0x40>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <SysTick_Config+0x40>)
 8002e92:	2207      	movs	r2, #7
 8002e94:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <SysTick_Handler+0xe4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a35      	ldr	r2, [pc, #212]	; (8002f88 <SysTick_Handler+0xe4>)
 8002eb2:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8002eb4:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <SysTick_Handler+0xe8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <SysTick_Handler+0x22>
		TM_Time2--;
 8002ebc:	4b33      	ldr	r3, [pc, #204]	; (8002f8c <SysTick_Handler+0xe8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	4a32      	ldr	r2, [pc, #200]	; (8002f8c <SysTick_Handler+0xe8>)
 8002ec4:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8002ec6:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8002eca:	2300      	movs	r3, #0
 8002ecc:	71fb      	strb	r3, [r7, #7]
 8002ece:	e052      	b.n	8002f76 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <SysTick_Handler+0xec>)
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	685b      	ldr	r3, [r3, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d048      	beq.n	8002f70 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <SysTick_Handler+0xec>)
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	7b1b      	ldrb	r3, [r3, #12]
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d040      	beq.n	8002f70 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <SysTick_Handler+0xec>)
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d038      	beq.n	8002f70 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <SysTick_Handler+0xec>)
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	3a01      	subs	r2, #1
 8002f0c:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <SysTick_Handler+0xec>)
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d128      	bne.n	8002f70 <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <SysTick_Handler+0xec>)
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	4918      	ldr	r1, [pc, #96]	; (8002f90 <SysTick_Handler+0xec>)
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4618      	mov	r0, r3
 8002f38:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <SysTick_Handler+0xec>)
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	4912      	ldr	r1, [pc, #72]	; (8002f90 <SysTick_Handler+0xec>)
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <SysTick_Handler+0xec>)
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <SysTick_Handler+0xec>)
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	731a      	strb	r2, [r3, #12]
	
	/* Call user function */
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	3301      	adds	r3, #1
 8002f74:	71fb      	strb	r3, [r7, #7]
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <SysTick_Handler+0xec>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	79fa      	ldrb	r2, [r7, #7]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d3a7      	bcc.n	8002ed0 <SysTick_Handler+0x2c>
					CustomTimers.Timers[i]->Enabled = 0;
				}
			}
		}
	}
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000604 	.word	0x20000604
 8002f8c:	20000608 	.word	0x20000608
 8002f90:	20000610 	.word	0x20000610

08002f94 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef RCC_ClockStruct;
	RCC_GetClocksFreq(&RCC_ClockStruct);
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fd77 	bl	8001a90 <RCC_GetClocksFreq>

#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(RCC_ClockStruct.HCLK_Frequency / 2000)) {
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <TM_DELAY_Init+0x44>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	09db      	lsrs	r3, r3, #7
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff57 	bl	8002e60 <SysTick_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d000      	beq.n	8002fba <TM_DELAY_Init+0x26>
		/* Capture error */
		while (1);
 8002fb8:	e7fe      	b.n	8002fb8 <TM_DELAY_Init+0x24>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = RCC_ClockStruct.HCLK_Frequency / 14000000;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	09db      	lsrs	r3, r3, #7
 8002fbe:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <TM_DELAY_Init+0x48>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	09db      	lsrs	r3, r3, #7
 8002fc6:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <TM_DELAY_Init+0x4c>)
 8002fc8:	6013      	str	r3, [r2, #0]
		mult = RCC_ClockStruct.HCLK_Frequency / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <TM_DELAY_Init+0x50>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	10624dd3 	.word	0x10624dd3
 8002fdc:	004cb223 	.word	0x004cb223
 8002fe0:	200022a4 	.word	0x200022a4
 8002fe4:	2000060c 	.word	0x2000060c

08002fe8 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	807b      	strh	r3, [r7, #2]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	707b      	strb	r3, [r7, #1]
 8002ffe:	4613      	mov	r3, r2
 8003000:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f879 	bl	8003100 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800300e:	7838      	ldrb	r0, [r7, #0]
 8003010:	787a      	ldrb	r2, [r7, #1]
 8003012:	8879      	ldrh	r1, [r7, #2]
 8003014:	7d3b      	ldrb	r3, [r7, #20]
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	7c3b      	ldrb	r3, [r7, #16]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	4603      	mov	r3, r0
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f886 	bl	8003130 <TM_GPIO_INT_Init>
 8003024:	e000      	b.n	8003028 <TM_GPIO_Init+0x40>
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8003026:	bf00      	nop
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop

08003030 <TM_GPIO_SetPinAsInput>:
			GPIO_UsedPins[ptr] &= ~(1 << i);
		}
	}
}

void TM_GPIO_SetPinAsInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e015      	b.n	800306e <TM_GPIO_SetPinAsInput+0x3e>
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	fa42 f303 	asr.w	r3, r2, r3
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <TM_GPIO_SetPinAsInput+0x38>
			/* Set 00 bits combination for input */
			GPIOx->MODER &= ~(0x03 << (2 * i));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	0052      	lsls	r2, r2, #1
 800305a:	2103      	movs	r1, #3
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	43d2      	mvns	r2, r2
 8003062:	401a      	ands	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	601a      	str	r2, [r3, #0]
}

void TM_GPIO_SetPinAsInput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	uint8_t i;
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	3301      	adds	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d9e6      	bls.n	8003042 <TM_GPIO_SetPinAsInput+0x12>
		if (GPIO_Pin & (1 << i)) {
			/* Set 00 bits combination for input */
			GPIOx->MODER &= ~(0x03 << (2 * i));
		}
	}
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <TM_GPIO_SetPinAsOutput>:

void TM_GPIO_SetPinAsOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
	uint8_t i;
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e01b      	b.n	80030ca <TM_GPIO_SetPinAsOutput+0x4a>
		/* Pin is set */
		if (GPIO_Pin & (1 << i)) {
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	fa42 f303 	asr.w	r3, r2, r3
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <TM_GPIO_SetPinAsOutput+0x44>
			/* Set 01 bits combination for output */
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	0052      	lsls	r2, r2, #1
 80030aa:	2103      	movs	r1, #3
 80030ac:	fa01 f202 	lsl.w	r2, r1, r2
 80030b0:	43d2      	mvns	r2, r2
 80030b2:	4013      	ands	r3, r2
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	0052      	lsls	r2, r2, #1
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	601a      	str	r2, [r3, #0]
}

void TM_GPIO_SetPinAsOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	uint8_t i;
	/* Go through all pins */
	for (i = 0x00; i < 0x10; i++) {
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	3301      	adds	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b0f      	cmp	r3, #15
 80030ce:	d9e0      	bls.n	8003092 <TM_GPIO_SetPinAsOutput+0x12>
		if (GPIO_Pin & (1 << i)) {
			/* Set 01 bits combination for output */
			GPIOx->MODER = (GPIOx->MODER & ~(0x03 << (2 * i))) | (0x01 << (2 * i));
		}
	}
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80030ea:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80030ee:	0a9b      	lsrs	r3, r3, #10
 80030f0:	b29b      	uxth	r3, r3
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop

08003100 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff ffe7 	bl	80030dc <TM_GPIO_GetPortSource>
 800310e:	4603      	mov	r3, r0
 8003110:	461a      	mov	r2, r3
 8003112:	2301      	movs	r3, #1
 8003114:	fa03 f102 	lsl.w	r1, r3, r2
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <TM_GPIO_INT_EnableClock+0x2c>)
 800311a:	4b04      	ldr	r3, [pc, #16]	; (800312c <TM_GPIO_INT_EnableClock+0x2c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	430b      	orrs	r3, r1
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800

08003130 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	461a      	mov	r2, r3
 800313e:	4603      	mov	r3, r0
 8003140:	807b      	strh	r3, [r7, #2]
 8003142:	460b      	mov	r3, r1
 8003144:	707b      	strb	r3, [r7, #1]
 8003146:	4613      	mov	r3, r2
 8003148:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ffc6 	bl	80030dc <TM_GPIO_GetPortSource>
 8003150:	4603      	mov	r3, r0
 8003152:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e067      	b.n	800322a <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	fa42 f303 	asr.w	r3, r2, r3
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d05b      	beq.n	8003222 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800316a:	7bbb      	ldrb	r3, [r7, #14]
 800316c:	7bba      	ldrb	r2, [r7, #14]
 800316e:	4932      	ldr	r1, [pc, #200]	; (8003238 <TM_GPIO_INT_Init+0x108>)
 8003170:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003174:	b211      	sxth	r1, r2
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f202 	lsl.w	r2, r0, r2
 800317e:	b212      	sxth	r2, r2
 8003180:	430a      	orrs	r2, r1
 8003182:	b212      	sxth	r2, r2
 8003184:	b291      	uxth	r1, r2
 8003186:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <TM_GPIO_INT_Init+0x108>)
 8003188:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	0052      	lsls	r2, r2, #1
 8003194:	2103      	movs	r1, #3
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	43d2      	mvns	r2, r2
 800319c:	4013      	ands	r3, r2
 800319e:	7e39      	ldrb	r1, [r7, #24]
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	0052      	lsls	r2, r2, #1
 80031a4:	fa01 f202 	lsl.w	r2, r1, r2
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2103      	movs	r1, #3
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	4013      	ands	r3, r2
 80031c0:	7879      	ldrb	r1, [r7, #1]
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	0052      	lsls	r2, r2, #1
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80031d0:	787b      	ldrb	r3, [r7, #1]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d002      	beq.n	80031dc <TM_GPIO_INT_Init+0xac>
 80031d6:	787b      	ldrb	r3, [r7, #1]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d123      	bne.n	8003224 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	b292      	uxth	r2, r2
 80031ea:	43d2      	mvns	r2, r2
 80031ec:	401a      	ands	r2, r3
 80031ee:	7839      	ldrb	r1, [r7, #0]
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2103      	movs	r1, #3
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	4013      	ands	r3, r2
 8003210:	7f39      	ldrb	r1, [r7, #28]
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	0052      	lsls	r2, r2, #1
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	e000      	b.n	8003224 <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8003222:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	3301      	adds	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b0f      	cmp	r3, #15
 800322e:	d994      	bls.n	800315a <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000628 	.word	0x20000628

0800323c <atof>:
 800323c:	2100      	movs	r1, #0
 800323e:	f001 bbdf 	b.w	8004a00 <strtod>
	...

08003244 <__libc_init_array>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <__libc_init_array+0x3c>)
 8003248:	4c0e      	ldr	r4, [pc, #56]	; (8003284 <__libc_init_array+0x40>)
 800324a:	1ae4      	subs	r4, r4, r3
 800324c:	10a4      	asrs	r4, r4, #2
 800324e:	2500      	movs	r5, #0
 8003250:	461e      	mov	r6, r3
 8003252:	42a5      	cmp	r5, r4
 8003254:	d004      	beq.n	8003260 <__libc_init_array+0x1c>
 8003256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800325a:	4798      	blx	r3
 800325c:	3501      	adds	r5, #1
 800325e:	e7f8      	b.n	8003252 <__libc_init_array+0xe>
 8003260:	f004 f966 	bl	8007530 <_init>
 8003264:	4c08      	ldr	r4, [pc, #32]	; (8003288 <__libc_init_array+0x44>)
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <__libc_init_array+0x48>)
 8003268:	1ae4      	subs	r4, r4, r3
 800326a:	10a4      	asrs	r4, r4, #2
 800326c:	2500      	movs	r5, #0
 800326e:	461e      	mov	r6, r3
 8003270:	42a5      	cmp	r5, r4
 8003272:	d004      	beq.n	800327e <__libc_init_array+0x3a>
 8003274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003278:	4798      	blx	r3
 800327a:	3501      	adds	r5, #1
 800327c:	e7f8      	b.n	8003270 <__libc_init_array+0x2c>
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	08007998 	.word	0x08007998
 8003284:	08007998 	.word	0x08007998
 8003288:	0800799c 	.word	0x0800799c
 800328c:	08007998 	.word	0x08007998

08003290 <localtime>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <localtime+0x20>)
 8003294:	681c      	ldr	r4, [r3, #0]
 8003296:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003298:	4605      	mov	r5, r0
 800329a:	b91b      	cbnz	r3, 80032a4 <localtime+0x14>
 800329c:	2024      	movs	r0, #36	; 0x24
 800329e:	f000 f8ef 	bl	8003480 <malloc>
 80032a2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80032a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80032a6:	4628      	mov	r0, r5
 80032a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ac:	f000 b802 	b.w	80032b4 <localtime_r>
 80032b0:	20000580 	.word	0x20000580

080032b4 <localtime_r>:
 80032b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b8:	460c      	mov	r4, r1
 80032ba:	4680      	mov	r8, r0
 80032bc:	f002 faf2 	bl	80058a4 <__gettzinfo>
 80032c0:	4621      	mov	r1, r4
 80032c2:	4607      	mov	r7, r0
 80032c4:	4640      	mov	r0, r8
 80032c6:	f002 faf1 	bl	80058ac <gmtime_r>
 80032ca:	6946      	ldr	r6, [r0, #20]
 80032cc:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80032d0:	07b3      	lsls	r3, r6, #30
 80032d2:	4604      	mov	r4, r0
 80032d4:	d105      	bne.n	80032e2 <localtime_r+0x2e>
 80032d6:	2264      	movs	r2, #100	; 0x64
 80032d8:	fb96 f3f2 	sdiv	r3, r6, r2
 80032dc:	fb02 6313 	mls	r3, r2, r3, r6
 80032e0:	b94b      	cbnz	r3, 80032f6 <localtime_r+0x42>
 80032e2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80032e6:	fb96 f3f5 	sdiv	r3, r6, r5
 80032ea:	fb05 6513 	mls	r5, r5, r3, r6
 80032ee:	fab5 f385 	clz	r3, r5
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	e000      	b.n	80032f8 <localtime_r+0x44>
 80032f6:	2301      	movs	r3, #1
 80032f8:	4a5f      	ldr	r2, [pc, #380]	; (8003478 <localtime_r+0x1c4>)
 80032fa:	2530      	movs	r5, #48	; 0x30
 80032fc:	fb05 2503 	mla	r5, r5, r3, r2
 8003300:	f001 fcac 	bl	8004c5c <__tz_lock>
 8003304:	f001 fcac 	bl	8004c60 <_tzset_unlocked>
 8003308:	4b5c      	ldr	r3, [pc, #368]	; (800347c <localtime_r+0x1c8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	b1f3      	cbz	r3, 800334c <localtime_r+0x98>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	429e      	cmp	r6, r3
 8003312:	d105      	bne.n	8003320 <localtime_r+0x6c>
 8003314:	6839      	ldr	r1, [r7, #0]
 8003316:	f8d8 3000 	ldr.w	r3, [r8]
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	b941      	cbnz	r1, 8003330 <localtime_r+0x7c>
 800331e:	e00a      	b.n	8003336 <localtime_r+0x82>
 8003320:	4630      	mov	r0, r6
 8003322:	f001 fbf3 	bl	8004b0c <__tzcalc_limits>
 8003326:	2800      	cmp	r0, #0
 8003328:	d1f4      	bne.n	8003314 <localtime_r+0x60>
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e00d      	b.n	800334c <localtime_r+0x98>
 8003330:	4293      	cmp	r3, r2
 8003332:	db08      	blt.n	8003346 <localtime_r+0x92>
 8003334:	e001      	b.n	800333a <localtime_r+0x86>
 8003336:	4293      	cmp	r3, r2
 8003338:	da07      	bge.n	800334a <localtime_r+0x96>
 800333a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800333c:	4293      	cmp	r3, r2
 800333e:	bfac      	ite	ge
 8003340:	2300      	movge	r3, #0
 8003342:	2301      	movlt	r3, #1
 8003344:	e002      	b.n	800334c <localtime_r+0x98>
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <localtime_r+0x98>
 800334a:	2301      	movs	r3, #1
 800334c:	6223      	str	r3, [r4, #32]
 800334e:	6a23      	ldr	r3, [r4, #32]
 8003350:	2b01      	cmp	r3, #1
 8003352:	bf0c      	ite	eq
 8003354:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8003356:	6a39      	ldrne	r1, [r7, #32]
 8003358:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800335c:	203c      	movs	r0, #60	; 0x3c
 800335e:	fb91 f6f3 	sdiv	r6, r1, r3
 8003362:	fb03 1316 	mls	r3, r3, r6, r1
 8003366:	6861      	ldr	r1, [r4, #4]
 8003368:	fb93 f2f0 	sdiv	r2, r3, r0
 800336c:	fb00 3012 	mls	r0, r0, r2, r3
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	1a89      	subs	r1, r1, r2
 8003374:	68a2      	ldr	r2, [r4, #8]
 8003376:	6061      	str	r1, [r4, #4]
 8003378:	1a1b      	subs	r3, r3, r0
 800337a:	1b92      	subs	r2, r2, r6
 800337c:	2b3b      	cmp	r3, #59	; 0x3b
 800337e:	6023      	str	r3, [r4, #0]
 8003380:	60a2      	str	r2, [r4, #8]
 8003382:	dd03      	ble.n	800338c <localtime_r+0xd8>
 8003384:	3101      	adds	r1, #1
 8003386:	6061      	str	r1, [r4, #4]
 8003388:	3b3c      	subs	r3, #60	; 0x3c
 800338a:	e004      	b.n	8003396 <localtime_r+0xe2>
 800338c:	2b00      	cmp	r3, #0
 800338e:	da03      	bge.n	8003398 <localtime_r+0xe4>
 8003390:	3901      	subs	r1, #1
 8003392:	6061      	str	r1, [r4, #4]
 8003394:	333c      	adds	r3, #60	; 0x3c
 8003396:	6023      	str	r3, [r4, #0]
 8003398:	6863      	ldr	r3, [r4, #4]
 800339a:	2b3b      	cmp	r3, #59	; 0x3b
 800339c:	dd03      	ble.n	80033a6 <localtime_r+0xf2>
 800339e:	3201      	adds	r2, #1
 80033a0:	60a2      	str	r2, [r4, #8]
 80033a2:	3b3c      	subs	r3, #60	; 0x3c
 80033a4:	e004      	b.n	80033b0 <localtime_r+0xfc>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da03      	bge.n	80033b2 <localtime_r+0xfe>
 80033aa:	3a01      	subs	r2, #1
 80033ac:	60a2      	str	r2, [r4, #8]
 80033ae:	333c      	adds	r3, #60	; 0x3c
 80033b0:	6063      	str	r3, [r4, #4]
 80033b2:	68a3      	ldr	r3, [r4, #8]
 80033b4:	2b17      	cmp	r3, #23
 80033b6:	dd22      	ble.n	80033fe <localtime_r+0x14a>
 80033b8:	69e2      	ldr	r2, [r4, #28]
 80033ba:	3201      	adds	r2, #1
 80033bc:	61e2      	str	r2, [r4, #28]
 80033be:	69a2      	ldr	r2, [r4, #24]
 80033c0:	3201      	adds	r2, #1
 80033c2:	2a06      	cmp	r2, #6
 80033c4:	bfc8      	it	gt
 80033c6:	2200      	movgt	r2, #0
 80033c8:	61a2      	str	r2, [r4, #24]
 80033ca:	68e2      	ldr	r2, [r4, #12]
 80033cc:	3b18      	subs	r3, #24
 80033ce:	3201      	adds	r2, #1
 80033d0:	60a3      	str	r3, [r4, #8]
 80033d2:	6923      	ldr	r3, [r4, #16]
 80033d4:	60e2      	str	r2, [r4, #12]
 80033d6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80033da:	428a      	cmp	r2, r1
 80033dc:	dd46      	ble.n	800346c <localtime_r+0x1b8>
 80033de:	3301      	adds	r3, #1
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	bf0c      	ite	eq
 80033e4:	6963      	ldreq	r3, [r4, #20]
 80033e6:	6123      	strne	r3, [r4, #16]
 80033e8:	eba2 0201 	sub.w	r2, r2, r1
 80033ec:	60e2      	str	r2, [r4, #12]
 80033ee:	bf01      	itttt	eq
 80033f0:	3301      	addeq	r3, #1
 80033f2:	2200      	moveq	r2, #0
 80033f4:	6122      	streq	r2, [r4, #16]
 80033f6:	6163      	streq	r3, [r4, #20]
 80033f8:	bf08      	it	eq
 80033fa:	61e2      	streq	r2, [r4, #28]
 80033fc:	e036      	b.n	800346c <localtime_r+0x1b8>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da34      	bge.n	800346c <localtime_r+0x1b8>
 8003402:	69e2      	ldr	r2, [r4, #28]
 8003404:	3a01      	subs	r2, #1
 8003406:	61e2      	str	r2, [r4, #28]
 8003408:	69a2      	ldr	r2, [r4, #24]
 800340a:	3a01      	subs	r2, #1
 800340c:	bf48      	it	mi
 800340e:	2206      	movmi	r2, #6
 8003410:	61a2      	str	r2, [r4, #24]
 8003412:	68e2      	ldr	r2, [r4, #12]
 8003414:	3318      	adds	r3, #24
 8003416:	3a01      	subs	r2, #1
 8003418:	60e2      	str	r2, [r4, #12]
 800341a:	60a3      	str	r3, [r4, #8]
 800341c:	bb32      	cbnz	r2, 800346c <localtime_r+0x1b8>
 800341e:	6923      	ldr	r3, [r4, #16]
 8003420:	3b01      	subs	r3, #1
 8003422:	d401      	bmi.n	8003428 <localtime_r+0x174>
 8003424:	6123      	str	r3, [r4, #16]
 8003426:	e01d      	b.n	8003464 <localtime_r+0x1b0>
 8003428:	230b      	movs	r3, #11
 800342a:	6123      	str	r3, [r4, #16]
 800342c:	6963      	ldr	r3, [r4, #20]
 800342e:	1e5a      	subs	r2, r3, #1
 8003430:	f012 0f03 	tst.w	r2, #3
 8003434:	6162      	str	r2, [r4, #20]
 8003436:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800343a:	d105      	bne.n	8003448 <localtime_r+0x194>
 800343c:	2164      	movs	r1, #100	; 0x64
 800343e:	fb93 f2f1 	sdiv	r2, r3, r1
 8003442:	fb01 3212 	mls	r2, r1, r2, r3
 8003446:	b94a      	cbnz	r2, 800345c <localtime_r+0x1a8>
 8003448:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800344c:	fb93 f2f1 	sdiv	r2, r3, r1
 8003450:	fb01 3312 	mls	r3, r1, r2, r3
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	e000      	b.n	800345e <localtime_r+0x1aa>
 800345c:	2301      	movs	r3, #1
 800345e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003462:	61e3      	str	r3, [r4, #28]
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800346a:	60e3      	str	r3, [r4, #12]
 800346c:	f001 fbf7 	bl	8004c5e <__tz_unlock>
 8003470:	4620      	mov	r0, r4
 8003472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003476:	bf00      	nop
 8003478:	0800760c 	.word	0x0800760c
 800347c:	20000690 	.word	0x20000690

08003480 <malloc>:
 8003480:	4b02      	ldr	r3, [pc, #8]	; (800348c <malloc+0xc>)
 8003482:	4601      	mov	r1, r0
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	f000 b80b 	b.w	80034a0 <_malloc_r>
 800348a:	bf00      	nop
 800348c:	20000580 	.word	0x20000580

08003490 <free>:
 8003490:	4b02      	ldr	r3, [pc, #8]	; (800349c <free+0xc>)
 8003492:	4601      	mov	r1, r0
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	f001 bdd3 	b.w	8005040 <_free_r>
 800349a:	bf00      	nop
 800349c:	20000580 	.word	0x20000580

080034a0 <_malloc_r>:
 80034a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a4:	f101 040b 	add.w	r4, r1, #11
 80034a8:	2c16      	cmp	r4, #22
 80034aa:	b085      	sub	sp, #20
 80034ac:	4681      	mov	r9, r0
 80034ae:	d903      	bls.n	80034b8 <_malloc_r+0x18>
 80034b0:	f034 0407 	bics.w	r4, r4, #7
 80034b4:	d501      	bpl.n	80034ba <_malloc_r+0x1a>
 80034b6:	e002      	b.n	80034be <_malloc_r+0x1e>
 80034b8:	2410      	movs	r4, #16
 80034ba:	428c      	cmp	r4, r1
 80034bc:	d203      	bcs.n	80034c6 <_malloc_r+0x26>
 80034be:	230c      	movs	r3, #12
 80034c0:	f8c9 3000 	str.w	r3, [r9]
 80034c4:	e1ea      	b.n	800389c <_malloc_r+0x3fc>
 80034c6:	4648      	mov	r0, r9
 80034c8:	f000 fc6c 	bl	8003da4 <__malloc_lock>
 80034cc:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80034d0:	4d9e      	ldr	r5, [pc, #632]	; (800374c <_malloc_r+0x2ac>)
 80034d2:	d217      	bcs.n	8003504 <_malloc_r+0x64>
 80034d4:	f104 0208 	add.w	r2, r4, #8
 80034d8:	442a      	add	r2, r5
 80034da:	f1a2 0108 	sub.w	r1, r2, #8
 80034de:	6856      	ldr	r6, [r2, #4]
 80034e0:	428e      	cmp	r6, r1
 80034e2:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80034e6:	d102      	bne.n	80034ee <_malloc_r+0x4e>
 80034e8:	68d6      	ldr	r6, [r2, #12]
 80034ea:	42b2      	cmp	r2, r6
 80034ec:	d008      	beq.n	8003500 <_malloc_r+0x60>
 80034ee:	6873      	ldr	r3, [r6, #4]
 80034f0:	68f2      	ldr	r2, [r6, #12]
 80034f2:	68b1      	ldr	r1, [r6, #8]
 80034f4:	f023 0303 	bic.w	r3, r3, #3
 80034f8:	60ca      	str	r2, [r1, #12]
 80034fa:	4433      	add	r3, r6
 80034fc:	6091      	str	r1, [r2, #8]
 80034fe:	e02f      	b.n	8003560 <_malloc_r+0xc0>
 8003500:	3302      	adds	r3, #2
 8003502:	e03d      	b.n	8003580 <_malloc_r+0xe0>
 8003504:	0a63      	lsrs	r3, r4, #9
 8003506:	d01a      	beq.n	800353e <_malloc_r+0x9e>
 8003508:	2b04      	cmp	r3, #4
 800350a:	d802      	bhi.n	8003512 <_malloc_r+0x72>
 800350c:	09a3      	lsrs	r3, r4, #6
 800350e:	3338      	adds	r3, #56	; 0x38
 8003510:	e018      	b.n	8003544 <_malloc_r+0xa4>
 8003512:	2b14      	cmp	r3, #20
 8003514:	d801      	bhi.n	800351a <_malloc_r+0x7a>
 8003516:	335b      	adds	r3, #91	; 0x5b
 8003518:	e014      	b.n	8003544 <_malloc_r+0xa4>
 800351a:	2b54      	cmp	r3, #84	; 0x54
 800351c:	d802      	bhi.n	8003524 <_malloc_r+0x84>
 800351e:	0b23      	lsrs	r3, r4, #12
 8003520:	336e      	adds	r3, #110	; 0x6e
 8003522:	e00f      	b.n	8003544 <_malloc_r+0xa4>
 8003524:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003528:	d802      	bhi.n	8003530 <_malloc_r+0x90>
 800352a:	0be3      	lsrs	r3, r4, #15
 800352c:	3377      	adds	r3, #119	; 0x77
 800352e:	e009      	b.n	8003544 <_malloc_r+0xa4>
 8003530:	f240 5254 	movw	r2, #1364	; 0x554
 8003534:	4293      	cmp	r3, r2
 8003536:	d804      	bhi.n	8003542 <_malloc_r+0xa2>
 8003538:	0ca3      	lsrs	r3, r4, #18
 800353a:	337c      	adds	r3, #124	; 0x7c
 800353c:	e002      	b.n	8003544 <_malloc_r+0xa4>
 800353e:	233f      	movs	r3, #63	; 0x3f
 8003540:	e000      	b.n	8003544 <_malloc_r+0xa4>
 8003542:	237e      	movs	r3, #126	; 0x7e
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800354a:	f1a2 0008 	sub.w	r0, r2, #8
 800354e:	6856      	ldr	r6, [r2, #4]
 8003550:	e00c      	b.n	800356c <_malloc_r+0xcc>
 8003552:	2900      	cmp	r1, #0
 8003554:	68f1      	ldr	r1, [r6, #12]
 8003556:	db08      	blt.n	800356a <_malloc_r+0xca>
 8003558:	68b3      	ldr	r3, [r6, #8]
 800355a:	60d9      	str	r1, [r3, #12]
 800355c:	608b      	str	r3, [r1, #8]
 800355e:	18b3      	adds	r3, r6, r2
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	e1a3      	b.n	80038b2 <_malloc_r+0x412>
 800356a:	460e      	mov	r6, r1
 800356c:	4286      	cmp	r6, r0
 800356e:	d006      	beq.n	800357e <_malloc_r+0xde>
 8003570:	6872      	ldr	r2, [r6, #4]
 8003572:	f022 0203 	bic.w	r2, r2, #3
 8003576:	1b11      	subs	r1, r2, r4
 8003578:	290f      	cmp	r1, #15
 800357a:	ddea      	ble.n	8003552 <_malloc_r+0xb2>
 800357c:	3b01      	subs	r3, #1
 800357e:	3301      	adds	r3, #1
 8003580:	4a72      	ldr	r2, [pc, #456]	; (800374c <_malloc_r+0x2ac>)
 8003582:	692e      	ldr	r6, [r5, #16]
 8003584:	f102 0708 	add.w	r7, r2, #8
 8003588:	42be      	cmp	r6, r7
 800358a:	4639      	mov	r1, r7
 800358c:	d079      	beq.n	8003682 <_malloc_r+0x1e2>
 800358e:	6870      	ldr	r0, [r6, #4]
 8003590:	f020 0003 	bic.w	r0, r0, #3
 8003594:	ebc4 0e00 	rsb	lr, r4, r0
 8003598:	f1be 0f0f 	cmp.w	lr, #15
 800359c:	dd0d      	ble.n	80035ba <_malloc_r+0x11a>
 800359e:	1933      	adds	r3, r6, r4
 80035a0:	f044 0401 	orr.w	r4, r4, #1
 80035a4:	6074      	str	r4, [r6, #4]
 80035a6:	6153      	str	r3, [r2, #20]
 80035a8:	6113      	str	r3, [r2, #16]
 80035aa:	f04e 0201 	orr.w	r2, lr, #1
 80035ae:	60df      	str	r7, [r3, #12]
 80035b0:	609f      	str	r7, [r3, #8]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	f843 e00e 	str.w	lr, [r3, lr]
 80035b8:	e17b      	b.n	80038b2 <_malloc_r+0x412>
 80035ba:	f1be 0f00 	cmp.w	lr, #0
 80035be:	6157      	str	r7, [r2, #20]
 80035c0:	6117      	str	r7, [r2, #16]
 80035c2:	db05      	blt.n	80035d0 <_malloc_r+0x130>
 80035c4:	4430      	add	r0, r6
 80035c6:	6843      	ldr	r3, [r0, #4]
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6043      	str	r3, [r0, #4]
 80035ce:	e170      	b.n	80038b2 <_malloc_r+0x412>
 80035d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80035d4:	d215      	bcs.n	8003602 <_malloc_r+0x162>
 80035d6:	08c0      	lsrs	r0, r0, #3
 80035d8:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80035dc:	2701      	movs	r7, #1
 80035de:	fa07 fe0e 	lsl.w	lr, r7, lr
 80035e2:	6857      	ldr	r7, [r2, #4]
 80035e4:	3001      	adds	r0, #1
 80035e6:	ea4e 0707 	orr.w	r7, lr, r7
 80035ea:	6057      	str	r7, [r2, #4]
 80035ec:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 80035f0:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 80035f4:	f8c6 e008 	str.w	lr, [r6, #8]
 80035f8:	3f08      	subs	r7, #8
 80035fa:	60f7      	str	r7, [r6, #12]
 80035fc:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8003600:	e03d      	b.n	800367e <_malloc_r+0x1de>
 8003602:	0a42      	lsrs	r2, r0, #9
 8003604:	2a04      	cmp	r2, #4
 8003606:	d802      	bhi.n	800360e <_malloc_r+0x16e>
 8003608:	0982      	lsrs	r2, r0, #6
 800360a:	3238      	adds	r2, #56	; 0x38
 800360c:	e015      	b.n	800363a <_malloc_r+0x19a>
 800360e:	2a14      	cmp	r2, #20
 8003610:	d801      	bhi.n	8003616 <_malloc_r+0x176>
 8003612:	325b      	adds	r2, #91	; 0x5b
 8003614:	e011      	b.n	800363a <_malloc_r+0x19a>
 8003616:	2a54      	cmp	r2, #84	; 0x54
 8003618:	d802      	bhi.n	8003620 <_malloc_r+0x180>
 800361a:	0b02      	lsrs	r2, r0, #12
 800361c:	326e      	adds	r2, #110	; 0x6e
 800361e:	e00c      	b.n	800363a <_malloc_r+0x19a>
 8003620:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003624:	d802      	bhi.n	800362c <_malloc_r+0x18c>
 8003626:	0bc2      	lsrs	r2, r0, #15
 8003628:	3277      	adds	r2, #119	; 0x77
 800362a:	e006      	b.n	800363a <_malloc_r+0x19a>
 800362c:	f240 5754 	movw	r7, #1364	; 0x554
 8003630:	42ba      	cmp	r2, r7
 8003632:	bf9a      	itte	ls
 8003634:	0c82      	lsrls	r2, r0, #18
 8003636:	327c      	addls	r2, #124	; 0x7c
 8003638:	227e      	movhi	r2, #126	; 0x7e
 800363a:	1c57      	adds	r7, r2, #1
 800363c:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003640:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003644:	f8df c104 	ldr.w	ip, [pc, #260]	; 800374c <_malloc_r+0x2ac>
 8003648:	45be      	cmp	lr, r7
 800364a:	d10d      	bne.n	8003668 <_malloc_r+0x1c8>
 800364c:	2001      	movs	r0, #1
 800364e:	1092      	asrs	r2, r2, #2
 8003650:	fa00 f202 	lsl.w	r2, r0, r2
 8003654:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003658:	4310      	orrs	r0, r2
 800365a:	f8cc 0004 	str.w	r0, [ip, #4]
 800365e:	4672      	mov	r2, lr
 8003660:	e009      	b.n	8003676 <_malloc_r+0x1d6>
 8003662:	68bf      	ldr	r7, [r7, #8]
 8003664:	45be      	cmp	lr, r7
 8003666:	d004      	beq.n	8003672 <_malloc_r+0x1d2>
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	f022 0203 	bic.w	r2, r2, #3
 800366e:	4290      	cmp	r0, r2
 8003670:	d3f7      	bcc.n	8003662 <_malloc_r+0x1c2>
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	46be      	mov	lr, r7
 8003676:	60f2      	str	r2, [r6, #12]
 8003678:	f8c6 e008 	str.w	lr, [r6, #8]
 800367c:	6096      	str	r6, [r2, #8]
 800367e:	f8ce 600c 	str.w	r6, [lr, #12]
 8003682:	2001      	movs	r0, #1
 8003684:	109a      	asrs	r2, r3, #2
 8003686:	fa00 f202 	lsl.w	r2, r0, r2
 800368a:	6868      	ldr	r0, [r5, #4]
 800368c:	4282      	cmp	r2, r0
 800368e:	d85f      	bhi.n	8003750 <_malloc_r+0x2b0>
 8003690:	4202      	tst	r2, r0
 8003692:	d106      	bne.n	80036a2 <_malloc_r+0x202>
 8003694:	f023 0303 	bic.w	r3, r3, #3
 8003698:	0052      	lsls	r2, r2, #1
 800369a:	4202      	tst	r2, r0
 800369c:	f103 0304 	add.w	r3, r3, #4
 80036a0:	d0fa      	beq.n	8003698 <_malloc_r+0x1f8>
 80036a2:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80036a6:	46c2      	mov	sl, r8
 80036a8:	469c      	mov	ip, r3
 80036aa:	f8da 600c 	ldr.w	r6, [sl, #12]
 80036ae:	4556      	cmp	r6, sl
 80036b0:	d02c      	beq.n	800370c <_malloc_r+0x26c>
 80036b2:	6870      	ldr	r0, [r6, #4]
 80036b4:	68f7      	ldr	r7, [r6, #12]
 80036b6:	f020 0003 	bic.w	r0, r0, #3
 80036ba:	ebc4 0e00 	rsb	lr, r4, r0
 80036be:	f1be 0f0f 	cmp.w	lr, #15
 80036c2:	dd11      	ble.n	80036e8 <_malloc_r+0x248>
 80036c4:	1933      	adds	r3, r6, r4
 80036c6:	f044 0401 	orr.w	r4, r4, #1
 80036ca:	6074      	str	r4, [r6, #4]
 80036cc:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80036d0:	60d7      	str	r7, [r2, #12]
 80036d2:	60ba      	str	r2, [r7, #8]
 80036d4:	f04e 0201 	orr.w	r2, lr, #1
 80036d8:	616b      	str	r3, [r5, #20]
 80036da:	612b      	str	r3, [r5, #16]
 80036dc:	60d9      	str	r1, [r3, #12]
 80036de:	6099      	str	r1, [r3, #8]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	f843 e00e 	str.w	lr, [r3, lr]
 80036e6:	e00b      	b.n	8003700 <_malloc_r+0x260>
 80036e8:	f1be 0f00 	cmp.w	lr, #0
 80036ec:	db0c      	blt.n	8003708 <_malloc_r+0x268>
 80036ee:	1833      	adds	r3, r6, r0
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80036fc:	60df      	str	r7, [r3, #12]
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	4648      	mov	r0, r9
 8003702:	f000 fb50 	bl	8003da6 <__malloc_unlock>
 8003706:	e0d8      	b.n	80038ba <_malloc_r+0x41a>
 8003708:	463e      	mov	r6, r7
 800370a:	e7d0      	b.n	80036ae <_malloc_r+0x20e>
 800370c:	f10c 0c01 	add.w	ip, ip, #1
 8003710:	f01c 0f03 	tst.w	ip, #3
 8003714:	f10a 0a08 	add.w	sl, sl, #8
 8003718:	d1c7      	bne.n	80036aa <_malloc_r+0x20a>
 800371a:	0798      	lsls	r0, r3, #30
 800371c:	d104      	bne.n	8003728 <_malloc_r+0x288>
 800371e:	686b      	ldr	r3, [r5, #4]
 8003720:	ea23 0302 	bic.w	r3, r3, r2
 8003724:	606b      	str	r3, [r5, #4]
 8003726:	e005      	b.n	8003734 <_malloc_r+0x294>
 8003728:	f858 0908 	ldr.w	r0, [r8], #-8
 800372c:	4580      	cmp	r8, r0
 800372e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003732:	d0f2      	beq.n	800371a <_malloc_r+0x27a>
 8003734:	6868      	ldr	r0, [r5, #4]
 8003736:	0052      	lsls	r2, r2, #1
 8003738:	4282      	cmp	r2, r0
 800373a:	d809      	bhi.n	8003750 <_malloc_r+0x2b0>
 800373c:	b142      	cbz	r2, 8003750 <_malloc_r+0x2b0>
 800373e:	4663      	mov	r3, ip
 8003740:	4202      	tst	r2, r0
 8003742:	d1ae      	bne.n	80036a2 <_malloc_r+0x202>
 8003744:	3304      	adds	r3, #4
 8003746:	0052      	lsls	r2, r2, #1
 8003748:	e7fa      	b.n	8003740 <_malloc_r+0x2a0>
 800374a:	bf00      	nop
 800374c:	20000034 	.word	0x20000034
 8003750:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003754:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003758:	f026 0603 	bic.w	r6, r6, #3
 800375c:	42b4      	cmp	r4, r6
 800375e:	d803      	bhi.n	8003768 <_malloc_r+0x2c8>
 8003760:	1b33      	subs	r3, r6, r4
 8003762:	2b0f      	cmp	r3, #15
 8003764:	f300 809c 	bgt.w	80038a0 <_malloc_r+0x400>
 8003768:	4a56      	ldr	r2, [pc, #344]	; (80038c4 <_malloc_r+0x424>)
 800376a:	4957      	ldr	r1, [pc, #348]	; (80038c8 <_malloc_r+0x428>)
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	6808      	ldr	r0, [r1, #0]
 8003770:	9101      	str	r1, [sp, #4]
 8003772:	f102 0810 	add.w	r8, r2, #16
 8003776:	4a55      	ldr	r2, [pc, #340]	; (80038cc <_malloc_r+0x42c>)
 8003778:	9203      	str	r2, [sp, #12]
 800377a:	3001      	adds	r0, #1
 800377c:	bf18      	it	ne
 800377e:	f102 31ff 	addne.w	r1, r2, #4294967295
 8003782:	44a0      	add	r8, r4
 8003784:	bf1e      	ittt	ne
 8003786:	4488      	addne	r8, r1
 8003788:	4251      	negne	r1, r2
 800378a:	ea01 0808 	andne.w	r8, r1, r8
 800378e:	eb0b 0306 	add.w	r3, fp, r6
 8003792:	4641      	mov	r1, r8
 8003794:	4648      	mov	r0, r9
 8003796:	9302      	str	r3, [sp, #8]
 8003798:	f000 fb06 	bl	8003da8 <_sbrk_r>
 800379c:	1c42      	adds	r2, r0, #1
 800379e:	4607      	mov	r7, r0
 80037a0:	d06f      	beq.n	8003882 <_malloc_r+0x3e2>
 80037a2:	9b02      	ldr	r3, [sp, #8]
 80037a4:	9a03      	ldr	r2, [sp, #12]
 80037a6:	4283      	cmp	r3, r0
 80037a8:	d901      	bls.n	80037ae <_malloc_r+0x30e>
 80037aa:	45ab      	cmp	fp, r5
 80037ac:	d169      	bne.n	8003882 <_malloc_r+0x3e2>
 80037ae:	f8df a128 	ldr.w	sl, [pc, #296]	; 80038d8 <_malloc_r+0x438>
 80037b2:	f8df c128 	ldr.w	ip, [pc, #296]	; 80038dc <_malloc_r+0x43c>
 80037b6:	f8da 0000 	ldr.w	r0, [sl]
 80037ba:	42bb      	cmp	r3, r7
 80037bc:	4440      	add	r0, r8
 80037be:	f8ca 0000 	str.w	r0, [sl]
 80037c2:	d108      	bne.n	80037d6 <_malloc_r+0x336>
 80037c4:	ea13 0f0c 	tst.w	r3, ip
 80037c8:	d105      	bne.n	80037d6 <_malloc_r+0x336>
 80037ca:	68ab      	ldr	r3, [r5, #8]
 80037cc:	4446      	add	r6, r8
 80037ce:	f046 0601 	orr.w	r6, r6, #1
 80037d2:	605e      	str	r6, [r3, #4]
 80037d4:	e049      	b.n	800386a <_malloc_r+0x3ca>
 80037d6:	9901      	ldr	r1, [sp, #4]
 80037d8:	f8d1 e000 	ldr.w	lr, [r1]
 80037dc:	f1be 3fff 	cmp.w	lr, #4294967295
 80037e0:	bf15      	itete	ne
 80037e2:	1afb      	subne	r3, r7, r3
 80037e4:	4b38      	ldreq	r3, [pc, #224]	; (80038c8 <_malloc_r+0x428>)
 80037e6:	181b      	addne	r3, r3, r0
 80037e8:	601f      	streq	r7, [r3, #0]
 80037ea:	bf18      	it	ne
 80037ec:	f8ca 3000 	strne.w	r3, [sl]
 80037f0:	f017 0307 	ands.w	r3, r7, #7
 80037f4:	bf1c      	itt	ne
 80037f6:	f1c3 0308 	rsbne	r3, r3, #8
 80037fa:	18ff      	addne	r7, r7, r3
 80037fc:	44b8      	add	r8, r7
 80037fe:	441a      	add	r2, r3
 8003800:	ea08 080c 	and.w	r8, r8, ip
 8003804:	ebc8 0802 	rsb	r8, r8, r2
 8003808:	4641      	mov	r1, r8
 800380a:	4648      	mov	r0, r9
 800380c:	f000 facc 	bl	8003da8 <_sbrk_r>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	bf04      	itt	eq
 8003814:	4638      	moveq	r0, r7
 8003816:	f04f 0800 	moveq.w	r8, #0
 800381a:	f8da 3000 	ldr.w	r3, [sl]
 800381e:	60af      	str	r7, [r5, #8]
 8003820:	1bc2      	subs	r2, r0, r7
 8003822:	4442      	add	r2, r8
 8003824:	4443      	add	r3, r8
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	45ab      	cmp	fp, r5
 800382c:	f8ca 3000 	str.w	r3, [sl]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	d01a      	beq.n	800386a <_malloc_r+0x3ca>
 8003834:	2e0f      	cmp	r6, #15
 8003836:	d802      	bhi.n	800383e <_malloc_r+0x39e>
 8003838:	2301      	movs	r3, #1
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	e021      	b.n	8003882 <_malloc_r+0x3e2>
 800383e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003842:	3e0c      	subs	r6, #12
 8003844:	f026 0607 	bic.w	r6, r6, #7
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	4333      	orrs	r3, r6
 800384e:	f8cb 3004 	str.w	r3, [fp, #4]
 8003852:	eb0b 0306 	add.w	r3, fp, r6
 8003856:	2205      	movs	r2, #5
 8003858:	2e0f      	cmp	r6, #15
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	d904      	bls.n	800386a <_malloc_r+0x3ca>
 8003860:	f10b 0108 	add.w	r1, fp, #8
 8003864:	4648      	mov	r0, r9
 8003866:	f001 fbeb 	bl	8005040 <_free_r>
 800386a:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <_malloc_r+0x430>)
 800386c:	f8da 3000 	ldr.w	r3, [sl]
 8003870:	6811      	ldr	r1, [r2, #0]
 8003872:	428b      	cmp	r3, r1
 8003874:	bf88      	it	hi
 8003876:	6013      	strhi	r3, [r2, #0]
 8003878:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <_malloc_r+0x434>)
 800387a:	6811      	ldr	r1, [r2, #0]
 800387c:	428b      	cmp	r3, r1
 800387e:	bf88      	it	hi
 8003880:	6013      	strhi	r3, [r2, #0]
 8003882:	68ab      	ldr	r3, [r5, #8]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	f022 0203 	bic.w	r2, r2, #3
 800388a:	4294      	cmp	r4, r2
 800388c:	eba2 0304 	sub.w	r3, r2, r4
 8003890:	d801      	bhi.n	8003896 <_malloc_r+0x3f6>
 8003892:	2b0f      	cmp	r3, #15
 8003894:	dc04      	bgt.n	80038a0 <_malloc_r+0x400>
 8003896:	4648      	mov	r0, r9
 8003898:	f000 fa85 	bl	8003da6 <__malloc_unlock>
 800389c:	2600      	movs	r6, #0
 800389e:	e00c      	b.n	80038ba <_malloc_r+0x41a>
 80038a0:	68ae      	ldr	r6, [r5, #8]
 80038a2:	f044 0201 	orr.w	r2, r4, #1
 80038a6:	4434      	add	r4, r6
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	6072      	str	r2, [r6, #4]
 80038ae:	60ac      	str	r4, [r5, #8]
 80038b0:	6063      	str	r3, [r4, #4]
 80038b2:	4648      	mov	r0, r9
 80038b4:	f000 fa77 	bl	8003da6 <__malloc_unlock>
 80038b8:	3608      	adds	r6, #8
 80038ba:	4630      	mov	r0, r6
 80038bc:	b005      	add	sp, #20
 80038be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c2:	bf00      	nop
 80038c4:	20000648 	.word	0x20000648
 80038c8:	20000440 	.word	0x20000440
 80038cc:	00000080 	.word	0x00000080
 80038d0:	20000644 	.word	0x20000644
 80038d4:	20000640 	.word	0x20000640
 80038d8:	2000064c 	.word	0x2000064c
 80038dc:	0000007f 	.word	0x0000007f

080038e0 <memcpy>:
 80038e0:	b510      	push	{r4, lr}
 80038e2:	1e43      	subs	r3, r0, #1
 80038e4:	440a      	add	r2, r1
 80038e6:	4291      	cmp	r1, r2
 80038e8:	d004      	beq.n	80038f4 <memcpy+0x14>
 80038ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038f2:	e7f8      	b.n	80038e6 <memcpy+0x6>
 80038f4:	bd10      	pop	{r4, pc}

080038f6 <memset>:
 80038f6:	4402      	add	r2, r0
 80038f8:	4603      	mov	r3, r0
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d002      	beq.n	8003904 <memset+0xe>
 80038fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003902:	e7fa      	b.n	80038fa <memset+0x4>
 8003904:	4770      	bx	lr
	...

08003908 <validate_structure>:
 8003908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800390a:	6801      	ldr	r1, [r0, #0]
 800390c:	293b      	cmp	r1, #59	; 0x3b
 800390e:	4604      	mov	r4, r0
 8003910:	d911      	bls.n	8003936 <validate_structure+0x2e>
 8003912:	223c      	movs	r2, #60	; 0x3c
 8003914:	4668      	mov	r0, sp
 8003916:	f001 fb29 	bl	8004f6c <div>
 800391a:	9a01      	ldr	r2, [sp, #4]
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	9900      	ldr	r1, [sp, #0]
 8003920:	2a00      	cmp	r2, #0
 8003922:	440b      	add	r3, r1
 8003924:	6063      	str	r3, [r4, #4]
 8003926:	bfbb      	ittet	lt
 8003928:	323c      	addlt	r2, #60	; 0x3c
 800392a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800392e:	6022      	strge	r2, [r4, #0]
 8003930:	6022      	strlt	r2, [r4, #0]
 8003932:	bfb8      	it	lt
 8003934:	6063      	strlt	r3, [r4, #4]
 8003936:	6861      	ldr	r1, [r4, #4]
 8003938:	293b      	cmp	r1, #59	; 0x3b
 800393a:	d911      	bls.n	8003960 <validate_structure+0x58>
 800393c:	223c      	movs	r2, #60	; 0x3c
 800393e:	4668      	mov	r0, sp
 8003940:	f001 fb14 	bl	8004f6c <div>
 8003944:	9a01      	ldr	r2, [sp, #4]
 8003946:	68a1      	ldr	r1, [r4, #8]
 8003948:	9b00      	ldr	r3, [sp, #0]
 800394a:	2a00      	cmp	r2, #0
 800394c:	440b      	add	r3, r1
 800394e:	60a3      	str	r3, [r4, #8]
 8003950:	bfbb      	ittet	lt
 8003952:	323c      	addlt	r2, #60	; 0x3c
 8003954:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8003958:	6062      	strge	r2, [r4, #4]
 800395a:	6062      	strlt	r2, [r4, #4]
 800395c:	bfb8      	it	lt
 800395e:	60a3      	strlt	r3, [r4, #8]
 8003960:	68a1      	ldr	r1, [r4, #8]
 8003962:	2917      	cmp	r1, #23
 8003964:	d911      	bls.n	800398a <validate_structure+0x82>
 8003966:	2218      	movs	r2, #24
 8003968:	4668      	mov	r0, sp
 800396a:	f001 faff 	bl	8004f6c <div>
 800396e:	9a01      	ldr	r2, [sp, #4]
 8003970:	68e1      	ldr	r1, [r4, #12]
 8003972:	9b00      	ldr	r3, [sp, #0]
 8003974:	2a00      	cmp	r2, #0
 8003976:	440b      	add	r3, r1
 8003978:	60e3      	str	r3, [r4, #12]
 800397a:	bfbb      	ittet	lt
 800397c:	3218      	addlt	r2, #24
 800397e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8003982:	60a2      	strge	r2, [r4, #8]
 8003984:	60a2      	strlt	r2, [r4, #8]
 8003986:	bfb8      	it	lt
 8003988:	60e3      	strlt	r3, [r4, #12]
 800398a:	6921      	ldr	r1, [r4, #16]
 800398c:	290b      	cmp	r1, #11
 800398e:	d911      	bls.n	80039b4 <validate_structure+0xac>
 8003990:	220c      	movs	r2, #12
 8003992:	4668      	mov	r0, sp
 8003994:	f001 faea 	bl	8004f6c <div>
 8003998:	9a01      	ldr	r2, [sp, #4]
 800399a:	6961      	ldr	r1, [r4, #20]
 800399c:	9b00      	ldr	r3, [sp, #0]
 800399e:	2a00      	cmp	r2, #0
 80039a0:	440b      	add	r3, r1
 80039a2:	6163      	str	r3, [r4, #20]
 80039a4:	bfbb      	ittet	lt
 80039a6:	320c      	addlt	r2, #12
 80039a8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80039ac:	6122      	strge	r2, [r4, #16]
 80039ae:	6122      	strlt	r2, [r4, #16]
 80039b0:	bfb8      	it	lt
 80039b2:	6163      	strlt	r3, [r4, #20]
 80039b4:	6963      	ldr	r3, [r4, #20]
 80039b6:	0799      	lsls	r1, r3, #30
 80039b8:	d112      	bne.n	80039e0 <validate_structure+0xd8>
 80039ba:	2164      	movs	r1, #100	; 0x64
 80039bc:	fb93 f2f1 	sdiv	r2, r3, r1
 80039c0:	fb01 3212 	mls	r2, r1, r2, r3
 80039c4:	b972      	cbnz	r2, 80039e4 <validate_structure+0xdc>
 80039c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80039ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80039ce:	fb93 f2f1 	sdiv	r2, r3, r1
 80039d2:	fb01 3312 	mls	r3, r1, r2, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf14      	ite	ne
 80039da:	231c      	movne	r3, #28
 80039dc:	231d      	moveq	r3, #29
 80039de:	e002      	b.n	80039e6 <validate_structure+0xde>
 80039e0:	231c      	movs	r3, #28
 80039e2:	e000      	b.n	80039e6 <validate_structure+0xde>
 80039e4:	231d      	movs	r3, #29
 80039e6:	68e2      	ldr	r2, [r4, #12]
 80039e8:	2a00      	cmp	r2, #0
 80039ea:	dd06      	ble.n	80039fa <validate_structure+0xf2>
 80039ec:	4f33      	ldr	r7, [pc, #204]	; (8003abc <validate_structure+0x1b4>)
 80039ee:	f04f 0e00 	mov.w	lr, #0
 80039f2:	2564      	movs	r5, #100	; 0x64
 80039f4:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80039f8:	e039      	b.n	8003a6e <validate_structure+0x166>
 80039fa:	4f30      	ldr	r7, [pc, #192]	; (8003abc <validate_structure+0x1b4>)
 80039fc:	260b      	movs	r6, #11
 80039fe:	2064      	movs	r0, #100	; 0x64
 8003a00:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8003a04:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8003a08:	f1be 0f00 	cmp.w	lr, #0
 8003a0c:	dc53      	bgt.n	8003ab6 <validate_structure+0x1ae>
 8003a0e:	6921      	ldr	r1, [r4, #16]
 8003a10:	3901      	subs	r1, #1
 8003a12:	6121      	str	r1, [r4, #16]
 8003a14:	3101      	adds	r1, #1
 8003a16:	d118      	bne.n	8003a4a <validate_structure+0x142>
 8003a18:	6963      	ldr	r3, [r4, #20]
 8003a1a:	6126      	str	r6, [r4, #16]
 8003a1c:	1e59      	subs	r1, r3, #1
 8003a1e:	078a      	lsls	r2, r1, #30
 8003a20:	6161      	str	r1, [r4, #20]
 8003a22:	d10f      	bne.n	8003a44 <validate_structure+0x13c>
 8003a24:	fb91 f2f0 	sdiv	r2, r1, r0
 8003a28:	fb00 1112 	mls	r1, r0, r2, r1
 8003a2c:	b961      	cbnz	r1, 8003a48 <validate_structure+0x140>
 8003a2e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8003a32:	fb93 f2f5 	sdiv	r2, r3, r5
 8003a36:	fb05 3312 	mls	r3, r5, r2, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	231c      	movne	r3, #28
 8003a40:	231d      	moveq	r3, #29
 8003a42:	e002      	b.n	8003a4a <validate_structure+0x142>
 8003a44:	231c      	movs	r3, #28
 8003a46:	e000      	b.n	8003a4a <validate_structure+0x142>
 8003a48:	231d      	movs	r3, #29
 8003a4a:	6922      	ldr	r2, [r4, #16]
 8003a4c:	2a01      	cmp	r2, #1
 8003a4e:	bf14      	ite	ne
 8003a50:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8003a54:	461a      	moveq	r2, r3
 8003a56:	4472      	add	r2, lr
 8003a58:	60e2      	str	r2, [r4, #12]
 8003a5a:	e7d3      	b.n	8003a04 <validate_structure+0xfc>
 8003a5c:	428b      	cmp	r3, r1
 8003a5e:	da2a      	bge.n	8003ab6 <validate_structure+0x1ae>
 8003a60:	4618      	mov	r0, r3
 8003a62:	3201      	adds	r2, #1
 8003a64:	1a09      	subs	r1, r1, r0
 8003a66:	2a0c      	cmp	r2, #12
 8003a68:	60e1      	str	r1, [r4, #12]
 8003a6a:	6122      	str	r2, [r4, #16]
 8003a6c:	d008      	beq.n	8003a80 <validate_structure+0x178>
 8003a6e:	6922      	ldr	r2, [r4, #16]
 8003a70:	68e1      	ldr	r1, [r4, #12]
 8003a72:	2a01      	cmp	r2, #1
 8003a74:	d0f2      	beq.n	8003a5c <validate_structure+0x154>
 8003a76:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8003a7a:	4281      	cmp	r1, r0
 8003a7c:	dcf1      	bgt.n	8003a62 <validate_structure+0x15a>
 8003a7e:	e01a      	b.n	8003ab6 <validate_structure+0x1ae>
 8003a80:	6963      	ldr	r3, [r4, #20]
 8003a82:	f8c4 e010 	str.w	lr, [r4, #16]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	0791      	lsls	r1, r2, #30
 8003a8a:	6162      	str	r2, [r4, #20]
 8003a8c:	d10f      	bne.n	8003aae <validate_structure+0x1a6>
 8003a8e:	fb92 f1f5 	sdiv	r1, r2, r5
 8003a92:	fb05 2211 	mls	r2, r5, r1, r2
 8003a96:	b962      	cbnz	r2, 8003ab2 <validate_structure+0x1aa>
 8003a98:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8003a9c:	fb93 f2f6 	sdiv	r2, r3, r6
 8003aa0:	fb06 3312 	mls	r3, r6, r2, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	231c      	movne	r3, #28
 8003aaa:	231d      	moveq	r3, #29
 8003aac:	e7df      	b.n	8003a6e <validate_structure+0x166>
 8003aae:	231c      	movs	r3, #28
 8003ab0:	e7dd      	b.n	8003a6e <validate_structure+0x166>
 8003ab2:	231d      	movs	r3, #29
 8003ab4:	e7db      	b.n	8003a6e <validate_structure+0x166>
 8003ab6:	b003      	add	sp, #12
 8003ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aba:	bf00      	nop
 8003abc:	080075dc 	.word	0x080075dc

08003ac0 <mktime>:
 8003ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac4:	4605      	mov	r5, r0
 8003ac6:	f001 feed 	bl	80058a4 <__gettzinfo>
 8003aca:	4681      	mov	r9, r0
 8003acc:	4628      	mov	r0, r5
 8003ace:	f7ff ff1b 	bl	8003908 <validate_structure>
 8003ad2:	e895 000c 	ldmia.w	r5, {r2, r3}
 8003ad6:	213c      	movs	r1, #60	; 0x3c
 8003ad8:	fb01 2303 	mla	r3, r1, r3, r2
 8003adc:	68aa      	ldr	r2, [r5, #8]
 8003ade:	68ec      	ldr	r4, [r5, #12]
 8003ae0:	f44f 6861 	mov.w	r8, #3600	; 0xe10
 8003ae4:	fb08 3102 	mla	r1, r8, r2, r3
 8003ae8:	692b      	ldr	r3, [r5, #16]
 8003aea:	4aab      	ldr	r2, [pc, #684]	; (8003d98 <mktime+0x2d8>)
 8003aec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003af0:	3c01      	subs	r4, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	4414      	add	r4, r2
 8003af6:	696b      	ldr	r3, [r5, #20]
 8003af8:	dd11      	ble.n	8003b1e <mktime+0x5e>
 8003afa:	079e      	lsls	r6, r3, #30
 8003afc:	d10f      	bne.n	8003b1e <mktime+0x5e>
 8003afe:	2064      	movs	r0, #100	; 0x64
 8003b00:	fb93 f2f0 	sdiv	r2, r3, r0
 8003b04:	fb00 3212 	mls	r2, r0, r2, r3
 8003b08:	b942      	cbnz	r2, 8003b1c <mktime+0x5c>
 8003b0a:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8003b0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003b12:	fb96 f0f2 	sdiv	r0, r6, r2
 8003b16:	fb02 6210 	mls	r2, r2, r0, r6
 8003b1a:	b902      	cbnz	r2, 8003b1e <mktime+0x5e>
 8003b1c:	3401      	adds	r4, #1
 8003b1e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8003b22:	3210      	adds	r2, #16
 8003b24:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003b28:	4282      	cmp	r2, r0
 8003b2a:	61ec      	str	r4, [r5, #28]
 8003b2c:	461f      	mov	r7, r3
 8003b2e:	f200 812e 	bhi.w	8003d8e <mktime+0x2ce>
 8003b32:	2b46      	cmp	r3, #70	; 0x46
 8003b34:	dd22      	ble.n	8003b7c <mktime+0xbc>
 8003b36:	2246      	movs	r2, #70	; 0x46
 8003b38:	f240 1c6d 	movw	ip, #365	; 0x16d
 8003b3c:	2664      	movs	r6, #100	; 0x64
 8003b3e:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8003b42:	0790      	lsls	r0, r2, #30
 8003b44:	d110      	bne.n	8003b68 <mktime+0xa8>
 8003b46:	fb92 f0f6 	sdiv	r0, r2, r6
 8003b4a:	fb06 2010 	mls	r0, r6, r0, r2
 8003b4e:	b970      	cbnz	r0, 8003b6e <mktime+0xae>
 8003b50:	f202 786c 	addw	r8, r2, #1900	; 0x76c
 8003b54:	fb98 f0fe 	sdiv	r0, r8, lr
 8003b58:	fb0e 8010 	mls	r0, lr, r0, r8
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	4660      	movne	r0, ip
 8003b62:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
 8003b66:	e004      	b.n	8003b72 <mktime+0xb2>
 8003b68:	f240 106d 	movw	r0, #365	; 0x16d
 8003b6c:	e001      	b.n	8003b72 <mktime+0xb2>
 8003b6e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 8003b72:	3201      	adds	r2, #1
 8003b74:	4293      	cmp	r3, r2
 8003b76:	4404      	add	r4, r0
 8003b78:	d1e3      	bne.n	8003b42 <mktime+0x82>
 8003b7a:	e044      	b.n	8003c06 <mktime+0x146>
 8003b7c:	d043      	beq.n	8003c06 <mktime+0x146>
 8003b7e:	2245      	movs	r2, #69	; 0x45
 8003b80:	f240 1e6d 	movw	lr, #365	; 0x16d
 8003b84:	2664      	movs	r6, #100	; 0x64
 8003b86:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	dd1a      	ble.n	8003bc4 <mktime+0x104>
 8003b8e:	0790      	lsls	r0, r2, #30
 8003b90:	d110      	bne.n	8003bb4 <mktime+0xf4>
 8003b92:	fb92 f0f6 	sdiv	r0, r2, r6
 8003b96:	fb06 2010 	mls	r0, r6, r0, r2
 8003b9a:	b970      	cbnz	r0, 8003bba <mktime+0xfa>
 8003b9c:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
 8003ba0:	fb9c f0f7 	sdiv	r0, ip, r7
 8003ba4:	fb07 c010 	mls	r0, r7, r0, ip
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	bf14      	ite	ne
 8003bac:	4670      	movne	r0, lr
 8003bae:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
 8003bb2:	e004      	b.n	8003bbe <mktime+0xfe>
 8003bb4:	f240 106d 	movw	r0, #365	; 0x16d
 8003bb8:	e001      	b.n	8003bbe <mktime+0xfe>
 8003bba:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 8003bbe:	1a24      	subs	r4, r4, r0
 8003bc0:	3a01      	subs	r2, #1
 8003bc2:	e7e2      	b.n	8003b8a <mktime+0xca>
 8003bc4:	2b45      	cmp	r3, #69	; 0x45
 8003bc6:	bfa8      	it	ge
 8003bc8:	2345      	movge	r3, #69	; 0x45
 8003bca:	079e      	lsls	r6, r3, #30
 8003bcc:	461f      	mov	r7, r3
 8003bce:	d114      	bne.n	8003bfa <mktime+0x13a>
 8003bd0:	2264      	movs	r2, #100	; 0x64
 8003bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bd6:	fb02 7313 	mls	r3, r2, r3, r7
 8003bda:	b98b      	cbnz	r3, 8003c00 <mktime+0x140>
 8003bdc:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 8003be0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003be4:	fb90 f2f3 	sdiv	r2, r0, r3
 8003be8:	fb03 0312 	mls	r3, r3, r2, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f240 136d 	movw	r3, #365	; 0x16d
 8003bf2:	bf08      	it	eq
 8003bf4:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8003bf8:	e004      	b.n	8003c04 <mktime+0x144>
 8003bfa:	f240 136d 	movw	r3, #365	; 0x16d
 8003bfe:	e001      	b.n	8003c04 <mktime+0x144>
 8003c00:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8003c04:	1ae4      	subs	r4, r4, r3
 8003c06:	4865      	ldr	r0, [pc, #404]	; (8003d9c <mktime+0x2dc>)
 8003c08:	fb00 1804 	mla	r8, r0, r4, r1
 8003c0c:	f001 f826 	bl	8004c5c <__tz_lock>
 8003c10:	f001 f826 	bl	8004c60 <_tzset_unlocked>
 8003c14:	4b62      	ldr	r3, [pc, #392]	; (8003da0 <mktime+0x2e0>)
 8003c16:	681e      	ldr	r6, [r3, #0]
 8003c18:	2e00      	cmp	r6, #0
 8003c1a:	f000 80a4 	beq.w	8003d66 <mktime+0x2a6>
 8003c1e:	6a2b      	ldr	r3, [r5, #32]
 8003c20:	6968      	ldr	r0, [r5, #20]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	bfa8      	it	ge
 8003c26:	2301      	movge	r3, #1
 8003c28:	469a      	mov	sl, r3
 8003c2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c2e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8003c32:	4298      	cmp	r0, r3
 8003c34:	d10d      	bne.n	8003c52 <mktime+0x192>
 8003c36:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8003c3a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8003c3e:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8003c42:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8003c46:	1ad6      	subs	r6, r2, r3
 8003c48:	45b0      	cmp	r8, r6
 8003c4a:	eba1 0100 	sub.w	r1, r1, r0
 8003c4e:	da05      	bge.n	8003c5c <mktime+0x19c>
 8003c50:	e007      	b.n	8003c62 <mktime+0x1a2>
 8003c52:	f000 ff5b 	bl	8004b0c <__tzcalc_limits>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d1ed      	bne.n	8003c36 <mktime+0x176>
 8003c5a:	e076      	b.n	8003d4a <mktime+0x28a>
 8003c5c:	1a12      	subs	r2, r2, r0
 8003c5e:	4590      	cmp	r8, r2
 8003c60:	db73      	blt.n	8003d4a <mktime+0x28a>
 8003c62:	f8d9 2000 	ldr.w	r2, [r9]
 8003c66:	b112      	cbz	r2, 8003c6e <mktime+0x1ae>
 8003c68:	4588      	cmp	r8, r1
 8003c6a:	db77      	blt.n	8003d5c <mktime+0x29c>
 8003c6c:	e001      	b.n	8003c72 <mktime+0x1b2>
 8003c6e:	4588      	cmp	r8, r1
 8003c70:	da07      	bge.n	8003c82 <mktime+0x1c2>
 8003c72:	45b0      	cmp	r8, r6
 8003c74:	bfac      	ite	ge
 8003c76:	2600      	movge	r6, #0
 8003c78:	2601      	movlt	r6, #1
 8003c7a:	f1ba 0f00 	cmp.w	sl, #0
 8003c7e:	da04      	bge.n	8003c8a <mktime+0x1ca>
 8003c80:	e064      	b.n	8003d4c <mktime+0x28c>
 8003c82:	f1ba 0f00 	cmp.w	sl, #0
 8003c86:	db63      	blt.n	8003d50 <mktime+0x290>
 8003c88:	2601      	movs	r6, #1
 8003c8a:	ea8a 0a06 	eor.w	sl, sl, r6
 8003c8e:	f1ba 0f01 	cmp.w	sl, #1
 8003c92:	d15b      	bne.n	8003d4c <mktime+0x28c>
 8003c94:	1a1b      	subs	r3, r3, r0
 8003c96:	b906      	cbnz	r6, 8003c9a <mktime+0x1da>
 8003c98:	425b      	negs	r3, r3
 8003c9a:	682a      	ldr	r2, [r5, #0]
 8003c9c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	602a      	str	r2, [r5, #0]
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	4498      	add	r8, r3
 8003ca8:	f7ff fe2e 	bl	8003908 <validate_structure>
 8003cac:	68eb      	ldr	r3, [r5, #12]
 8003cae:	ebb3 030a 	subs.w	r3, r3, sl
 8003cb2:	d04b      	beq.n	8003d4c <mktime+0x28c>
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	dc03      	bgt.n	8003cc0 <mktime+0x200>
 8003cb8:	1c98      	adds	r0, r3, #2
 8003cba:	bfd8      	it	le
 8003cbc:	2301      	movle	r3, #1
 8003cbe:	e001      	b.n	8003cc4 <mktime+0x204>
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	69ea      	ldr	r2, [r5, #28]
 8003cc6:	441c      	add	r4, r3
 8003cc8:	189b      	adds	r3, r3, r2
 8003cca:	d51d      	bpl.n	8003d08 <mktime+0x248>
 8003ccc:	1e7b      	subs	r3, r7, #1
 8003cce:	0799      	lsls	r1, r3, #30
 8003cd0:	d114      	bne.n	8003cfc <mktime+0x23c>
 8003cd2:	2164      	movs	r1, #100	; 0x64
 8003cd4:	fb93 f2f1 	sdiv	r2, r3, r1
 8003cd8:	fb01 3312 	mls	r3, r1, r2, r3
 8003cdc:	b98b      	cbnz	r3, 8003d02 <mktime+0x242>
 8003cde:	f207 776b 	addw	r7, r7, #1899	; 0x76b
 8003ce2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003ce6:	fb97 f3f2 	sdiv	r3, r7, r2
 8003cea:	fb02 7713 	mls	r7, r2, r3, r7
 8003cee:	2f00      	cmp	r7, #0
 8003cf0:	f240 136d 	movw	r3, #365	; 0x16d
 8003cf4:	bf18      	it	ne
 8003cf6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8003cfa:	e024      	b.n	8003d46 <mktime+0x286>
 8003cfc:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8003d00:	e021      	b.n	8003d46 <mktime+0x286>
 8003d02:	f240 136d 	movw	r3, #365	; 0x16d
 8003d06:	e01e      	b.n	8003d46 <mktime+0x286>
 8003d08:	07ba      	lsls	r2, r7, #30
 8003d0a:	d114      	bne.n	8003d36 <mktime+0x276>
 8003d0c:	2164      	movs	r1, #100	; 0x64
 8003d0e:	fb97 f2f1 	sdiv	r2, r7, r1
 8003d12:	fb01 7212 	mls	r2, r1, r2, r7
 8003d16:	b98a      	cbnz	r2, 8003d3c <mktime+0x27c>
 8003d18:	f207 776c 	addw	r7, r7, #1900	; 0x76c
 8003d1c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003d20:	fb97 f2f1 	sdiv	r2, r7, r1
 8003d24:	fb01 7712 	mls	r7, r1, r2, r7
 8003d28:	2f00      	cmp	r7, #0
 8003d2a:	f240 126d 	movw	r2, #365	; 0x16d
 8003d2e:	bf08      	it	eq
 8003d30:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8003d34:	e004      	b.n	8003d40 <mktime+0x280>
 8003d36:	f240 126d 	movw	r2, #365	; 0x16d
 8003d3a:	e001      	b.n	8003d40 <mktime+0x280>
 8003d3c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8003d40:	429a      	cmp	r2, r3
 8003d42:	bfd8      	it	le
 8003d44:	1a9b      	suble	r3, r3, r2
 8003d46:	61eb      	str	r3, [r5, #28]
 8003d48:	e000      	b.n	8003d4c <mktime+0x28c>
 8003d4a:	4656      	mov	r6, sl
 8003d4c:	2e01      	cmp	r6, #1
 8003d4e:	d10a      	bne.n	8003d66 <mktime+0x2a6>
 8003d50:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8003d54:	2601      	movs	r6, #1
 8003d56:	eb08 0700 	add.w	r7, r8, r0
 8003d5a:	e008      	b.n	8003d6e <mktime+0x2ae>
 8003d5c:	f1ba 0f00 	cmp.w	sl, #0
 8003d60:	f04f 0600 	mov.w	r6, #0
 8003d64:	da91      	bge.n	8003c8a <mktime+0x1ca>
 8003d66:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8003d6a:	eb08 0700 	add.w	r7, r8, r0
 8003d6e:	f000 ff76 	bl	8004c5e <__tz_unlock>
 8003d72:	3404      	adds	r4, #4
 8003d74:	2307      	movs	r3, #7
 8003d76:	fb94 f3f3 	sdiv	r3, r4, r3
 8003d7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003d7e:	1ae4      	subs	r4, r4, r3
 8003d80:	bf48      	it	mi
 8003d82:	3407      	addmi	r4, #7
 8003d84:	622e      	str	r6, [r5, #32]
 8003d86:	61ac      	str	r4, [r5, #24]
 8003d88:	4638      	mov	r0, r7
 8003d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d96:	bf00      	nop
 8003d98:	080075ac 	.word	0x080075ac
 8003d9c:	00015180 	.word	0x00015180
 8003da0:	20000690 	.word	0x20000690

08003da4 <__malloc_lock>:
 8003da4:	4770      	bx	lr

08003da6 <__malloc_unlock>:
 8003da6:	4770      	bx	lr

08003da8 <_sbrk_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4c06      	ldr	r4, [pc, #24]	; (8003dc4 <_sbrk_r+0x1c>)
 8003dac:	2300      	movs	r3, #0
 8003dae:	4605      	mov	r5, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	f003 fbae 	bl	8007514 <_sbrk>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_sbrk_r+0x1a>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_sbrk_r+0x1a>
 8003dc0:	602b      	str	r3, [r5, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	200022a8 	.word	0x200022a8

08003dc8 <sulp>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4604      	mov	r4, r0
 8003dcc:	460d      	mov	r5, r1
 8003dce:	ec45 4b10 	vmov	d0, r4, r5
 8003dd2:	4616      	mov	r6, r2
 8003dd4:	f002 f8d6 	bl	8005f84 <__ulp>
 8003dd8:	ec51 0b10 	vmov	r0, r1, d0
 8003ddc:	b17e      	cbz	r6, 8003dfe <sulp+0x36>
 8003dde:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003de2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	dd09      	ble.n	8003dfe <sulp+0x36>
 8003dea:	051b      	lsls	r3, r3, #20
 8003dec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003df0:	2400      	movs	r4, #0
 8003df2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003df6:	4622      	mov	r2, r4
 8003df8:	462b      	mov	r3, r5
 8003dfa:	f7fc fbaf 	bl	800055c <__aeabi_dmul>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}

08003e00 <_strtod_r>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	b09d      	sub	sp, #116	; 0x74
 8003e06:	2300      	movs	r3, #0
 8003e08:	9002      	str	r0, [sp, #8]
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8003e0e:	9318      	str	r3, [sp, #96]	; 0x60
 8003e10:	f04f 0a00 	mov.w	sl, #0
 8003e14:	f04f 0b00 	mov.w	fp, #0
 8003e18:	9117      	str	r1, [sp, #92]	; 0x5c
 8003e1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	2a0d      	cmp	r2, #13
 8003e20:	d805      	bhi.n	8003e2e <_strtod_r+0x2e>
 8003e22:	2a09      	cmp	r2, #9
 8003e24:	d213      	bcs.n	8003e4e <_strtod_r+0x4e>
 8003e26:	2a00      	cmp	r2, #0
 8003e28:	f000 81ac 	beq.w	8004184 <_strtod_r+0x384>
 8003e2c:	e012      	b.n	8003e54 <_strtod_r+0x54>
 8003e2e:	2a2b      	cmp	r2, #43	; 0x2b
 8003e30:	d004      	beq.n	8003e3c <_strtod_r+0x3c>
 8003e32:	2a2d      	cmp	r2, #45	; 0x2d
 8003e34:	d004      	beq.n	8003e40 <_strtod_r+0x40>
 8003e36:	2a20      	cmp	r2, #32
 8003e38:	d10c      	bne.n	8003e54 <_strtod_r+0x54>
 8003e3a:	e008      	b.n	8003e4e <_strtod_r+0x4e>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	e000      	b.n	8003e42 <_strtod_r+0x42>
 8003e40:	2201      	movs	r2, #1
 8003e42:	920c      	str	r2, [sp, #48]	; 0x30
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	9217      	str	r2, [sp, #92]	; 0x5c
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	b92b      	cbnz	r3, 8003e58 <_strtod_r+0x58>
 8003e4c:	e19a      	b.n	8004184 <_strtod_r+0x384>
 8003e4e:	3301      	adds	r3, #1
 8003e50:	9317      	str	r3, [sp, #92]	; 0x5c
 8003e52:	e7e2      	b.n	8003e1a <_strtod_r+0x1a>
 8003e54:	2300      	movs	r3, #0
 8003e56:	930c      	str	r3, [sp, #48]	; 0x30
 8003e58:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003e5a:	782b      	ldrb	r3, [r5, #0]
 8003e5c:	2b30      	cmp	r3, #48	; 0x30
 8003e5e:	d15c      	bne.n	8003f1a <_strtod_r+0x11a>
 8003e60:	786b      	ldrb	r3, [r5, #1]
 8003e62:	2b58      	cmp	r3, #88	; 0x58
 8003e64:	d001      	beq.n	8003e6a <_strtod_r+0x6a>
 8003e66:	2b78      	cmp	r3, #120	; 0x78
 8003e68:	d14c      	bne.n	8003f04 <_strtod_r+0x104>
 8003e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	ab18      	add	r3, sp, #96	; 0x60
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	4aa9      	ldr	r2, [pc, #676]	; (8004118 <_strtod_r+0x318>)
 8003e74:	9802      	ldr	r0, [sp, #8]
 8003e76:	ab19      	add	r3, sp, #100	; 0x64
 8003e78:	a917      	add	r1, sp, #92	; 0x5c
 8003e7a:	f001 f9ea 	bl	8005252 <__gethex>
 8003e7e:	f010 0607 	ands.w	r6, r0, #7
 8003e82:	4604      	mov	r4, r0
 8003e84:	f000 8587 	beq.w	8004996 <_strtod_r+0xb96>
 8003e88:	2e06      	cmp	r6, #6
 8003e8a:	d105      	bne.n	8003e98 <_strtod_r+0x98>
 8003e8c:	3501      	adds	r5, #1
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9517      	str	r5, [sp, #92]	; 0x5c
 8003e92:	930c      	str	r3, [sp, #48]	; 0x30
 8003e94:	f000 bd7f 	b.w	8004996 <_strtod_r+0xb96>
 8003e98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003e9a:	b13a      	cbz	r2, 8003eac <_strtod_r+0xac>
 8003e9c:	2135      	movs	r1, #53	; 0x35
 8003e9e:	a81a      	add	r0, sp, #104	; 0x68
 8003ea0:	f002 f95d 	bl	800615e <__copybits>
 8003ea4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003ea6:	9802      	ldr	r0, [sp, #8]
 8003ea8:	f001 fddb 	bl	8005a62 <_Bfree>
 8003eac:	2e06      	cmp	r6, #6
 8003eae:	d822      	bhi.n	8003ef6 <_strtod_r+0xf6>
 8003eb0:	e8df f006 	tbb	[pc, r6]
 8003eb4:	18080d04 	.word	0x18080d04
 8003eb8:	0d1d      	.short	0x0d1d
 8003eba:	04          	.byte	0x04
 8003ebb:	00          	.byte	0x00
 8003ebc:	f04f 0b00 	mov.w	fp, #0
 8003ec0:	46da      	mov	sl, fp
 8003ec2:	e018      	b.n	8003ef6 <_strtod_r+0xf6>
 8003ec4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8003ec8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8003ecc:	e013      	b.n	8003ef6 <_strtod_r+0xf6>
 8003ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ed0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003ed2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8003ed6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003eda:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003ede:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003ee2:	e008      	b.n	8003ef6 <_strtod_r+0xf6>
 8003ee4:	f8df b234 	ldr.w	fp, [pc, #564]	; 800411c <_strtod_r+0x31c>
 8003ee8:	f04f 0a00 	mov.w	sl, #0
 8003eec:	e003      	b.n	8003ef6 <_strtod_r+0xf6>
 8003eee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003ef2:	f04f 3aff 	mov.w	sl, #4294967295
 8003ef6:	0721      	lsls	r1, r4, #28
 8003ef8:	f140 854d 	bpl.w	8004996 <_strtod_r+0xb96>
 8003efc:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003f00:	f000 bd49 	b.w	8004996 <_strtod_r+0xb96>
 8003f04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	9217      	str	r2, [sp, #92]	; 0x5c
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	2b30      	cmp	r3, #48	; 0x30
 8003f0e:	d0f9      	beq.n	8003f04 <_strtod_r+0x104>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8540 	beq.w	8004996 <_strtod_r+0xb96>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <_strtod_r+0x11c>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f04f 0800 	mov.w	r8, #0
 8003f20:	9306      	str	r3, [sp, #24]
 8003f22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f24:	9307      	str	r3, [sp, #28]
 8003f26:	f8cd 8014 	str.w	r8, [sp, #20]
 8003f2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8003f2e:	220a      	movs	r2, #10
 8003f30:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003f32:	782e      	ldrb	r6, [r5, #0]
 8003f34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003f38:	b2d9      	uxtb	r1, r3
 8003f3a:	2909      	cmp	r1, #9
 8003f3c:	d80e      	bhi.n	8003f5c <_strtod_r+0x15c>
 8003f3e:	9904      	ldr	r1, [sp, #16]
 8003f40:	2908      	cmp	r1, #8
 8003f42:	bfdd      	ittte	le
 8003f44:	9905      	ldrle	r1, [sp, #20]
 8003f46:	fb02 3301 	mlale	r3, r2, r1, r3
 8003f4a:	9305      	strle	r3, [sp, #20]
 8003f4c:	fb02 3808 	mlagt	r8, r2, r8, r3
 8003f50:	9b04      	ldr	r3, [sp, #16]
 8003f52:	3501      	adds	r5, #1
 8003f54:	3301      	adds	r3, #1
 8003f56:	9304      	str	r3, [sp, #16]
 8003f58:	9517      	str	r5, [sp, #92]	; 0x5c
 8003f5a:	e7e9      	b.n	8003f30 <_strtod_r+0x130>
 8003f5c:	9802      	ldr	r0, [sp, #8]
 8003f5e:	f001 fd47 	bl	80059f0 <_localeconv_r>
 8003f62:	6807      	ldr	r7, [r0, #0]
 8003f64:	9802      	ldr	r0, [sp, #8]
 8003f66:	f001 fd43 	bl	80059f0 <_localeconv_r>
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	f7fc f936 	bl	80001dc <strlen>
 8003f70:	4639      	mov	r1, r7
 8003f72:	4602      	mov	r2, r0
 8003f74:	4628      	mov	r0, r5
 8003f76:	f002 f963 	bl	8006240 <strncmp>
 8003f7a:	4607      	mov	r7, r0
 8003f7c:	b128      	cbz	r0, 8003f8a <_strtod_r+0x18a>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	4633      	mov	r3, r6
 8003f82:	9d04      	ldr	r5, [sp, #16]
 8003f84:	4602      	mov	r2, r0
 8003f86:	4601      	mov	r1, r0
 8003f88:	e057      	b.n	800403a <_strtod_r+0x23a>
 8003f8a:	9802      	ldr	r0, [sp, #8]
 8003f8c:	f001 fd30 	bl	80059f0 <_localeconv_r>
 8003f90:	6800      	ldr	r0, [r0, #0]
 8003f92:	f7fc f923 	bl	80001dc <strlen>
 8003f96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f98:	181a      	adds	r2, r3, r0
 8003f9a:	9217      	str	r2, [sp, #92]	; 0x5c
 8003f9c:	9a04      	ldr	r2, [sp, #16]
 8003f9e:	5c1b      	ldrb	r3, [r3, r0]
 8003fa0:	2a00      	cmp	r2, #0
 8003fa2:	d142      	bne.n	800402a <_strtod_r+0x22a>
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	2b30      	cmp	r3, #48	; 0x30
 8003fa8:	d105      	bne.n	8003fb6 <_strtod_r+0x1b6>
 8003faa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	9217      	str	r2, [sp, #92]	; 0x5c
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	e7f7      	b.n	8003fa6 <_strtod_r+0x1a6>
 8003fb6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003fba:	2a08      	cmp	r2, #8
 8003fbc:	d843      	bhi.n	8004046 <_strtod_r+0x246>
 8003fbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003fc0:	9207      	str	r2, [sp, #28]
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	3b30      	subs	r3, #48	; 0x30
 8003fca:	f100 0101 	add.w	r1, r0, #1
 8003fce:	d026      	beq.n	800401e <_strtod_r+0x21e>
 8003fd0:	440a      	add	r2, r1
 8003fd2:	eb05 0c00 	add.w	ip, r5, r0
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	260a      	movs	r6, #10
 8003fda:	4561      	cmp	r1, ip
 8003fdc:	d00e      	beq.n	8003ffc <_strtod_r+0x1fc>
 8003fde:	3101      	adds	r1, #1
 8003fe0:	f101 3eff 	add.w	lr, r1, #4294967295
 8003fe4:	f1be 0f08 	cmp.w	lr, #8
 8003fe8:	dc03      	bgt.n	8003ff2 <_strtod_r+0x1f2>
 8003fea:	9f05      	ldr	r7, [sp, #20]
 8003fec:	4377      	muls	r7, r6
 8003fee:	9705      	str	r7, [sp, #20]
 8003ff0:	e7f3      	b.n	8003fda <_strtod_r+0x1da>
 8003ff2:	2910      	cmp	r1, #16
 8003ff4:	bfd8      	it	le
 8003ff6:	fb06 f808 	mulle.w	r8, r6, r8
 8003ffa:	e7ee      	b.n	8003fda <_strtod_r+0x1da>
 8003ffc:	4428      	add	r0, r5
 8003ffe:	2808      	cmp	r0, #8
 8004000:	f100 0501 	add.w	r5, r0, #1
 8004004:	dc05      	bgt.n	8004012 <_strtod_r+0x212>
 8004006:	9805      	ldr	r0, [sp, #20]
 8004008:	210a      	movs	r1, #10
 800400a:	fb01 3300 	mla	r3, r1, r0, r3
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	e004      	b.n	800401c <_strtod_r+0x21c>
 8004012:	2d10      	cmp	r5, #16
 8004014:	bfdc      	itt	le
 8004016:	210a      	movle	r1, #10
 8004018:	fb01 3808 	mlale	r8, r1, r8, r3
 800401c:	2100      	movs	r1, #0
 800401e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004020:	1c58      	adds	r0, r3, #1
 8004022:	9017      	str	r0, [sp, #92]	; 0x5c
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	4608      	mov	r0, r1
 8004028:	e002      	b.n	8004030 <_strtod_r+0x230>
 800402a:	9d04      	ldr	r5, [sp, #16]
 800402c:	4638      	mov	r0, r7
 800402e:	463a      	mov	r2, r7
 8004030:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004034:	2909      	cmp	r1, #9
 8004036:	d9c7      	bls.n	8003fc8 <_strtod_r+0x1c8>
 8004038:	2101      	movs	r1, #1
 800403a:	2b65      	cmp	r3, #101	; 0x65
 800403c:	d001      	beq.n	8004042 <_strtod_r+0x242>
 800403e:	2b45      	cmp	r3, #69	; 0x45
 8004040:	d151      	bne.n	80040e6 <_strtod_r+0x2e6>
 8004042:	b96d      	cbnz	r5, 8004060 <_strtod_r+0x260>
 8004044:	e004      	b.n	8004050 <_strtod_r+0x250>
 8004046:	2b65      	cmp	r3, #101	; 0x65
 8004048:	f040 84b3 	bne.w	80049b2 <_strtod_r+0xbb2>
 800404c:	2200      	movs	r2, #0
 800404e:	2101      	movs	r1, #1
 8004050:	b928      	cbnz	r0, 800405e <_strtod_r+0x25e>
 8004052:	9b06      	ldr	r3, [sp, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8095 	beq.w	8004184 <_strtod_r+0x384>
 800405a:	4605      	mov	r5, r0
 800405c:	e000      	b.n	8004060 <_strtod_r+0x260>
 800405e:	2500      	movs	r5, #0
 8004060:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004062:	1c63      	adds	r3, r4, #1
 8004064:	9317      	str	r3, [sp, #92]	; 0x5c
 8004066:	7863      	ldrb	r3, [r4, #1]
 8004068:	2b2b      	cmp	r3, #43	; 0x2b
 800406a:	d006      	beq.n	800407a <_strtod_r+0x27a>
 800406c:	2b2d      	cmp	r3, #45	; 0x2d
 800406e:	d002      	beq.n	8004076 <_strtod_r+0x276>
 8004070:	2600      	movs	r6, #0
 8004072:	9603      	str	r6, [sp, #12]
 8004074:	e006      	b.n	8004084 <_strtod_r+0x284>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <_strtod_r+0x27c>
 800407a:	2300      	movs	r3, #0
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	1ca3      	adds	r3, r4, #2
 8004080:	9317      	str	r3, [sp, #92]	; 0x5c
 8004082:	78a3      	ldrb	r3, [r4, #2]
 8004084:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004088:	2e09      	cmp	r6, #9
 800408a:	d82b      	bhi.n	80040e4 <_strtod_r+0x2e4>
 800408c:	2b30      	cmp	r3, #48	; 0x30
 800408e:	d104      	bne.n	800409a <_strtod_r+0x29a>
 8004090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004092:	1c5e      	adds	r6, r3, #1
 8004094:	9617      	str	r6, [sp, #92]	; 0x5c
 8004096:	785b      	ldrb	r3, [r3, #1]
 8004098:	e7f8      	b.n	800408c <_strtod_r+0x28c>
 800409a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 800409e:	2e08      	cmp	r6, #8
 80040a0:	d821      	bhi.n	80040e6 <_strtod_r+0x2e6>
 80040a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80040a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040a8:	f04f 0c0a 	mov.w	ip, #10
 80040ac:	461f      	mov	r7, r3
 80040ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040b0:	1c5e      	adds	r6, r3, #1
 80040b2:	9617      	str	r6, [sp, #92]	; 0x5c
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 80040ba:	f1b9 0f09 	cmp.w	r9, #9
 80040be:	d804      	bhi.n	80040ca <_strtod_r+0x2ca>
 80040c0:	fb0c 3e0e 	mla	lr, ip, lr, r3
 80040c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80040c8:	e7f1      	b.n	80040ae <_strtod_r+0x2ae>
 80040ca:	1bf6      	subs	r6, r6, r7
 80040cc:	2e08      	cmp	r6, #8
 80040ce:	f644 691f 	movw	r9, #19999	; 0x4e1f
 80040d2:	dc02      	bgt.n	80040da <_strtod_r+0x2da>
 80040d4:	45f1      	cmp	r9, lr
 80040d6:	bfa8      	it	ge
 80040d8:	46f1      	movge	r9, lr
 80040da:	9e03      	ldr	r6, [sp, #12]
 80040dc:	b12e      	cbz	r6, 80040ea <_strtod_r+0x2ea>
 80040de:	f1c9 0900 	rsb	r9, r9, #0
 80040e2:	e002      	b.n	80040ea <_strtod_r+0x2ea>
 80040e4:	9417      	str	r4, [sp, #92]	; 0x5c
 80040e6:	f04f 0900 	mov.w	r9, #0
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	d153      	bne.n	8004196 <_strtod_r+0x396>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	f040 8451 	bne.w	8004996 <_strtod_r+0xb96>
 80040f4:	9a06      	ldr	r2, [sp, #24]
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	f040 844d 	bne.w	8004996 <_strtod_r+0xb96>
 80040fc:	2900      	cmp	r1, #0
 80040fe:	d141      	bne.n	8004184 <_strtod_r+0x384>
 8004100:	2b4e      	cmp	r3, #78	; 0x4e
 8004102:	d020      	beq.n	8004146 <_strtod_r+0x346>
 8004104:	dc02      	bgt.n	800410c <_strtod_r+0x30c>
 8004106:	2b49      	cmp	r3, #73	; 0x49
 8004108:	d00a      	beq.n	8004120 <_strtod_r+0x320>
 800410a:	e03b      	b.n	8004184 <_strtod_r+0x384>
 800410c:	2b69      	cmp	r3, #105	; 0x69
 800410e:	d007      	beq.n	8004120 <_strtod_r+0x320>
 8004110:	2b6e      	cmp	r3, #110	; 0x6e
 8004112:	d018      	beq.n	8004146 <_strtod_r+0x346>
 8004114:	e036      	b.n	8004184 <_strtod_r+0x384>
 8004116:	bf00      	nop
 8004118:	0800766c 	.word	0x0800766c
 800411c:	7ff00000 	.word	0x7ff00000
 8004120:	49a8      	ldr	r1, [pc, #672]	; (80043c4 <_strtod_r+0x5c4>)
 8004122:	a817      	add	r0, sp, #92	; 0x5c
 8004124:	f001 fac6 	bl	80056b4 <__match>
 8004128:	b360      	cbz	r0, 8004184 <_strtod_r+0x384>
 800412a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800412c:	49a6      	ldr	r1, [pc, #664]	; (80043c8 <_strtod_r+0x5c8>)
 800412e:	3b01      	subs	r3, #1
 8004130:	a817      	add	r0, sp, #92	; 0x5c
 8004132:	9317      	str	r3, [sp, #92]	; 0x5c
 8004134:	f001 fabe 	bl	80056b4 <__match>
 8004138:	b910      	cbnz	r0, 8004140 <_strtod_r+0x340>
 800413a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800413c:	3301      	adds	r3, #1
 800413e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004140:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 80043e4 <_strtod_r+0x5e4>
 8004144:	e01a      	b.n	800417c <_strtod_r+0x37c>
 8004146:	49a1      	ldr	r1, [pc, #644]	; (80043cc <_strtod_r+0x5cc>)
 8004148:	a817      	add	r0, sp, #92	; 0x5c
 800414a:	f001 fab3 	bl	80056b4 <__match>
 800414e:	b1c8      	cbz	r0, 8004184 <_strtod_r+0x384>
 8004150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b28      	cmp	r3, #40	; 0x28
 8004156:	d10f      	bne.n	8004178 <_strtod_r+0x378>
 8004158:	aa1a      	add	r2, sp, #104	; 0x68
 800415a:	499d      	ldr	r1, [pc, #628]	; (80043d0 <_strtod_r+0x5d0>)
 800415c:	a817      	add	r0, sp, #92	; 0x5c
 800415e:	f001 fabc 	bl	80056da <__hexnan>
 8004162:	2805      	cmp	r0, #5
 8004164:	d108      	bne.n	8004178 <_strtod_r+0x378>
 8004166:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004168:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800416c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004170:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004174:	f000 bc0f 	b.w	8004996 <_strtod_r+0xb96>
 8004178:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80043e8 <_strtod_r+0x5e8>
 800417c:	f04f 0a00 	mov.w	sl, #0
 8004180:	f000 bc09 	b.w	8004996 <_strtod_r+0xb96>
 8004184:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004186:	9417      	str	r4, [sp, #92]	; 0x5c
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 840f 	beq.w	80049ac <_strtod_r+0xbac>
 800418e:	2300      	movs	r3, #0
 8004190:	930c      	str	r3, [sp, #48]	; 0x30
 8004192:	f000 bc02 	b.w	800499a <_strtod_r+0xb9a>
 8004196:	9b04      	ldr	r3, [sp, #16]
 8004198:	9805      	ldr	r0, [sp, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf08      	it	eq
 800419e:	462b      	moveq	r3, r5
 80041a0:	2d10      	cmp	r5, #16
 80041a2:	462c      	mov	r4, r5
 80041a4:	ebc2 0909 	rsb	r9, r2, r9
 80041a8:	bfa8      	it	ge
 80041aa:	2410      	movge	r4, #16
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	f7fc f95f 	bl	8000470 <__aeabi_ui2d>
 80041b2:	2c09      	cmp	r4, #9
 80041b4:	4682      	mov	sl, r0
 80041b6:	468b      	mov	fp, r1
 80041b8:	dd13      	ble.n	80041e2 <_strtod_r+0x3e2>
 80041ba:	4b86      	ldr	r3, [pc, #536]	; (80043d4 <_strtod_r+0x5d4>)
 80041bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80041c4:	f7fc f9ca 	bl	800055c <__aeabi_dmul>
 80041c8:	4606      	mov	r6, r0
 80041ca:	4640      	mov	r0, r8
 80041cc:	460f      	mov	r7, r1
 80041ce:	f7fc f94f 	bl	8000470 <__aeabi_ui2d>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4630      	mov	r0, r6
 80041d8:	4639      	mov	r1, r7
 80041da:	f7fc f80d 	bl	80001f8 <__adddf3>
 80041de:	4682      	mov	sl, r0
 80041e0:	468b      	mov	fp, r1
 80041e2:	2d0f      	cmp	r5, #15
 80041e4:	dc36      	bgt.n	8004254 <_strtod_r+0x454>
 80041e6:	f1b9 0f00 	cmp.w	r9, #0
 80041ea:	f000 83d4 	beq.w	8004996 <_strtod_r+0xb96>
 80041ee:	dd24      	ble.n	800423a <_strtod_r+0x43a>
 80041f0:	f1b9 0f16 	cmp.w	r9, #22
 80041f4:	dc07      	bgt.n	8004206 <_strtod_r+0x406>
 80041f6:	4d77      	ldr	r5, [pc, #476]	; (80043d4 <_strtod_r+0x5d4>)
 80041f8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 80041fc:	4652      	mov	r2, sl
 80041fe:	465b      	mov	r3, fp
 8004200:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004204:	e014      	b.n	8004230 <_strtod_r+0x430>
 8004206:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800420a:	4599      	cmp	r9, r3
 800420c:	dc22      	bgt.n	8004254 <_strtod_r+0x454>
 800420e:	4c71      	ldr	r4, [pc, #452]	; (80043d4 <_strtod_r+0x5d4>)
 8004210:	f1c5 050f 	rsb	r5, r5, #15
 8004214:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004218:	ebc5 0509 	rsb	r5, r5, r9
 800421c:	4652      	mov	r2, sl
 800421e:	465b      	mov	r3, fp
 8004220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004224:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004228:	f7fc f998 	bl	800055c <__aeabi_dmul>
 800422c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004230:	f7fc f994 	bl	800055c <__aeabi_dmul>
 8004234:	4682      	mov	sl, r0
 8004236:	468b      	mov	fp, r1
 8004238:	e3ad      	b.n	8004996 <_strtod_r+0xb96>
 800423a:	f119 0f16 	cmn.w	r9, #22
 800423e:	db09      	blt.n	8004254 <_strtod_r+0x454>
 8004240:	4d64      	ldr	r5, [pc, #400]	; (80043d4 <_strtod_r+0x5d4>)
 8004242:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8004246:	e9d9 2300 	ldrd	r2, r3, [r9]
 800424a:	4650      	mov	r0, sl
 800424c:	4659      	mov	r1, fp
 800424e:	f7fc faaf 	bl	80007b0 <__aeabi_ddiv>
 8004252:	e7ef      	b.n	8004234 <_strtod_r+0x434>
 8004254:	1b2c      	subs	r4, r5, r4
 8004256:	444c      	add	r4, r9
 8004258:	2c00      	cmp	r4, #0
 800425a:	dd57      	ble.n	800430c <_strtod_r+0x50c>
 800425c:	f014 010f 	ands.w	r1, r4, #15
 8004260:	d00a      	beq.n	8004278 <_strtod_r+0x478>
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <_strtod_r+0x5d4>)
 8004264:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004268:	4652      	mov	r2, sl
 800426a:	465b      	mov	r3, fp
 800426c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004270:	f7fc f974 	bl	800055c <__aeabi_dmul>
 8004274:	4682      	mov	sl, r0
 8004276:	468b      	mov	fp, r1
 8004278:	f034 040f 	bics.w	r4, r4, #15
 800427c:	f000 80b8 	beq.w	80043f0 <_strtod_r+0x5f0>
 8004280:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8004284:	dd0b      	ble.n	800429e <_strtod_r+0x49e>
 8004286:	2400      	movs	r4, #0
 8004288:	4625      	mov	r5, r4
 800428a:	9405      	str	r4, [sp, #20]
 800428c:	9404      	str	r4, [sp, #16]
 800428e:	9a02      	ldr	r2, [sp, #8]
 8004290:	f8df b150 	ldr.w	fp, [pc, #336]	; 80043e4 <_strtod_r+0x5e4>
 8004294:	2322      	movs	r3, #34	; 0x22
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	f04f 0a00 	mov.w	sl, #0
 800429c:	e187      	b.n	80045ae <_strtod_r+0x7ae>
 800429e:	4e4e      	ldr	r6, [pc, #312]	; (80043d8 <_strtod_r+0x5d8>)
 80042a0:	2300      	movs	r3, #0
 80042a2:	1124      	asrs	r4, r4, #4
 80042a4:	4650      	mov	r0, sl
 80042a6:	4659      	mov	r1, fp
 80042a8:	4698      	mov	r8, r3
 80042aa:	4637      	mov	r7, r6
 80042ac:	2c01      	cmp	r4, #1
 80042ae:	dd0b      	ble.n	80042c8 <_strtod_r+0x4c8>
 80042b0:	07e2      	lsls	r2, r4, #31
 80042b2:	d504      	bpl.n	80042be <_strtod_r+0x4be>
 80042b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80042b8:	f7fc f950 	bl	800055c <__aeabi_dmul>
 80042bc:	2301      	movs	r3, #1
 80042be:	f108 0801 	add.w	r8, r8, #1
 80042c2:	1064      	asrs	r4, r4, #1
 80042c4:	3608      	adds	r6, #8
 80042c6:	e7f1      	b.n	80042ac <_strtod_r+0x4ac>
 80042c8:	b10b      	cbz	r3, 80042ce <_strtod_r+0x4ce>
 80042ca:	4682      	mov	sl, r0
 80042cc:	468b      	mov	fp, r1
 80042ce:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80042d2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80042d6:	4652      	mov	r2, sl
 80042d8:	465b      	mov	r3, fp
 80042da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042de:	f7fc f93d 	bl	800055c <__aeabi_dmul>
 80042e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80042e6:	468b      	mov	fp, r1
 80042e8:	460a      	mov	r2, r1
 80042ea:	0d1b      	lsrs	r3, r3, #20
 80042ec:	493b      	ldr	r1, [pc, #236]	; (80043dc <_strtod_r+0x5dc>)
 80042ee:	051b      	lsls	r3, r3, #20
 80042f0:	428b      	cmp	r3, r1
 80042f2:	4682      	mov	sl, r0
 80042f4:	d8c7      	bhi.n	8004286 <_strtod_r+0x486>
 80042f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80042fa:	428b      	cmp	r3, r1
 80042fc:	bf86      	itte	hi
 80042fe:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 80043ec <_strtod_r+0x5ec>
 8004302:	f04f 3aff 	movhi.w	sl, #4294967295
 8004306:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800430a:	e071      	b.n	80043f0 <_strtod_r+0x5f0>
 800430c:	d070      	beq.n	80043f0 <_strtod_r+0x5f0>
 800430e:	4264      	negs	r4, r4
 8004310:	f014 020f 	ands.w	r2, r4, #15
 8004314:	d00a      	beq.n	800432c <_strtod_r+0x52c>
 8004316:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <_strtod_r+0x5d4>)
 8004318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800431c:	4650      	mov	r0, sl
 800431e:	4659      	mov	r1, fp
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f7fc fa44 	bl	80007b0 <__aeabi_ddiv>
 8004328:	4682      	mov	sl, r0
 800432a:	468b      	mov	fp, r1
 800432c:	1124      	asrs	r4, r4, #4
 800432e:	d05f      	beq.n	80043f0 <_strtod_r+0x5f0>
 8004330:	2c1f      	cmp	r4, #31
 8004332:	dd04      	ble.n	800433e <_strtod_r+0x53e>
 8004334:	2400      	movs	r4, #0
 8004336:	4625      	mov	r5, r4
 8004338:	9405      	str	r4, [sp, #20]
 800433a:	9404      	str	r4, [sp, #16]
 800433c:	e130      	b.n	80045a0 <_strtod_r+0x7a0>
 800433e:	f014 0f10 	tst.w	r4, #16
 8004342:	bf0c      	ite	eq
 8004344:	2300      	moveq	r3, #0
 8004346:	236a      	movne	r3, #106	; 0x6a
 8004348:	4e25      	ldr	r6, [pc, #148]	; (80043e0 <_strtod_r+0x5e0>)
 800434a:	9303      	str	r3, [sp, #12]
 800434c:	4650      	mov	r0, sl
 800434e:	4659      	mov	r1, fp
 8004350:	2300      	movs	r3, #0
 8004352:	2c00      	cmp	r4, #0
 8004354:	dd09      	ble.n	800436a <_strtod_r+0x56a>
 8004356:	07e2      	lsls	r2, r4, #31
 8004358:	d504      	bpl.n	8004364 <_strtod_r+0x564>
 800435a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800435e:	f7fc f8fd 	bl	800055c <__aeabi_dmul>
 8004362:	2301      	movs	r3, #1
 8004364:	1064      	asrs	r4, r4, #1
 8004366:	3608      	adds	r6, #8
 8004368:	e7f3      	b.n	8004352 <_strtod_r+0x552>
 800436a:	b10b      	cbz	r3, 8004370 <_strtod_r+0x570>
 800436c:	4682      	mov	sl, r0
 800436e:	468b      	mov	fp, r1
 8004370:	9b03      	ldr	r3, [sp, #12]
 8004372:	b1eb      	cbz	r3, 80043b0 <_strtod_r+0x5b0>
 8004374:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004378:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800437c:	2b00      	cmp	r3, #0
 800437e:	4659      	mov	r1, fp
 8004380:	dd16      	ble.n	80043b0 <_strtod_r+0x5b0>
 8004382:	2b1f      	cmp	r3, #31
 8004384:	dd0e      	ble.n	80043a4 <_strtod_r+0x5a4>
 8004386:	2b34      	cmp	r3, #52	; 0x34
 8004388:	bfde      	ittt	le
 800438a:	3b20      	suble	r3, #32
 800438c:	f04f 32ff 	movle.w	r2, #4294967295
 8004390:	fa02 f303 	lslle.w	r3, r2, r3
 8004394:	f04f 0a00 	mov.w	sl, #0
 8004398:	bfcc      	ite	gt
 800439a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800439e:	ea03 0b01 	andle.w	fp, r3, r1
 80043a2:	e005      	b.n	80043b0 <_strtod_r+0x5b0>
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	ea03 0a0a 	and.w	sl, r3, sl
 80043b0:	2200      	movs	r2, #0
 80043b2:	2300      	movs	r3, #0
 80043b4:	4650      	mov	r0, sl
 80043b6:	4659      	mov	r1, fp
 80043b8:	f7fc fb38 	bl	8000a2c <__aeabi_dcmpeq>
 80043bc:	2800      	cmp	r0, #0
 80043be:	d1b9      	bne.n	8004334 <_strtod_r+0x534>
 80043c0:	e018      	b.n	80043f4 <_strtod_r+0x5f4>
 80043c2:	bf00      	nop
 80043c4:	08007680 	.word	0x08007680
 80043c8:	08007683 	.word	0x08007683
 80043cc:	08007689 	.word	0x08007689
 80043d0:	0800768c 	.word	0x0800768c
 80043d4:	08007810 	.word	0x08007810
 80043d8:	080078d8 	.word	0x080078d8
 80043dc:	7ca00000 	.word	0x7ca00000
 80043e0:	080076a0 	.word	0x080076a0
 80043e4:	7ff00000 	.word	0x7ff00000
 80043e8:	fff80000 	.word	0xfff80000
 80043ec:	7fefffff 	.word	0x7fefffff
 80043f0:	2300      	movs	r3, #0
 80043f2:	9303      	str	r3, [sp, #12]
 80043f4:	9b05      	ldr	r3, [sp, #20]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	9a04      	ldr	r2, [sp, #16]
 80043fa:	9907      	ldr	r1, [sp, #28]
 80043fc:	9802      	ldr	r0, [sp, #8]
 80043fe:	462b      	mov	r3, r5
 8004400:	f001 fb81 	bl	8005b06 <__s2b>
 8004404:	9005      	str	r0, [sp, #20]
 8004406:	2800      	cmp	r0, #0
 8004408:	f43f af3d 	beq.w	8004286 <_strtod_r+0x486>
 800440c:	f1b9 0f00 	cmp.w	r9, #0
 8004410:	f1c9 0300 	rsb	r3, r9, #0
 8004414:	bfa8      	it	ge
 8004416:	2300      	movge	r3, #0
 8004418:	930d      	str	r3, [sp, #52]	; 0x34
 800441a:	2400      	movs	r4, #0
 800441c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8004420:	9312      	str	r3, [sp, #72]	; 0x48
 8004422:	4625      	mov	r5, r4
 8004424:	9b05      	ldr	r3, [sp, #20]
 8004426:	9802      	ldr	r0, [sp, #8]
 8004428:	6859      	ldr	r1, [r3, #4]
 800442a:	f001 fae5 	bl	80059f8 <_Balloc>
 800442e:	9004      	str	r0, [sp, #16]
 8004430:	2800      	cmp	r0, #0
 8004432:	f43f af2c 	beq.w	800428e <_strtod_r+0x48e>
 8004436:	9b05      	ldr	r3, [sp, #20]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	3202      	adds	r2, #2
 800443c:	f103 010c 	add.w	r1, r3, #12
 8004440:	0092      	lsls	r2, r2, #2
 8004442:	300c      	adds	r0, #12
 8004444:	f7ff fa4c 	bl	80038e0 <memcpy>
 8004448:	aa1a      	add	r2, sp, #104	; 0x68
 800444a:	a919      	add	r1, sp, #100	; 0x64
 800444c:	ec4b ab10 	vmov	d0, sl, fp
 8004450:	9802      	ldr	r0, [sp, #8]
 8004452:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004456:	f001 fe0a 	bl	800606e <__d2b>
 800445a:	9018      	str	r0, [sp, #96]	; 0x60
 800445c:	2800      	cmp	r0, #0
 800445e:	f43f af16 	beq.w	800428e <_strtod_r+0x48e>
 8004462:	2101      	movs	r1, #1
 8004464:	9802      	ldr	r0, [sp, #8]
 8004466:	f001 fbd9 	bl	8005c1c <__i2b>
 800446a:	4605      	mov	r5, r0
 800446c:	2800      	cmp	r0, #0
 800446e:	f43f af0e 	beq.w	800428e <_strtod_r+0x48e>
 8004472:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004474:	9903      	ldr	r1, [sp, #12]
 8004476:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004478:	2b00      	cmp	r3, #0
 800447a:	bfad      	iteet	ge
 800447c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 800447e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004480:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 8004484:	eb02 0803 	addge.w	r8, r2, r3
 8004488:	bfb8      	it	lt
 800448a:	1ad2      	sublt	r2, r2, r3
 800448c:	eba3 0301 	sub.w	r3, r3, r1
 8004490:	4433      	add	r3, r6
 8004492:	49b5      	ldr	r1, [pc, #724]	; (8004768 <_strtod_r+0x968>)
 8004494:	bfa8      	it	ge
 8004496:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8004498:	3b01      	subs	r3, #1
 800449a:	428b      	cmp	r3, r1
 800449c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 80044a0:	f280 808a 	bge.w	80045b8 <_strtod_r+0x7b8>
 80044a4:	1ac9      	subs	r1, r1, r3
 80044a6:	291f      	cmp	r1, #31
 80044a8:	bfc8      	it	gt
 80044aa:	4fb0      	ldrgt	r7, [pc, #704]	; (800476c <_strtod_r+0x96c>)
 80044ac:	f04f 0901 	mov.w	r9, #1
 80044b0:	bfd4      	ite	le
 80044b2:	fa09 f301 	lslle.w	r3, r9, r1
 80044b6:	1aff      	subgt	r7, r7, r3
 80044b8:	eba6 0601 	sub.w	r6, r6, r1
 80044bc:	bfd9      	ittee	le
 80044be:	9306      	strle	r3, [sp, #24]
 80044c0:	2700      	movle	r7, #0
 80044c2:	fa09 f707 	lslgt.w	r7, r9, r7
 80044c6:	f8cd 9018 	strgt.w	r9, [sp, #24]
 80044ca:	eb08 0906 	add.w	r9, r8, r6
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	45c8      	cmp	r8, r9
 80044d2:	4416      	add	r6, r2
 80044d4:	441e      	add	r6, r3
 80044d6:	4643      	mov	r3, r8
 80044d8:	bfa8      	it	ge
 80044da:	464b      	movge	r3, r9
 80044dc:	42b3      	cmp	r3, r6
 80044de:	bfa8      	it	ge
 80044e0:	4633      	movge	r3, r6
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfc2      	ittt	gt
 80044e6:	ebc3 0909 	rsbgt	r9, r3, r9
 80044ea:	1af6      	subgt	r6, r6, r3
 80044ec:	ebc3 0808 	rsbgt	r8, r3, r8
 80044f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d164      	bne.n	80045c0 <_strtod_r+0x7c0>
 80044f6:	f1b9 0f00 	cmp.w	r9, #0
 80044fa:	dc7a      	bgt.n	80045f2 <_strtod_r+0x7f2>
 80044fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f040 8081 	bne.w	8004606 <_strtod_r+0x806>
 8004504:	2e00      	cmp	r6, #0
 8004506:	f300 8088 	bgt.w	800461a <_strtod_r+0x81a>
 800450a:	f1b8 0f00 	cmp.w	r8, #0
 800450e:	f300 808e 	bgt.w	800462e <_strtod_r+0x82e>
 8004512:	9a04      	ldr	r2, [sp, #16]
 8004514:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004516:	9802      	ldr	r0, [sp, #8]
 8004518:	f001 fcd5 	bl	8005ec6 <__mdiff>
 800451c:	4604      	mov	r4, r0
 800451e:	2800      	cmp	r0, #0
 8004520:	f43f aeb5 	beq.w	800428e <_strtod_r+0x48e>
 8004524:	68c3      	ldr	r3, [r0, #12]
 8004526:	9307      	str	r3, [sp, #28]
 8004528:	2300      	movs	r3, #0
 800452a:	60c3      	str	r3, [r0, #12]
 800452c:	4629      	mov	r1, r5
 800452e:	f001 fcae 	bl	8005e8e <__mcmp>
 8004532:	2800      	cmp	r0, #0
 8004534:	f280 8089 	bge.w	800464a <_strtod_r+0x84a>
 8004538:	9b07      	ldr	r3, [sp, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f040 8204 	bne.w	8004948 <_strtod_r+0xb48>
 8004540:	f1ba 0f00 	cmp.w	sl, #0
 8004544:	f040 8200 	bne.w	8004948 <_strtod_r+0xb48>
 8004548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 81fb 	bne.w	8004948 <_strtod_r+0xb48>
 8004552:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004556:	0d1b      	lsrs	r3, r3, #20
 8004558:	051b      	lsls	r3, r3, #20
 800455a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800455e:	f240 81f3 	bls.w	8004948 <_strtod_r+0xb48>
 8004562:	6963      	ldr	r3, [r4, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d06c      	beq.n	8004642 <_strtod_r+0x842>
 8004568:	4621      	mov	r1, r4
 800456a:	2201      	movs	r2, #1
 800456c:	9802      	ldr	r0, [sp, #8]
 800456e:	f001 fc3d 	bl	8005dec <__lshift>
 8004572:	4629      	mov	r1, r5
 8004574:	4604      	mov	r4, r0
 8004576:	f001 fc8a 	bl	8005e8e <__mcmp>
 800457a:	2800      	cmp	r0, #0
 800457c:	f340 81e4 	ble.w	8004948 <_strtod_r+0xb48>
 8004580:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004584:	9a03      	ldr	r2, [sp, #12]
 8004586:	0d1b      	lsrs	r3, r3, #20
 8004588:	051b      	lsls	r3, r3, #20
 800458a:	2a00      	cmp	r2, #0
 800458c:	f000 808c 	beq.w	80046a8 <_strtod_r+0x8a8>
 8004590:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004594:	f300 8088 	bgt.w	80046a8 <_strtod_r+0x8a8>
 8004598:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800459c:	f300 81d6 	bgt.w	800494c <_strtod_r+0xb4c>
 80045a0:	9a02      	ldr	r2, [sp, #8]
 80045a2:	2322      	movs	r3, #34	; 0x22
 80045a4:	f04f 0a00 	mov.w	sl, #0
 80045a8:	f04f 0b00 	mov.w	fp, #0
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	9b05      	ldr	r3, [sp, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f040 81dc 	bne.w	800496e <_strtod_r+0xb6e>
 80045b6:	e1ee      	b.n	8004996 <_strtod_r+0xb96>
 80045b8:	2301      	movs	r3, #1
 80045ba:	2700      	movs	r7, #0
 80045bc:	9306      	str	r3, [sp, #24]
 80045be:	e784      	b.n	80044ca <_strtod_r+0x6ca>
 80045c0:	4629      	mov	r1, r5
 80045c2:	461a      	mov	r2, r3
 80045c4:	9802      	ldr	r0, [sp, #8]
 80045c6:	f001 fbc3 	bl	8005d50 <__pow5mult>
 80045ca:	4605      	mov	r5, r0
 80045cc:	2800      	cmp	r0, #0
 80045ce:	f43f ae5e 	beq.w	800428e <_strtod_r+0x48e>
 80045d2:	4601      	mov	r1, r0
 80045d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80045d6:	9802      	ldr	r0, [sp, #8]
 80045d8:	f001 fb29 	bl	8005c2e <__multiply>
 80045dc:	9007      	str	r0, [sp, #28]
 80045de:	2800      	cmp	r0, #0
 80045e0:	f43f ae55 	beq.w	800428e <_strtod_r+0x48e>
 80045e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80045e6:	9802      	ldr	r0, [sp, #8]
 80045e8:	f001 fa3b 	bl	8005a62 <_Bfree>
 80045ec:	9b07      	ldr	r3, [sp, #28]
 80045ee:	9318      	str	r3, [sp, #96]	; 0x60
 80045f0:	e781      	b.n	80044f6 <_strtod_r+0x6f6>
 80045f2:	464a      	mov	r2, r9
 80045f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80045f6:	9802      	ldr	r0, [sp, #8]
 80045f8:	f001 fbf8 	bl	8005dec <__lshift>
 80045fc:	9018      	str	r0, [sp, #96]	; 0x60
 80045fe:	2800      	cmp	r0, #0
 8004600:	f47f af7c 	bne.w	80044fc <_strtod_r+0x6fc>
 8004604:	e643      	b.n	800428e <_strtod_r+0x48e>
 8004606:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004608:	9904      	ldr	r1, [sp, #16]
 800460a:	9802      	ldr	r0, [sp, #8]
 800460c:	f001 fba0 	bl	8005d50 <__pow5mult>
 8004610:	9004      	str	r0, [sp, #16]
 8004612:	2800      	cmp	r0, #0
 8004614:	f47f af76 	bne.w	8004504 <_strtod_r+0x704>
 8004618:	e639      	b.n	800428e <_strtod_r+0x48e>
 800461a:	4632      	mov	r2, r6
 800461c:	9904      	ldr	r1, [sp, #16]
 800461e:	9802      	ldr	r0, [sp, #8]
 8004620:	f001 fbe4 	bl	8005dec <__lshift>
 8004624:	9004      	str	r0, [sp, #16]
 8004626:	2800      	cmp	r0, #0
 8004628:	f47f af6f 	bne.w	800450a <_strtod_r+0x70a>
 800462c:	e62f      	b.n	800428e <_strtod_r+0x48e>
 800462e:	4629      	mov	r1, r5
 8004630:	4642      	mov	r2, r8
 8004632:	9802      	ldr	r0, [sp, #8]
 8004634:	f001 fbda 	bl	8005dec <__lshift>
 8004638:	4605      	mov	r5, r0
 800463a:	2800      	cmp	r0, #0
 800463c:	f47f af69 	bne.w	8004512 <_strtod_r+0x712>
 8004640:	e625      	b.n	800428e <_strtod_r+0x48e>
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	2b01      	cmp	r3, #1
 8004646:	dc8f      	bgt.n	8004568 <_strtod_r+0x768>
 8004648:	e17e      	b.n	8004948 <_strtod_r+0xb48>
 800464a:	d161      	bne.n	8004710 <_strtod_r+0x910>
 800464c:	9a07      	ldr	r2, [sp, #28]
 800464e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004652:	b322      	cbz	r2, 800469e <_strtod_r+0x89e>
 8004654:	4946      	ldr	r1, [pc, #280]	; (8004770 <_strtod_r+0x970>)
 8004656:	428b      	cmp	r3, r1
 8004658:	465a      	mov	r2, fp
 800465a:	d12e      	bne.n	80046ba <_strtod_r+0x8ba>
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	4651      	mov	r1, sl
 8004660:	b163      	cbz	r3, 800467c <_strtod_r+0x87c>
 8004662:	4b44      	ldr	r3, [pc, #272]	; (8004774 <_strtod_r+0x974>)
 8004664:	4013      	ands	r3, r2
 8004666:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800466a:	d807      	bhi.n	800467c <_strtod_r+0x87c>
 800466c:	0d1b      	lsrs	r3, r3, #20
 800466e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004672:	f04f 30ff 	mov.w	r0, #4294967295
 8004676:	fa00 f303 	lsl.w	r3, r0, r3
 800467a:	e001      	b.n	8004680 <_strtod_r+0x880>
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	428b      	cmp	r3, r1
 8004682:	d11a      	bne.n	80046ba <_strtod_r+0x8ba>
 8004684:	493c      	ldr	r1, [pc, #240]	; (8004778 <_strtod_r+0x978>)
 8004686:	428a      	cmp	r2, r1
 8004688:	d102      	bne.n	8004690 <_strtod_r+0x890>
 800468a:	3301      	adds	r3, #1
 800468c:	f43f adff 	beq.w	800428e <_strtod_r+0x48e>
 8004690:	4b38      	ldr	r3, [pc, #224]	; (8004774 <_strtod_r+0x974>)
 8004692:	4013      	ands	r3, r2
 8004694:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004698:	f04f 0a00 	mov.w	sl, #0
 800469c:	e154      	b.n	8004948 <_strtod_r+0xb48>
 800469e:	b963      	cbnz	r3, 80046ba <_strtod_r+0x8ba>
 80046a0:	f1ba 0f00 	cmp.w	sl, #0
 80046a4:	d109      	bne.n	80046ba <_strtod_r+0x8ba>
 80046a6:	e76b      	b.n	8004580 <_strtod_r+0x780>
 80046a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80046ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80046b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80046b4:	f04f 3aff 	mov.w	sl, #4294967295
 80046b8:	e146      	b.n	8004948 <_strtod_r+0xb48>
 80046ba:	b117      	cbz	r7, 80046c2 <_strtod_r+0x8c2>
 80046bc:	ea17 0f0b 	tst.w	r7, fp
 80046c0:	e002      	b.n	80046c8 <_strtod_r+0x8c8>
 80046c2:	9b06      	ldr	r3, [sp, #24]
 80046c4:	ea13 0f0a 	tst.w	r3, sl
 80046c8:	f000 813e 	beq.w	8004948 <_strtod_r+0xb48>
 80046cc:	9b07      	ldr	r3, [sp, #28]
 80046ce:	9a03      	ldr	r2, [sp, #12]
 80046d0:	4650      	mov	r0, sl
 80046d2:	4659      	mov	r1, fp
 80046d4:	b153      	cbz	r3, 80046ec <_strtod_r+0x8ec>
 80046d6:	f7ff fb77 	bl	8003dc8 <sulp>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80046e2:	f7fb fd89 	bl	80001f8 <__adddf3>
 80046e6:	4682      	mov	sl, r0
 80046e8:	468b      	mov	fp, r1
 80046ea:	e12d      	b.n	8004948 <_strtod_r+0xb48>
 80046ec:	f7ff fb6c 	bl	8003dc8 <sulp>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80046f8:	f7fb fd7c 	bl	80001f4 <__aeabi_dsub>
 80046fc:	2200      	movs	r2, #0
 80046fe:	2300      	movs	r3, #0
 8004700:	4682      	mov	sl, r0
 8004702:	468b      	mov	fp, r1
 8004704:	f7fc f992 	bl	8000a2c <__aeabi_dcmpeq>
 8004708:	2800      	cmp	r0, #0
 800470a:	f47f af49 	bne.w	80045a0 <_strtod_r+0x7a0>
 800470e:	e11b      	b.n	8004948 <_strtod_r+0xb48>
 8004710:	4629      	mov	r1, r5
 8004712:	4620      	mov	r0, r4
 8004714:	f001 fcf9 	bl	800610a <__ratio>
 8004718:	ec57 6b10 	vmov	r6, r7, d0
 800471c:	2200      	movs	r2, #0
 800471e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004722:	ee10 0a10 	vmov	r0, s0
 8004726:	4639      	mov	r1, r7
 8004728:	f7fc f994 	bl	8000a54 <__aeabi_dcmple>
 800472c:	2800      	cmp	r0, #0
 800472e:	d042      	beq.n	80047b6 <_strtod_r+0x9b6>
 8004730:	9b07      	ldr	r3, [sp, #28]
 8004732:	b123      	cbz	r3, 800473e <_strtod_r+0x93e>
 8004734:	f04f 0800 	mov.w	r8, #0
 8004738:	f8df 9040 	ldr.w	r9, [pc, #64]	; 800477c <_strtod_r+0x97c>
 800473c:	e011      	b.n	8004762 <_strtod_r+0x962>
 800473e:	f1ba 0f00 	cmp.w	sl, #0
 8004742:	d103      	bne.n	800474c <_strtod_r+0x94c>
 8004744:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004748:	b93b      	cbnz	r3, 800475a <_strtod_r+0x95a>
 800474a:	e01b      	b.n	8004784 <_strtod_r+0x984>
 800474c:	f1ba 0f01 	cmp.w	sl, #1
 8004750:	d103      	bne.n	800475a <_strtod_r+0x95a>
 8004752:	f1bb 0f00 	cmp.w	fp, #0
 8004756:	f43f af23 	beq.w	80045a0 <_strtod_r+0x7a0>
 800475a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8004780 <_strtod_r+0x980>
 800475e:	f04f 0800 	mov.w	r8, #0
 8004762:	2600      	movs	r6, #0
 8004764:	4f05      	ldr	r7, [pc, #20]	; (800477c <_strtod_r+0x97c>)
 8004766:	e039      	b.n	80047dc <_strtod_r+0x9dc>
 8004768:	fffffc02 	.word	0xfffffc02
 800476c:	fffffbe2 	.word	0xfffffbe2
 8004770:	000fffff 	.word	0x000fffff
 8004774:	7ff00000 	.word	0x7ff00000
 8004778:	7fefffff 	.word	0x7fefffff
 800477c:	3ff00000 	.word	0x3ff00000
 8004780:	bff00000 	.word	0xbff00000
 8004784:	2200      	movs	r2, #0
 8004786:	4b98      	ldr	r3, [pc, #608]	; (80049e8 <_strtod_r+0xbe8>)
 8004788:	4630      	mov	r0, r6
 800478a:	4639      	mov	r1, r7
 800478c:	f7fc f958 	bl	8000a40 <__aeabi_dcmplt>
 8004790:	b940      	cbnz	r0, 80047a4 <_strtod_r+0x9a4>
 8004792:	4630      	mov	r0, r6
 8004794:	4639      	mov	r1, r7
 8004796:	2200      	movs	r2, #0
 8004798:	4b94      	ldr	r3, [pc, #592]	; (80049ec <_strtod_r+0xbec>)
 800479a:	f7fb fedf 	bl	800055c <__aeabi_dmul>
 800479e:	4606      	mov	r6, r0
 80047a0:	460f      	mov	r7, r1
 80047a2:	e001      	b.n	80047a8 <_strtod_r+0x9a8>
 80047a4:	4f91      	ldr	r7, [pc, #580]	; (80049ec <_strtod_r+0xbec>)
 80047a6:	2600      	movs	r6, #0
 80047a8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80047ac:	9614      	str	r6, [sp, #80]	; 0x50
 80047ae:	9315      	str	r3, [sp, #84]	; 0x54
 80047b0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80047b4:	e012      	b.n	80047dc <_strtod_r+0x9dc>
 80047b6:	4b8d      	ldr	r3, [pc, #564]	; (80049ec <_strtod_r+0xbec>)
 80047b8:	4630      	mov	r0, r6
 80047ba:	4639      	mov	r1, r7
 80047bc:	2200      	movs	r2, #0
 80047be:	f7fb fecd 	bl	800055c <__aeabi_dmul>
 80047c2:	9b07      	ldr	r3, [sp, #28]
 80047c4:	4606      	mov	r6, r0
 80047c6:	460f      	mov	r7, r1
 80047c8:	b923      	cbnz	r3, 80047d4 <_strtod_r+0x9d4>
 80047ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047ce:	900e      	str	r0, [sp, #56]	; 0x38
 80047d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80047d2:	e001      	b.n	80047d8 <_strtod_r+0x9d8>
 80047d4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 80047d8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80047dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80047e0:	0d1b      	lsrs	r3, r3, #20
 80047e2:	051b      	lsls	r3, r3, #20
 80047e4:	9306      	str	r3, [sp, #24]
 80047e6:	9a06      	ldr	r2, [sp, #24]
 80047e8:	4b81      	ldr	r3, [pc, #516]	; (80049f0 <_strtod_r+0xbf0>)
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d12b      	bne.n	8004846 <_strtod_r+0xa46>
 80047ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80047f6:	ec4b ab10 	vmov	d0, sl, fp
 80047fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80047fe:	f001 fbc1 	bl	8005f84 <__ulp>
 8004802:	4640      	mov	r0, r8
 8004804:	ec53 2b10 	vmov	r2, r3, d0
 8004808:	4649      	mov	r1, r9
 800480a:	f7fb fea7 	bl	800055c <__aeabi_dmul>
 800480e:	4652      	mov	r2, sl
 8004810:	465b      	mov	r3, fp
 8004812:	f7fb fcf1 	bl	80001f8 <__adddf3>
 8004816:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800481a:	0d1b      	lsrs	r3, r3, #20
 800481c:	4a75      	ldr	r2, [pc, #468]	; (80049f4 <_strtod_r+0xbf4>)
 800481e:	051b      	lsls	r3, r3, #20
 8004820:	4293      	cmp	r3, r2
 8004822:	4682      	mov	sl, r0
 8004824:	d90c      	bls.n	8004840 <_strtod_r+0xa40>
 8004826:	4b74      	ldr	r3, [pc, #464]	; (80049f8 <_strtod_r+0xbf8>)
 8004828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800482a:	429a      	cmp	r2, r3
 800482c:	d103      	bne.n	8004836 <_strtod_r+0xa36>
 800482e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004830:	3301      	adds	r3, #1
 8004832:	f43f ad2c 	beq.w	800428e <_strtod_r+0x48e>
 8004836:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80049f8 <_strtod_r+0xbf8>
 800483a:	f04f 3aff 	mov.w	sl, #4294967295
 800483e:	e072      	b.n	8004926 <_strtod_r+0xb26>
 8004840:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8004844:	e038      	b.n	80048b8 <_strtod_r+0xab8>
 8004846:	9b03      	ldr	r3, [sp, #12]
 8004848:	b333      	cbz	r3, 8004898 <_strtod_r+0xa98>
 800484a:	9b06      	ldr	r3, [sp, #24]
 800484c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004850:	d822      	bhi.n	8004898 <_strtod_r+0xa98>
 8004852:	a35d      	add	r3, pc, #372	; (adr r3, 80049c8 <_strtod_r+0xbc8>)
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	f7fc f8fa 	bl	8000a54 <__aeabi_dcmple>
 8004860:	b1a8      	cbz	r0, 800488e <_strtod_r+0xa8e>
 8004862:	4639      	mov	r1, r7
 8004864:	4630      	mov	r0, r6
 8004866:	f7fc f93b 	bl	8000ae0 <__aeabi_d2uiz>
 800486a:	2800      	cmp	r0, #0
 800486c:	bf08      	it	eq
 800486e:	2001      	moveq	r0, #1
 8004870:	f7fb fdfe 	bl	8000470 <__aeabi_ui2d>
 8004874:	9b07      	ldr	r3, [sp, #28]
 8004876:	4606      	mov	r6, r0
 8004878:	460f      	mov	r7, r1
 800487a:	b923      	cbnz	r3, 8004886 <_strtod_r+0xa86>
 800487c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004880:	9010      	str	r0, [sp, #64]	; 0x40
 8004882:	9311      	str	r3, [sp, #68]	; 0x44
 8004884:	e001      	b.n	800488a <_strtod_r+0xa8a>
 8004886:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800488a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800488e:	9a06      	ldr	r2, [sp, #24]
 8004890:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8004894:	ebc2 0903 	rsb	r9, r2, r3
 8004898:	ed9d 0b08 	vldr	d0, [sp, #32]
 800489c:	f001 fb72 	bl	8005f84 <__ulp>
 80048a0:	4640      	mov	r0, r8
 80048a2:	ec53 2b10 	vmov	r2, r3, d0
 80048a6:	4649      	mov	r1, r9
 80048a8:	f7fb fe58 	bl	800055c <__aeabi_dmul>
 80048ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048b0:	f7fb fca2 	bl	80001f8 <__adddf3>
 80048b4:	4682      	mov	sl, r0
 80048b6:	468b      	mov	fp, r1
 80048b8:	9b03      	ldr	r3, [sp, #12]
 80048ba:	bba3      	cbnz	r3, 8004926 <_strtod_r+0xb26>
 80048bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80048c0:	0d1b      	lsrs	r3, r3, #20
 80048c2:	9a06      	ldr	r2, [sp, #24]
 80048c4:	051b      	lsls	r3, r3, #20
 80048c6:	429a      	cmp	r2, r3
 80048c8:	46d8      	mov	r8, fp
 80048ca:	d12c      	bne.n	8004926 <_strtod_r+0xb26>
 80048cc:	4639      	mov	r1, r7
 80048ce:	4630      	mov	r0, r6
 80048d0:	f7fc f8de 	bl	8000a90 <__aeabi_d2iz>
 80048d4:	f7fb fddc 	bl	8000490 <__aeabi_i2d>
 80048d8:	460b      	mov	r3, r1
 80048da:	4602      	mov	r2, r0
 80048dc:	4639      	mov	r1, r7
 80048de:	4630      	mov	r0, r6
 80048e0:	f7fb fc88 	bl	80001f4 <__aeabi_dsub>
 80048e4:	9b07      	ldr	r3, [sp, #28]
 80048e6:	4606      	mov	r6, r0
 80048e8:	460f      	mov	r7, r1
 80048ea:	b92b      	cbnz	r3, 80048f8 <_strtod_r+0xaf8>
 80048ec:	f1ba 0f00 	cmp.w	sl, #0
 80048f0:	d102      	bne.n	80048f8 <_strtod_r+0xaf8>
 80048f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80048f6:	b183      	cbz	r3, 800491a <_strtod_r+0xb1a>
 80048f8:	a335      	add	r3, pc, #212	; (adr r3, 80049d0 <_strtod_r+0xbd0>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	4630      	mov	r0, r6
 8004900:	4639      	mov	r1, r7
 8004902:	f7fc f89d 	bl	8000a40 <__aeabi_dcmplt>
 8004906:	2800      	cmp	r0, #0
 8004908:	d131      	bne.n	800496e <_strtod_r+0xb6e>
 800490a:	a333      	add	r3, pc, #204	; (adr r3, 80049d8 <_strtod_r+0xbd8>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	4630      	mov	r0, r6
 8004912:	4639      	mov	r1, r7
 8004914:	f7fc f8b2 	bl	8000a7c <__aeabi_dcmpgt>
 8004918:	e004      	b.n	8004924 <_strtod_r+0xb24>
 800491a:	a331      	add	r3, pc, #196	; (adr r3, 80049e0 <_strtod_r+0xbe0>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f7fc f88e 	bl	8000a40 <__aeabi_dcmplt>
 8004924:	bb18      	cbnz	r0, 800496e <_strtod_r+0xb6e>
 8004926:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004928:	9802      	ldr	r0, [sp, #8]
 800492a:	f001 f89a 	bl	8005a62 <_Bfree>
 800492e:	9904      	ldr	r1, [sp, #16]
 8004930:	9802      	ldr	r0, [sp, #8]
 8004932:	f001 f896 	bl	8005a62 <_Bfree>
 8004936:	4629      	mov	r1, r5
 8004938:	9802      	ldr	r0, [sp, #8]
 800493a:	f001 f892 	bl	8005a62 <_Bfree>
 800493e:	4621      	mov	r1, r4
 8004940:	9802      	ldr	r0, [sp, #8]
 8004942:	f001 f88e 	bl	8005a62 <_Bfree>
 8004946:	e56d      	b.n	8004424 <_strtod_r+0x624>
 8004948:	9b03      	ldr	r3, [sp, #12]
 800494a:	b183      	cbz	r3, 800496e <_strtod_r+0xb6e>
 800494c:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <_strtod_r+0xbfc>)
 800494e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004950:	2300      	movs	r3, #0
 8004952:	930a      	str	r3, [sp, #40]	; 0x28
 8004954:	4650      	mov	r0, sl
 8004956:	4659      	mov	r1, fp
 8004958:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800495c:	f7fb fdfe 	bl	800055c <__aeabi_dmul>
 8004960:	4682      	mov	sl, r0
 8004962:	468b      	mov	fp, r1
 8004964:	b919      	cbnz	r1, 800496e <_strtod_r+0xb6e>
 8004966:	b910      	cbnz	r0, 800496e <_strtod_r+0xb6e>
 8004968:	9a02      	ldr	r2, [sp, #8]
 800496a:	2322      	movs	r3, #34	; 0x22
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004970:	9802      	ldr	r0, [sp, #8]
 8004972:	f001 f876 	bl	8005a62 <_Bfree>
 8004976:	9904      	ldr	r1, [sp, #16]
 8004978:	9802      	ldr	r0, [sp, #8]
 800497a:	f001 f872 	bl	8005a62 <_Bfree>
 800497e:	4629      	mov	r1, r5
 8004980:	9802      	ldr	r0, [sp, #8]
 8004982:	f001 f86e 	bl	8005a62 <_Bfree>
 8004986:	9905      	ldr	r1, [sp, #20]
 8004988:	9802      	ldr	r0, [sp, #8]
 800498a:	f001 f86a 	bl	8005a62 <_Bfree>
 800498e:	4621      	mov	r1, r4
 8004990:	9802      	ldr	r0, [sp, #8]
 8004992:	f001 f866 	bl	8005a62 <_Bfree>
 8004996:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004998:	b113      	cbz	r3, 80049a0 <_strtod_r+0xba0>
 800499a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800499c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049a2:	b11b      	cbz	r3, 80049ac <_strtod_r+0xbac>
 80049a4:	4652      	mov	r2, sl
 80049a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80049aa:	e007      	b.n	80049bc <_strtod_r+0xbbc>
 80049ac:	4652      	mov	r2, sl
 80049ae:	465b      	mov	r3, fp
 80049b0:	e004      	b.n	80049bc <_strtod_r+0xbbc>
 80049b2:	2500      	movs	r5, #0
 80049b4:	462a      	mov	r2, r5
 80049b6:	2101      	movs	r1, #1
 80049b8:	f7ff bb41 	b.w	800403e <_strtod_r+0x23e>
 80049bc:	ec43 2b10 	vmov	d0, r2, r3
 80049c0:	b01d      	add	sp, #116	; 0x74
 80049c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c6:	bf00      	nop
 80049c8:	ffc00000 	.word	0xffc00000
 80049cc:	41dfffff 	.word	0x41dfffff
 80049d0:	94a03595 	.word	0x94a03595
 80049d4:	3fdfffff 	.word	0x3fdfffff
 80049d8:	35afe535 	.word	0x35afe535
 80049dc:	3fe00000 	.word	0x3fe00000
 80049e0:	94a03595 	.word	0x94a03595
 80049e4:	3fcfffff 	.word	0x3fcfffff
 80049e8:	3ff00000 	.word	0x3ff00000
 80049ec:	3fe00000 	.word	0x3fe00000
 80049f0:	7fe00000 	.word	0x7fe00000
 80049f4:	7c9fffff 	.word	0x7c9fffff
 80049f8:	7fefffff 	.word	0x7fefffff
 80049fc:	39500000 	.word	0x39500000

08004a00 <strtod>:
 8004a00:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <strtod+0xc>)
 8004a02:	460a      	mov	r2, r1
 8004a04:	4601      	mov	r1, r0
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	f7ff b9fa 	b.w	8003e00 <_strtod_r>
 8004a0c:	20000580 	.word	0x20000580

08004a10 <strtok>:
 8004a10:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <strtok+0x78>)
 8004a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a16:	681d      	ldr	r5, [r3, #0]
 8004a18:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	460f      	mov	r7, r1
 8004a20:	bb4c      	cbnz	r4, 8004a76 <strtok+0x66>
 8004a22:	2050      	movs	r0, #80	; 0x50
 8004a24:	f7fe fd2c 	bl	8003480 <malloc>
 8004a28:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 8004a2c:	6084      	str	r4, [r0, #8]
 8004a2e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004a32:	6004      	str	r4, [r0, #0]
 8004a34:	6044      	str	r4, [r0, #4]
 8004a36:	611c      	str	r4, [r3, #16]
 8004a38:	60dc      	str	r4, [r3, #12]
 8004a3a:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004a3e:	619c      	str	r4, [r3, #24]
 8004a40:	615c      	str	r4, [r3, #20]
 8004a42:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004a46:	62dc      	str	r4, [r3, #44]	; 0x2c
 8004a48:	629c      	str	r4, [r3, #40]	; 0x28
 8004a4a:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004a4e:	635c      	str	r4, [r3, #52]	; 0x34
 8004a50:	631c      	str	r4, [r3, #48]	; 0x30
 8004a52:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004a56:	63dc      	str	r4, [r3, #60]	; 0x3c
 8004a58:	639c      	str	r4, [r3, #56]	; 0x38
 8004a5a:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004a5e:	645c      	str	r4, [r3, #68]	; 0x44
 8004a60:	641c      	str	r4, [r3, #64]	; 0x40
 8004a62:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004a66:	64dc      	str	r4, [r3, #76]	; 0x4c
 8004a68:	649c      	str	r4, [r3, #72]	; 0x48
 8004a6a:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004a6e:	771c      	strb	r4, [r3, #28]
 8004a70:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8004a74:	625c      	str	r4, [r3, #36]	; 0x24
 8004a76:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a84:	f000 b802 	b.w	8004a8c <__strtok_r>
 8004a88:	20000580 	.word	0x20000580

08004a8c <__strtok_r>:
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8e:	b948      	cbnz	r0, 8004aa4 <__strtok_r+0x18>
 8004a90:	6810      	ldr	r0, [r2, #0]
 8004a92:	b938      	cbnz	r0, 8004aa4 <__strtok_r+0x18>
 8004a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004a9a:	b15e      	cbz	r6, 8004ab4 <__strtok_r+0x28>
 8004a9c:	42b5      	cmp	r5, r6
 8004a9e:	d1fa      	bne.n	8004a96 <__strtok_r+0xa>
 8004aa0:	b12b      	cbz	r3, 8004aae <__strtok_r+0x22>
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	460f      	mov	r7, r1
 8004aa8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004aac:	e7f3      	b.n	8004a96 <__strtok_r+0xa>
 8004aae:	6014      	str	r4, [r2, #0]
 8004ab0:	7003      	strb	r3, [r0, #0]
 8004ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab4:	b94d      	cbnz	r5, 8004aca <__strtok_r+0x3e>
 8004ab6:	6015      	str	r5, [r2, #0]
 8004ab8:	4628      	mov	r0, r5
 8004aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004abc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004ac0:	42b5      	cmp	r5, r6
 8004ac2:	d007      	beq.n	8004ad4 <__strtok_r+0x48>
 8004ac4:	2e00      	cmp	r6, #0
 8004ac6:	d1f9      	bne.n	8004abc <__strtok_r+0x30>
 8004ac8:	461c      	mov	r4, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	460f      	mov	r7, r1
 8004ace:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004ad2:	e7f3      	b.n	8004abc <__strtok_r+0x30>
 8004ad4:	b115      	cbz	r5, 8004adc <__strtok_r+0x50>
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	7021      	strb	r1, [r4, #0]
 8004ada:	e000      	b.n	8004ade <__strtok_r+0x52>
 8004adc:	462b      	mov	r3, r5
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004ae4 <time>:
 8004ae4:	b513      	push	{r0, r1, r4, lr}
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <time+0x24>)
 8004ae8:	4604      	mov	r4, r0
 8004aea:	2200      	movs	r2, #0
 8004aec:	4669      	mov	r1, sp
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	f000 fec6 	bl	8005880 <_gettimeofday_r>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	db03      	blt.n	8004b00 <time+0x1c>
 8004af8:	9800      	ldr	r0, [sp, #0]
 8004afa:	b11c      	cbz	r4, 8004b04 <time+0x20>
 8004afc:	6020      	str	r0, [r4, #0]
 8004afe:	e001      	b.n	8004b04 <time+0x20>
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	b002      	add	sp, #8
 8004b06:	bd10      	pop	{r4, pc}
 8004b08:	20000580 	.word	0x20000580

08004b0c <__tzcalc_limits>:
 8004b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	4604      	mov	r4, r0
 8004b12:	f000 fec7 	bl	80058a4 <__gettzinfo>
 8004b16:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8004b1a:	429c      	cmp	r4, r3
 8004b1c:	f340 8096 	ble.w	8004c4c <__tzcalc_limits+0x140>
 8004b20:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8004b24:	18e3      	adds	r3, r4, r3
 8004b26:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8004b2a:	109b      	asrs	r3, r3, #2
 8004b2c:	f240 156d 	movw	r5, #365	; 0x16d
 8004b30:	fb05 3502 	mla	r5, r5, r2, r3
 8004b34:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8004b38:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004b3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b40:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8004b44:	442b      	add	r3, r5
 8004b46:	18a5      	adds	r5, r4, r2
 8004b48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004b4c:	fb95 f5f2 	sdiv	r5, r5, r2
 8004b50:	441d      	add	r5, r3
 8004b52:	2364      	movs	r3, #100	; 0x64
 8004b54:	fb94 f7f2 	sdiv	r7, r4, r2
 8004b58:	fb94 f6f3 	sdiv	r6, r4, r3
 8004b5c:	fb02 4717 	mls	r7, r2, r7, r4
 8004b60:	fb03 4616 	mls	r6, r3, r6, r4
 8004b64:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8004b68:	fab7 fe87 	clz	lr, r7
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	f004 0303 	and.w	r3, r4, #3
 8004b72:	6044      	str	r4, [r0, #4]
 8004b74:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004b78:	4601      	mov	r1, r0
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	f04f 0c07 	mov.w	ip, #7
 8004b80:	7a0b      	ldrb	r3, [r1, #8]
 8004b82:	2b4a      	cmp	r3, #74	; 0x4a
 8004b84:	d10e      	bne.n	8004ba4 <__tzcalc_limits+0x98>
 8004b86:	694b      	ldr	r3, [r1, #20]
 8004b88:	9a00      	ldr	r2, [sp, #0]
 8004b8a:	18ec      	adds	r4, r5, r3
 8004b8c:	b902      	cbnz	r2, 8004b90 <__tzcalc_limits+0x84>
 8004b8e:	b906      	cbnz	r6, 8004b92 <__tzcalc_limits+0x86>
 8004b90:	b927      	cbnz	r7, 8004b9c <__tzcalc_limits+0x90>
 8004b92:	2b3b      	cmp	r3, #59	; 0x3b
 8004b94:	bfd4      	ite	le
 8004b96:	2300      	movle	r3, #0
 8004b98:	2301      	movgt	r3, #1
 8004b9a:	e000      	b.n	8004b9e <__tzcalc_limits+0x92>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4423      	add	r3, r4
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	e03f      	b.n	8004c24 <__tzcalc_limits+0x118>
 8004ba4:	2b44      	cmp	r3, #68	; 0x44
 8004ba6:	d102      	bne.n	8004bae <__tzcalc_limits+0xa2>
 8004ba8:	694b      	ldr	r3, [r1, #20]
 8004baa:	442b      	add	r3, r5
 8004bac:	e03a      	b.n	8004c24 <__tzcalc_limits+0x118>
 8004bae:	9b00      	ldr	r3, [sp, #0]
 8004bb0:	b92b      	cbnz	r3, 8004bbe <__tzcalc_limits+0xb2>
 8004bb2:	2e00      	cmp	r6, #0
 8004bb4:	bf0c      	ite	eq
 8004bb6:	46f0      	moveq	r8, lr
 8004bb8:	f04f 0801 	movne.w	r8, #1
 8004bbc:	e000      	b.n	8004bc0 <__tzcalc_limits+0xb4>
 8004bbe:	46f0      	mov	r8, lr
 8004bc0:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <__tzcalc_limits+0x148>)
 8004bc2:	68cc      	ldr	r4, [r1, #12]
 8004bc4:	2230      	movs	r2, #48	; 0x30
 8004bc6:	fb02 3808 	mla	r8, r2, r8, r3
 8004bca:	f1a8 0a04 	sub.w	sl, r8, #4
 8004bce:	46a9      	mov	r9, r5
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	42a3      	cmp	r3, r4
 8004bd4:	da04      	bge.n	8004be0 <__tzcalc_limits+0xd4>
 8004bd6:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8004bda:	3301      	adds	r3, #1
 8004bdc:	44d9      	add	r9, fp
 8004bde:	e7f8      	b.n	8004bd2 <__tzcalc_limits+0xc6>
 8004be0:	f109 0304 	add.w	r3, r9, #4
 8004be4:	fb93 fbfc 	sdiv	fp, r3, ip
 8004be8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8004bec:	2c01      	cmp	r4, #1
 8004bee:	ebca 0a03 	rsb	sl, sl, r3
 8004bf2:	694b      	ldr	r3, [r1, #20]
 8004bf4:	bfb8      	it	lt
 8004bf6:	2401      	movlt	r4, #1
 8004bf8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004bfc:	ebb3 0a0a 	subs.w	sl, r3, sl
 8004c00:	690b      	ldr	r3, [r1, #16]
 8004c02:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c06:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c0a:	bf48      	it	mi
 8004c0c:	f10a 0a07 	addmi.w	sl, sl, #7
 8004c10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004c14:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8004c18:	4453      	add	r3, sl
 8004c1a:	42a3      	cmp	r3, r4
 8004c1c:	db01      	blt.n	8004c22 <__tzcalc_limits+0x116>
 8004c1e:	3b07      	subs	r3, #7
 8004c20:	e7fb      	b.n	8004c1a <__tzcalc_limits+0x10e>
 8004c22:	444b      	add	r3, r9
 8004c24:	698c      	ldr	r4, [r1, #24]
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <__tzcalc_limits+0x14c>)
 8004c28:	fb02 4303 	mla	r3, r2, r3, r4
 8004c2c:	6a0c      	ldr	r4, [r1, #32]
 8004c2e:	4423      	add	r3, r4
 8004c30:	f841 3f1c 	str.w	r3, [r1, #28]!
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	4299      	cmp	r1, r3
 8004c38:	d1a2      	bne.n	8004b80 <__tzcalc_limits+0x74>
 8004c3a:	69c3      	ldr	r3, [r0, #28]
 8004c3c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	bfac      	ite	ge
 8004c42:	2300      	movge	r3, #0
 8004c44:	2301      	movlt	r3, #1
 8004c46:	6003      	str	r3, [r0, #0]
 8004c48:	2001      	movs	r0, #1
 8004c4a:	e000      	b.n	8004c4e <__tzcalc_limits+0x142>
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	b003      	add	sp, #12
 8004c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c54:	0800760c 	.word	0x0800760c
 8004c58:	00015180 	.word	0x00015180

08004c5c <__tz_lock>:
 8004c5c:	4770      	bx	lr

08004c5e <__tz_unlock>:
 8004c5e:	4770      	bx	lr

08004c60 <_tzset_unlocked>:
 8004c60:	4b01      	ldr	r3, [pc, #4]	; (8004c68 <_tzset_unlocked+0x8>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	f000 b802 	b.w	8004c6c <_tzset_unlocked_r>
 8004c68:	20000580 	.word	0x20000580

08004c6c <_tzset_unlocked_r>:
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	b08d      	sub	sp, #52	; 0x34
 8004c72:	4607      	mov	r7, r0
 8004c74:	f000 fe16 	bl	80058a4 <__gettzinfo>
 8004c78:	49b0      	ldr	r1, [pc, #704]	; (8004f3c <_tzset_unlocked_r+0x2d0>)
 8004c7a:	4eb1      	ldr	r6, [pc, #708]	; (8004f40 <_tzset_unlocked_r+0x2d4>)
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	4638      	mov	r0, r7
 8004c80:	f000 fdf6 	bl	8005870 <_getenv_r>
 8004c84:	4605      	mov	r5, r0
 8004c86:	b960      	cbnz	r0, 8004ca2 <_tzset_unlocked_r+0x36>
 8004c88:	4bae      	ldr	r3, [pc, #696]	; (8004f44 <_tzset_unlocked_r+0x2d8>)
 8004c8a:	4aaf      	ldr	r2, [pc, #700]	; (8004f48 <_tzset_unlocked_r+0x2dc>)
 8004c8c:	6018      	str	r0, [r3, #0]
 8004c8e:	4baf      	ldr	r3, [pc, #700]	; (8004f4c <_tzset_unlocked_r+0x2e0>)
 8004c90:	6018      	str	r0, [r3, #0]
 8004c92:	4baf      	ldr	r3, [pc, #700]	; (8004f50 <_tzset_unlocked_r+0x2e4>)
 8004c94:	6830      	ldr	r0, [r6, #0]
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	f7fe fbf9 	bl	8003490 <free>
 8004c9e:	6035      	str	r5, [r6, #0]
 8004ca0:	e148      	b.n	8004f34 <_tzset_unlocked_r+0x2c8>
 8004ca2:	6831      	ldr	r1, [r6, #0]
 8004ca4:	b979      	cbnz	r1, 8004cc6 <_tzset_unlocked_r+0x5a>
 8004ca6:	6830      	ldr	r0, [r6, #0]
 8004ca8:	f7fe fbf2 	bl	8003490 <free>
 8004cac:	4628      	mov	r0, r5
 8004cae:	f7fb fa95 	bl	80001dc <strlen>
 8004cb2:	1c41      	adds	r1, r0, #1
 8004cb4:	4638      	mov	r0, r7
 8004cb6:	f7fe fbf3 	bl	80034a0 <_malloc_r>
 8004cba:	6030      	str	r0, [r6, #0]
 8004cbc:	b148      	cbz	r0, 8004cd2 <_tzset_unlocked_r+0x66>
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	f001 fab6 	bl	8006230 <strcpy>
 8004cc4:	e005      	b.n	8004cd2 <_tzset_unlocked_r+0x66>
 8004cc6:	f7fb fa7f 	bl	80001c8 <strcmp>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f000 8132 	beq.w	8004f34 <_tzset_unlocked_r+0x2c8>
 8004cd0:	e7e9      	b.n	8004ca6 <_tzset_unlocked_r+0x3a>
 8004cd2:	782b      	ldrb	r3, [r5, #0]
 8004cd4:	4a9f      	ldr	r2, [pc, #636]	; (8004f54 <_tzset_unlocked_r+0x2e8>)
 8004cd6:	49a0      	ldr	r1, [pc, #640]	; (8004f58 <_tzset_unlocked_r+0x2ec>)
 8004cd8:	2b3a      	cmp	r3, #58	; 0x3a
 8004cda:	bf08      	it	eq
 8004cdc:	3501      	addeq	r5, #1
 8004cde:	ae0a      	add	r6, sp, #40	; 0x28
 8004ce0:	4633      	mov	r3, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f001 fa78 	bl	80061d8 <siscanf>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f340 8123 	ble.w	8004f34 <_tzset_unlocked_r+0x2c8>
 8004cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf0:	18ef      	adds	r7, r5, r3
 8004cf2:	5ceb      	ldrb	r3, [r5, r3]
 8004cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8004cf6:	d103      	bne.n	8004d00 <_tzset_unlocked_r+0x94>
 8004cf8:	3701      	adds	r7, #1
 8004cfa:	f04f 35ff 	mov.w	r5, #4294967295
 8004cfe:	e003      	b.n	8004d08 <_tzset_unlocked_r+0x9c>
 8004d00:	2b2b      	cmp	r3, #43	; 0x2b
 8004d02:	bf08      	it	eq
 8004d04:	3701      	addeq	r7, #1
 8004d06:	2501      	movs	r5, #1
 8004d08:	f10d 0a20 	add.w	sl, sp, #32
 8004d0c:	f10d 0b1e 	add.w	fp, sp, #30
 8004d10:	f04f 0800 	mov.w	r8, #0
 8004d14:	9603      	str	r6, [sp, #12]
 8004d16:	f8cd a008 	str.w	sl, [sp, #8]
 8004d1a:	9601      	str	r6, [sp, #4]
 8004d1c:	f8cd b000 	str.w	fp, [sp]
 8004d20:	4633      	mov	r3, r6
 8004d22:	aa07      	add	r2, sp, #28
 8004d24:	498d      	ldr	r1, [pc, #564]	; (8004f5c <_tzset_unlocked_r+0x2f0>)
 8004d26:	f8ad 801e 	strh.w	r8, [sp, #30]
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f8ad 8020 	strh.w	r8, [sp, #32]
 8004d30:	f001 fa52 	bl	80061d8 <siscanf>
 8004d34:	4540      	cmp	r0, r8
 8004d36:	f340 80fd 	ble.w	8004f34 <_tzset_unlocked_r+0x2c8>
 8004d3a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004d3e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004d42:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8004f68 <_tzset_unlocked_r+0x2fc>
 8004d46:	213c      	movs	r1, #60	; 0x3c
 8004d48:	fb01 3302 	mla	r3, r1, r2, r3
 8004d4c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004d50:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004d54:	fb01 3302 	mla	r3, r1, r2, r3
 8004d58:	435d      	muls	r5, r3
 8004d5a:	6225      	str	r5, [r4, #32]
 8004d5c:	4d7c      	ldr	r5, [pc, #496]	; (8004f50 <_tzset_unlocked_r+0x2e4>)
 8004d5e:	4b7d      	ldr	r3, [pc, #500]	; (8004f54 <_tzset_unlocked_r+0x2e8>)
 8004d60:	602b      	str	r3, [r5, #0]
 8004d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d64:	497c      	ldr	r1, [pc, #496]	; (8004f58 <_tzset_unlocked_r+0x2ec>)
 8004d66:	441f      	add	r7, r3
 8004d68:	464a      	mov	r2, r9
 8004d6a:	4633      	mov	r3, r6
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	f001 fa33 	bl	80061d8 <siscanf>
 8004d72:	4540      	cmp	r0, r8
 8004d74:	dc08      	bgt.n	8004d88 <_tzset_unlocked_r+0x11c>
 8004d76:	682b      	ldr	r3, [r5, #0]
 8004d78:	606b      	str	r3, [r5, #4]
 8004d7a:	4b72      	ldr	r3, [pc, #456]	; (8004f44 <_tzset_unlocked_r+0x2d8>)
 8004d7c:	6a22      	ldr	r2, [r4, #32]
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	4b72      	ldr	r3, [pc, #456]	; (8004f4c <_tzset_unlocked_r+0x2e0>)
 8004d82:	f8c3 8000 	str.w	r8, [r3]
 8004d86:	e0d5      	b.n	8004f34 <_tzset_unlocked_r+0x2c8>
 8004d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d8a:	f8c5 9004 	str.w	r9, [r5, #4]
 8004d8e:	18fd      	adds	r5, r7, r3
 8004d90:	5cfb      	ldrb	r3, [r7, r3]
 8004d92:	2b2d      	cmp	r3, #45	; 0x2d
 8004d94:	d103      	bne.n	8004d9e <_tzset_unlocked_r+0x132>
 8004d96:	3501      	adds	r5, #1
 8004d98:	f04f 37ff 	mov.w	r7, #4294967295
 8004d9c:	e003      	b.n	8004da6 <_tzset_unlocked_r+0x13a>
 8004d9e:	2b2b      	cmp	r3, #43	; 0x2b
 8004da0:	bf08      	it	eq
 8004da2:	3501      	addeq	r5, #1
 8004da4:	2701      	movs	r7, #1
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004dac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004db0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004db4:	930a      	str	r3, [sp, #40]	; 0x28
 8004db6:	9603      	str	r6, [sp, #12]
 8004db8:	f8cd a008 	str.w	sl, [sp, #8]
 8004dbc:	9601      	str	r6, [sp, #4]
 8004dbe:	f8cd b000 	str.w	fp, [sp]
 8004dc2:	4633      	mov	r3, r6
 8004dc4:	aa07      	add	r2, sp, #28
 8004dc6:	4965      	ldr	r1, [pc, #404]	; (8004f5c <_tzset_unlocked_r+0x2f0>)
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f001 fa05 	bl	80061d8 <siscanf>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	dc04      	bgt.n	8004ddc <_tzset_unlocked_r+0x170>
 8004dd2:	6a23      	ldr	r3, [r4, #32]
 8004dd4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8004dd8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004dda:	e00e      	b.n	8004dfa <_tzset_unlocked_r+0x18e>
 8004ddc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004de0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004de4:	213c      	movs	r1, #60	; 0x3c
 8004de6:	fb01 3302 	mla	r3, r1, r2, r3
 8004dea:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004dee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004df2:	fb01 3302 	mla	r3, r1, r2, r3
 8004df6:	435f      	muls	r7, r3
 8004df8:	63e7      	str	r7, [r4, #60]	; 0x3c
 8004dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfc:	4627      	mov	r7, r4
 8004dfe:	441d      	add	r5, r3
 8004e00:	f04f 0900 	mov.w	r9, #0
 8004e04:	782b      	ldrb	r3, [r5, #0]
 8004e06:	2b2c      	cmp	r3, #44	; 0x2c
 8004e08:	bf08      	it	eq
 8004e0a:	3501      	addeq	r5, #1
 8004e0c:	f895 8000 	ldrb.w	r8, [r5]
 8004e10:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8004e14:	d126      	bne.n	8004e64 <_tzset_unlocked_r+0x1f8>
 8004e16:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8004e1a:	9302      	str	r3, [sp, #8]
 8004e1c:	ab09      	add	r3, sp, #36	; 0x24
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	9603      	str	r6, [sp, #12]
 8004e22:	9601      	str	r6, [sp, #4]
 8004e24:	4633      	mov	r3, r6
 8004e26:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8004e2a:	494d      	ldr	r1, [pc, #308]	; (8004f60 <_tzset_unlocked_r+0x2f4>)
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f001 f9d3 	bl	80061d8 <siscanf>
 8004e32:	2803      	cmp	r0, #3
 8004e34:	d17e      	bne.n	8004f34 <_tzset_unlocked_r+0x2c8>
 8004e36:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8004e3a:	1e4b      	subs	r3, r1, #1
 8004e3c:	2b0b      	cmp	r3, #11
 8004e3e:	d879      	bhi.n	8004f34 <_tzset_unlocked_r+0x2c8>
 8004e40:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8004e44:	1e53      	subs	r3, r2, #1
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d874      	bhi.n	8004f34 <_tzset_unlocked_r+0x2c8>
 8004e4a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8004e4e:	2b06      	cmp	r3, #6
 8004e50:	d870      	bhi.n	8004f34 <_tzset_unlocked_r+0x2c8>
 8004e52:	f887 8008 	strb.w	r8, [r7, #8]
 8004e56:	60f9      	str	r1, [r7, #12]
 8004e58:	613a      	str	r2, [r7, #16]
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e5e:	eb05 0803 	add.w	r8, r5, r3
 8004e62:	e02a      	b.n	8004eba <_tzset_unlocked_r+0x24e>
 8004e64:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8004e68:	bf06      	itte	eq
 8004e6a:	3501      	addeq	r5, #1
 8004e6c:	4643      	moveq	r3, r8
 8004e6e:	2344      	movne	r3, #68	; 0x44
 8004e70:	220a      	movs	r2, #10
 8004e72:	a90b      	add	r1, sp, #44	; 0x2c
 8004e74:	4628      	mov	r0, r5
 8004e76:	9305      	str	r3, [sp, #20]
 8004e78:	f001 fa76 	bl	8006368 <strtoul>
 8004e7c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8004e80:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8004e84:	4545      	cmp	r5, r8
 8004e86:	9b05      	ldr	r3, [sp, #20]
 8004e88:	d114      	bne.n	8004eb4 <_tzset_unlocked_r+0x248>
 8004e8a:	234d      	movs	r3, #77	; 0x4d
 8004e8c:	f1b9 0f00 	cmp.w	r9, #0
 8004e90:	d107      	bne.n	8004ea2 <_tzset_unlocked_r+0x236>
 8004e92:	7223      	strb	r3, [r4, #8]
 8004e94:	2303      	movs	r3, #3
 8004e96:	60e3      	str	r3, [r4, #12]
 8004e98:	2302      	movs	r3, #2
 8004e9a:	6123      	str	r3, [r4, #16]
 8004e9c:	f8c4 9014 	str.w	r9, [r4, #20]
 8004ea0:	e00b      	b.n	8004eba <_tzset_unlocked_r+0x24e>
 8004ea2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004ea6:	230b      	movs	r3, #11
 8004ea8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004eaa:	2301      	movs	r3, #1
 8004eac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6323      	str	r3, [r4, #48]	; 0x30
 8004eb2:	e002      	b.n	8004eba <_tzset_unlocked_r+0x24e>
 8004eb4:	b280      	uxth	r0, r0
 8004eb6:	723b      	strb	r3, [r7, #8]
 8004eb8:	6178      	str	r0, [r7, #20]
 8004eba:	2302      	movs	r3, #2
 8004ebc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004ec6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004eca:	930a      	str	r3, [sp, #40]	; 0x28
 8004ecc:	f898 3000 	ldrb.w	r3, [r8]
 8004ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8004ed2:	d10b      	bne.n	8004eec <_tzset_unlocked_r+0x280>
 8004ed4:	9603      	str	r6, [sp, #12]
 8004ed6:	f8cd a008 	str.w	sl, [sp, #8]
 8004eda:	9601      	str	r6, [sp, #4]
 8004edc:	f8cd b000 	str.w	fp, [sp]
 8004ee0:	4633      	mov	r3, r6
 8004ee2:	aa07      	add	r2, sp, #28
 8004ee4:	491f      	ldr	r1, [pc, #124]	; (8004f64 <_tzset_unlocked_r+0x2f8>)
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f001 f976 	bl	80061d8 <siscanf>
 8004eec:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004ef0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004ef4:	213c      	movs	r1, #60	; 0x3c
 8004ef6:	fb01 3302 	mla	r3, r1, r2, r3
 8004efa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004efe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004f02:	fb01 3302 	mla	r3, r1, r2, r3
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004f0a:	f109 0901 	add.w	r9, r9, #1
 8004f0e:	f1b9 0f02 	cmp.w	r9, #2
 8004f12:	4445      	add	r5, r8
 8004f14:	f107 071c 	add.w	r7, r7, #28
 8004f18:	f47f af74 	bne.w	8004e04 <_tzset_unlocked_r+0x198>
 8004f1c:	6860      	ldr	r0, [r4, #4]
 8004f1e:	f7ff fdf5 	bl	8004b0c <__tzcalc_limits>
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <_tzset_unlocked_r+0x2d8>)
 8004f24:	6a22      	ldr	r2, [r4, #32]
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <_tzset_unlocked_r+0x2e0>)
 8004f2e:	bf18      	it	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	b00d      	add	sp, #52	; 0x34
 8004f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3a:	bf00      	nop
 8004f3c:	080076c8 	.word	0x080076c8
 8004f40:	2000068c 	.word	0x2000068c
 8004f44:	20000694 	.word	0x20000694
 8004f48:	080076cb 	.word	0x080076cb
 8004f4c:	20000690 	.word	0x20000690
 8004f50:	20000444 	.word	0x20000444
 8004f54:	2000067f 	.word	0x2000067f
 8004f58:	080076cf 	.word	0x080076cf
 8004f5c:	080076f2 	.word	0x080076f2
 8004f60:	080076de 	.word	0x080076de
 8004f64:	080076f1 	.word	0x080076f1
 8004f68:	20000674 	.word	0x20000674

08004f6c <div>:
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	b510      	push	{r4, lr}
 8004f70:	fb91 f4f2 	sdiv	r4, r1, r2
 8004f74:	fb02 1314 	mls	r3, r2, r4, r1
 8004f78:	db04      	blt.n	8004f84 <div+0x18>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	da07      	bge.n	8004f8e <div+0x22>
 8004f7e:	3401      	adds	r4, #1
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	e004      	b.n	8004f8e <div+0x22>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bfc4      	itt	gt
 8004f88:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8004f8c:	189b      	addgt	r3, r3, r2
 8004f8e:	6004      	str	r4, [r0, #0]
 8004f90:	6043      	str	r3, [r0, #4]
 8004f92:	bd10      	pop	{r4, pc}

08004f94 <_malloc_trim_r>:
 8004f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f98:	4f25      	ldr	r7, [pc, #148]	; (8005030 <_malloc_trim_r+0x9c>)
 8004f9a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800503c <_malloc_trim_r+0xa8>
 8004f9e:	4689      	mov	r9, r1
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	f7fe feff 	bl	8003da4 <__malloc_lock>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	685d      	ldr	r5, [r3, #4]
 8004faa:	f1a8 0411 	sub.w	r4, r8, #17
 8004fae:	f025 0503 	bic.w	r5, r5, #3
 8004fb2:	442c      	add	r4, r5
 8004fb4:	ebc9 0404 	rsb	r4, r9, r4
 8004fb8:	fbb4 f4f8 	udiv	r4, r4, r8
 8004fbc:	3c01      	subs	r4, #1
 8004fbe:	fb08 f404 	mul.w	r4, r8, r4
 8004fc2:	4544      	cmp	r4, r8
 8004fc4:	da05      	bge.n	8004fd2 <_malloc_trim_r+0x3e>
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f7fe feed 	bl	8003da6 <__malloc_unlock>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f7fe fee7 	bl	8003da8 <_sbrk_r>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	442b      	add	r3, r5
 8004fde:	4298      	cmp	r0, r3
 8004fe0:	d1f1      	bne.n	8004fc6 <_malloc_trim_r+0x32>
 8004fe2:	4261      	negs	r1, r4
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7fe fedf 	bl	8003da8 <_sbrk_r>
 8004fea:	3001      	adds	r0, #1
 8004fec:	d110      	bne.n	8005010 <_malloc_trim_r+0x7c>
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f7fe fed9 	bl	8003da8 <_sbrk_r>
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	1a83      	subs	r3, r0, r2
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	dde3      	ble.n	8004fc6 <_malloc_trim_r+0x32>
 8004ffe:	490d      	ldr	r1, [pc, #52]	; (8005034 <_malloc_trim_r+0xa0>)
 8005000:	6809      	ldr	r1, [r1, #0]
 8005002:	1a40      	subs	r0, r0, r1
 8005004:	490c      	ldr	r1, [pc, #48]	; (8005038 <_malloc_trim_r+0xa4>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6008      	str	r0, [r1, #0]
 800500c:	6053      	str	r3, [r2, #4]
 800500e:	e7da      	b.n	8004fc6 <_malloc_trim_r+0x32>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4a09      	ldr	r2, [pc, #36]	; (8005038 <_malloc_trim_r+0xa4>)
 8005014:	1b2d      	subs	r5, r5, r4
 8005016:	f045 0501 	orr.w	r5, r5, #1
 800501a:	605d      	str	r5, [r3, #4]
 800501c:	6813      	ldr	r3, [r2, #0]
 800501e:	4630      	mov	r0, r6
 8005020:	1b1c      	subs	r4, r3, r4
 8005022:	6014      	str	r4, [r2, #0]
 8005024:	f7fe febf 	bl	8003da6 <__malloc_unlock>
 8005028:	2001      	movs	r0, #1
 800502a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800502e:	bf00      	nop
 8005030:	20000034 	.word	0x20000034
 8005034:	20000440 	.word	0x20000440
 8005038:	2000064c 	.word	0x2000064c
 800503c:	00000080 	.word	0x00000080

08005040 <_free_r>:
 8005040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005044:	4604      	mov	r4, r0
 8005046:	4688      	mov	r8, r1
 8005048:	2900      	cmp	r1, #0
 800504a:	f000 80ad 	beq.w	80051a8 <_free_r+0x168>
 800504e:	f7fe fea9 	bl	8003da4 <__malloc_lock>
 8005052:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005056:	4d55      	ldr	r5, [pc, #340]	; (80051ac <_free_r+0x16c>)
 8005058:	f022 0001 	bic.w	r0, r2, #1
 800505c:	f1a8 0308 	sub.w	r3, r8, #8
 8005060:	181f      	adds	r7, r3, r0
 8005062:	68a9      	ldr	r1, [r5, #8]
 8005064:	687e      	ldr	r6, [r7, #4]
 8005066:	428f      	cmp	r7, r1
 8005068:	f026 0603 	bic.w	r6, r6, #3
 800506c:	f002 0201 	and.w	r2, r2, #1
 8005070:	d11b      	bne.n	80050aa <_free_r+0x6a>
 8005072:	4430      	add	r0, r6
 8005074:	b93a      	cbnz	r2, 8005086 <_free_r+0x46>
 8005076:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	4410      	add	r0, r2
 800507e:	6899      	ldr	r1, [r3, #8]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	60ca      	str	r2, [r1, #12]
 8005084:	6091      	str	r1, [r2, #8]
 8005086:	f040 0201 	orr.w	r2, r0, #1
 800508a:	605a      	str	r2, [r3, #4]
 800508c:	60ab      	str	r3, [r5, #8]
 800508e:	4b48      	ldr	r3, [pc, #288]	; (80051b0 <_free_r+0x170>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4298      	cmp	r0, r3
 8005094:	d304      	bcc.n	80050a0 <_free_r+0x60>
 8005096:	4b47      	ldr	r3, [pc, #284]	; (80051b4 <_free_r+0x174>)
 8005098:	4620      	mov	r0, r4
 800509a:	6819      	ldr	r1, [r3, #0]
 800509c:	f7ff ff7a 	bl	8004f94 <_malloc_trim_r>
 80050a0:	4620      	mov	r0, r4
 80050a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050a6:	f7fe be7e 	b.w	8003da6 <__malloc_unlock>
 80050aa:	607e      	str	r6, [r7, #4]
 80050ac:	b97a      	cbnz	r2, 80050ce <_free_r+0x8e>
 80050ae:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80050b2:	1a5b      	subs	r3, r3, r1
 80050b4:	4408      	add	r0, r1
 80050b6:	6899      	ldr	r1, [r3, #8]
 80050b8:	f105 0e08 	add.w	lr, r5, #8
 80050bc:	4571      	cmp	r1, lr
 80050be:	d008      	beq.n	80050d2 <_free_r+0x92>
 80050c0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80050c4:	f8c1 e00c 	str.w	lr, [r1, #12]
 80050c8:	f8ce 1008 	str.w	r1, [lr, #8]
 80050cc:	e002      	b.n	80050d4 <_free_r+0x94>
 80050ce:	2200      	movs	r2, #0
 80050d0:	e000      	b.n	80050d4 <_free_r+0x94>
 80050d2:	2201      	movs	r2, #1
 80050d4:	19b9      	adds	r1, r7, r6
 80050d6:	6849      	ldr	r1, [r1, #4]
 80050d8:	07c9      	lsls	r1, r1, #31
 80050da:	d40e      	bmi.n	80050fa <_free_r+0xba>
 80050dc:	4430      	add	r0, r6
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	b942      	cbnz	r2, 80050f4 <_free_r+0xb4>
 80050e2:	4e35      	ldr	r6, [pc, #212]	; (80051b8 <_free_r+0x178>)
 80050e4:	42b1      	cmp	r1, r6
 80050e6:	d105      	bne.n	80050f4 <_free_r+0xb4>
 80050e8:	616b      	str	r3, [r5, #20]
 80050ea:	612b      	str	r3, [r5, #16]
 80050ec:	2201      	movs	r2, #1
 80050ee:	60d9      	str	r1, [r3, #12]
 80050f0:	6099      	str	r1, [r3, #8]
 80050f2:	e002      	b.n	80050fa <_free_r+0xba>
 80050f4:	68fe      	ldr	r6, [r7, #12]
 80050f6:	60ce      	str	r6, [r1, #12]
 80050f8:	60b1      	str	r1, [r6, #8]
 80050fa:	f040 0101 	orr.w	r1, r0, #1
 80050fe:	6059      	str	r1, [r3, #4]
 8005100:	5018      	str	r0, [r3, r0]
 8005102:	2a00      	cmp	r2, #0
 8005104:	d1cc      	bne.n	80050a0 <_free_r+0x60>
 8005106:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800510a:	d212      	bcs.n	8005132 <_free_r+0xf2>
 800510c:	08c0      	lsrs	r0, r0, #3
 800510e:	1081      	asrs	r1, r0, #2
 8005110:	2201      	movs	r2, #1
 8005112:	fa02 f101 	lsl.w	r1, r2, r1
 8005116:	686a      	ldr	r2, [r5, #4]
 8005118:	3001      	adds	r0, #1
 800511a:	430a      	orrs	r2, r1
 800511c:	606a      	str	r2, [r5, #4]
 800511e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005122:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005126:	6099      	str	r1, [r3, #8]
 8005128:	3a08      	subs	r2, #8
 800512a:	60da      	str	r2, [r3, #12]
 800512c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005130:	e038      	b.n	80051a4 <_free_r+0x164>
 8005132:	0a42      	lsrs	r2, r0, #9
 8005134:	2a04      	cmp	r2, #4
 8005136:	d802      	bhi.n	800513e <_free_r+0xfe>
 8005138:	0982      	lsrs	r2, r0, #6
 800513a:	3238      	adds	r2, #56	; 0x38
 800513c:	e015      	b.n	800516a <_free_r+0x12a>
 800513e:	2a14      	cmp	r2, #20
 8005140:	d801      	bhi.n	8005146 <_free_r+0x106>
 8005142:	325b      	adds	r2, #91	; 0x5b
 8005144:	e011      	b.n	800516a <_free_r+0x12a>
 8005146:	2a54      	cmp	r2, #84	; 0x54
 8005148:	d802      	bhi.n	8005150 <_free_r+0x110>
 800514a:	0b02      	lsrs	r2, r0, #12
 800514c:	326e      	adds	r2, #110	; 0x6e
 800514e:	e00c      	b.n	800516a <_free_r+0x12a>
 8005150:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005154:	d802      	bhi.n	800515c <_free_r+0x11c>
 8005156:	0bc2      	lsrs	r2, r0, #15
 8005158:	3277      	adds	r2, #119	; 0x77
 800515a:	e006      	b.n	800516a <_free_r+0x12a>
 800515c:	f240 5154 	movw	r1, #1364	; 0x554
 8005160:	428a      	cmp	r2, r1
 8005162:	bf9a      	itte	ls
 8005164:	0c82      	lsrls	r2, r0, #18
 8005166:	327c      	addls	r2, #124	; 0x7c
 8005168:	227e      	movhi	r2, #126	; 0x7e
 800516a:	1c51      	adds	r1, r2, #1
 800516c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005170:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005174:	4f0d      	ldr	r7, [pc, #52]	; (80051ac <_free_r+0x16c>)
 8005176:	428e      	cmp	r6, r1
 8005178:	d10b      	bne.n	8005192 <_free_r+0x152>
 800517a:	2101      	movs	r1, #1
 800517c:	1092      	asrs	r2, r2, #2
 800517e:	fa01 f202 	lsl.w	r2, r1, r2
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4311      	orrs	r1, r2
 8005186:	6079      	str	r1, [r7, #4]
 8005188:	4631      	mov	r1, r6
 800518a:	e008      	b.n	800519e <_free_r+0x15e>
 800518c:	6889      	ldr	r1, [r1, #8]
 800518e:	428e      	cmp	r6, r1
 8005190:	d004      	beq.n	800519c <_free_r+0x15c>
 8005192:	684a      	ldr	r2, [r1, #4]
 8005194:	f022 0203 	bic.w	r2, r2, #3
 8005198:	4290      	cmp	r0, r2
 800519a:	d3f7      	bcc.n	800518c <_free_r+0x14c>
 800519c:	68ce      	ldr	r6, [r1, #12]
 800519e:	60de      	str	r6, [r3, #12]
 80051a0:	6099      	str	r1, [r3, #8]
 80051a2:	60b3      	str	r3, [r6, #8]
 80051a4:	60cb      	str	r3, [r1, #12]
 80051a6:	e77b      	b.n	80050a0 <_free_r+0x60>
 80051a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ac:	20000034 	.word	0x20000034
 80051b0:	2000043c 	.word	0x2000043c
 80051b4:	20000648 	.word	0x20000648
 80051b8:	2000003c 	.word	0x2000003c

080051bc <rshift>:
 80051bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051be:	6906      	ldr	r6, [r0, #16]
 80051c0:	114b      	asrs	r3, r1, #5
 80051c2:	42b3      	cmp	r3, r6
 80051c4:	f100 0514 	add.w	r5, r0, #20
 80051c8:	da27      	bge.n	800521a <rshift+0x5e>
 80051ca:	f011 011f 	ands.w	r1, r1, #31
 80051ce:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80051d2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80051d6:	d101      	bne.n	80051dc <rshift+0x20>
 80051d8:	4629      	mov	r1, r5
 80051da:	e016      	b.n	800520a <rshift+0x4e>
 80051dc:	1d14      	adds	r4, r2, #4
 80051de:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80051e2:	f1c1 0e20 	rsb	lr, r1, #32
 80051e6:	40ca      	lsrs	r2, r1
 80051e8:	462b      	mov	r3, r5
 80051ea:	42b4      	cmp	r4, r6
 80051ec:	d209      	bcs.n	8005202 <rshift+0x46>
 80051ee:	6827      	ldr	r7, [r4, #0]
 80051f0:	fa07 f70e 	lsl.w	r7, r7, lr
 80051f4:	433a      	orrs	r2, r7
 80051f6:	f843 2b04 	str.w	r2, [r3], #4
 80051fa:	f854 2b04 	ldr.w	r2, [r4], #4
 80051fe:	40ca      	lsrs	r2, r1
 8005200:	e7f3      	b.n	80051ea <rshift+0x2e>
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	b152      	cbz	r2, 800521c <rshift+0x60>
 8005206:	3304      	adds	r3, #4
 8005208:	e008      	b.n	800521c <rshift+0x60>
 800520a:	42b2      	cmp	r2, r6
 800520c:	460b      	mov	r3, r1
 800520e:	d205      	bcs.n	800521c <rshift+0x60>
 8005210:	f852 3b04 	ldr.w	r3, [r2], #4
 8005214:	f841 3b04 	str.w	r3, [r1], #4
 8005218:	e7f7      	b.n	800520a <rshift+0x4e>
 800521a:	462b      	mov	r3, r5
 800521c:	1b5b      	subs	r3, r3, r5
 800521e:	109b      	asrs	r3, r3, #2
 8005220:	6103      	str	r3, [r0, #16]
 8005222:	b903      	cbnz	r3, 8005226 <rshift+0x6a>
 8005224:	6143      	str	r3, [r0, #20]
 8005226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005228 <__hexdig_fun>:
 8005228:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800522c:	2b09      	cmp	r3, #9
 800522e:	d801      	bhi.n	8005234 <__hexdig_fun+0xc>
 8005230:	3820      	subs	r0, #32
 8005232:	e00a      	b.n	800524a <__hexdig_fun+0x22>
 8005234:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005238:	2b05      	cmp	r3, #5
 800523a:	d801      	bhi.n	8005240 <__hexdig_fun+0x18>
 800523c:	3847      	subs	r0, #71	; 0x47
 800523e:	e004      	b.n	800524a <__hexdig_fun+0x22>
 8005240:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005244:	2b05      	cmp	r3, #5
 8005246:	d802      	bhi.n	800524e <__hexdig_fun+0x26>
 8005248:	3827      	subs	r0, #39	; 0x27
 800524a:	b2c0      	uxtb	r0, r0
 800524c:	4770      	bx	lr
 800524e:	2000      	movs	r0, #0
 8005250:	4770      	bx	lr

08005252 <__gethex>:
 8005252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005256:	b08b      	sub	sp, #44	; 0x2c
 8005258:	468a      	mov	sl, r1
 800525a:	4690      	mov	r8, r2
 800525c:	9306      	str	r3, [sp, #24]
 800525e:	9002      	str	r0, [sp, #8]
 8005260:	f000 fbc6 	bl	80059f0 <_localeconv_r>
 8005264:	6803      	ldr	r3, [r0, #0]
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	4618      	mov	r0, r3
 800526a:	f7fa ffb7 	bl	80001dc <strlen>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	9001      	str	r0, [sp, #4]
 8005272:	4403      	add	r3, r0
 8005274:	f04f 0b00 	mov.w	fp, #0
 8005278:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800527c:	9307      	str	r3, [sp, #28]
 800527e:	f8da 3000 	ldr.w	r3, [sl]
 8005282:	3302      	adds	r3, #2
 8005284:	461f      	mov	r7, r3
 8005286:	f813 0b01 	ldrb.w	r0, [r3], #1
 800528a:	2830      	cmp	r0, #48	; 0x30
 800528c:	d102      	bne.n	8005294 <__gethex+0x42>
 800528e:	f10b 0b01 	add.w	fp, fp, #1
 8005292:	e7f7      	b.n	8005284 <__gethex+0x32>
 8005294:	f7ff ffc8 	bl	8005228 <__hexdig_fun>
 8005298:	4604      	mov	r4, r0
 800529a:	b9e0      	cbnz	r0, 80052d6 <__gethex+0x84>
 800529c:	9a01      	ldr	r2, [sp, #4]
 800529e:	9903      	ldr	r1, [sp, #12]
 80052a0:	4638      	mov	r0, r7
 80052a2:	f000 ffcd 	bl	8006240 <strncmp>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d134      	bne.n	8005314 <__gethex+0xc2>
 80052aa:	9b01      	ldr	r3, [sp, #4]
 80052ac:	5cf8      	ldrb	r0, [r7, r3]
 80052ae:	18fe      	adds	r6, r7, r3
 80052b0:	f7ff ffba 	bl	8005228 <__hexdig_fun>
 80052b4:	b380      	cbz	r0, 8005318 <__gethex+0xc6>
 80052b6:	4633      	mov	r3, r6
 80052b8:	7818      	ldrb	r0, [r3, #0]
 80052ba:	2830      	cmp	r0, #48	; 0x30
 80052bc:	461f      	mov	r7, r3
 80052be:	f103 0301 	add.w	r3, r3, #1
 80052c2:	d0f9      	beq.n	80052b8 <__gethex+0x66>
 80052c4:	f7ff ffb0 	bl	8005228 <__hexdig_fun>
 80052c8:	fab0 f580 	clz	r5, r0
 80052cc:	096d      	lsrs	r5, r5, #5
 80052ce:	4634      	mov	r4, r6
 80052d0:	f04f 0b01 	mov.w	fp, #1
 80052d4:	e001      	b.n	80052da <__gethex+0x88>
 80052d6:	2500      	movs	r5, #0
 80052d8:	462c      	mov	r4, r5
 80052da:	463a      	mov	r2, r7
 80052dc:	4616      	mov	r6, r2
 80052de:	3201      	adds	r2, #1
 80052e0:	7830      	ldrb	r0, [r6, #0]
 80052e2:	f7ff ffa1 	bl	8005228 <__hexdig_fun>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d1f8      	bne.n	80052dc <__gethex+0x8a>
 80052ea:	9a01      	ldr	r2, [sp, #4]
 80052ec:	9903      	ldr	r1, [sp, #12]
 80052ee:	4630      	mov	r0, r6
 80052f0:	f000 ffa6 	bl	8006240 <strncmp>
 80052f4:	b950      	cbnz	r0, 800530c <__gethex+0xba>
 80052f6:	b954      	cbnz	r4, 800530e <__gethex+0xbc>
 80052f8:	9b01      	ldr	r3, [sp, #4]
 80052fa:	18f4      	adds	r4, r6, r3
 80052fc:	4622      	mov	r2, r4
 80052fe:	4616      	mov	r6, r2
 8005300:	3201      	adds	r2, #1
 8005302:	7830      	ldrb	r0, [r6, #0]
 8005304:	f7ff ff90 	bl	8005228 <__hexdig_fun>
 8005308:	2800      	cmp	r0, #0
 800530a:	d1f8      	bne.n	80052fe <__gethex+0xac>
 800530c:	b134      	cbz	r4, 800531c <__gethex+0xca>
 800530e:	1ba4      	subs	r4, r4, r6
 8005310:	00a4      	lsls	r4, r4, #2
 8005312:	e003      	b.n	800531c <__gethex+0xca>
 8005314:	463e      	mov	r6, r7
 8005316:	e000      	b.n	800531a <__gethex+0xc8>
 8005318:	4604      	mov	r4, r0
 800531a:	2501      	movs	r5, #1
 800531c:	7833      	ldrb	r3, [r6, #0]
 800531e:	2b50      	cmp	r3, #80	; 0x50
 8005320:	d001      	beq.n	8005326 <__gethex+0xd4>
 8005322:	2b70      	cmp	r3, #112	; 0x70
 8005324:	d12a      	bne.n	800537c <__gethex+0x12a>
 8005326:	7873      	ldrb	r3, [r6, #1]
 8005328:	2b2b      	cmp	r3, #43	; 0x2b
 800532a:	d008      	beq.n	800533e <__gethex+0xec>
 800532c:	2b2d      	cmp	r3, #45	; 0x2d
 800532e:	d003      	beq.n	8005338 <__gethex+0xe6>
 8005330:	1c71      	adds	r1, r6, #1
 8005332:	f04f 0900 	mov.w	r9, #0
 8005336:	e005      	b.n	8005344 <__gethex+0xf2>
 8005338:	f04f 0901 	mov.w	r9, #1
 800533c:	e001      	b.n	8005342 <__gethex+0xf0>
 800533e:	f04f 0900 	mov.w	r9, #0
 8005342:	1cb1      	adds	r1, r6, #2
 8005344:	7808      	ldrb	r0, [r1, #0]
 8005346:	f7ff ff6f 	bl	8005228 <__hexdig_fun>
 800534a:	1e43      	subs	r3, r0, #1
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b18      	cmp	r3, #24
 8005350:	d814      	bhi.n	800537c <__gethex+0x12a>
 8005352:	f1a0 0210 	sub.w	r2, r0, #16
 8005356:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800535a:	f7ff ff65 	bl	8005228 <__hexdig_fun>
 800535e:	1e43      	subs	r3, r0, #1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b18      	cmp	r3, #24
 8005364:	d804      	bhi.n	8005370 <__gethex+0x11e>
 8005366:	230a      	movs	r3, #10
 8005368:	fb03 0202 	mla	r2, r3, r2, r0
 800536c:	3a10      	subs	r2, #16
 800536e:	e7f2      	b.n	8005356 <__gethex+0x104>
 8005370:	f1b9 0f00 	cmp.w	r9, #0
 8005374:	d000      	beq.n	8005378 <__gethex+0x126>
 8005376:	4252      	negs	r2, r2
 8005378:	4414      	add	r4, r2
 800537a:	e000      	b.n	800537e <__gethex+0x12c>
 800537c:	4631      	mov	r1, r6
 800537e:	f8ca 1000 	str.w	r1, [sl]
 8005382:	b12d      	cbz	r5, 8005390 <__gethex+0x13e>
 8005384:	f1bb 0f00 	cmp.w	fp, #0
 8005388:	bf14      	ite	ne
 800538a:	2000      	movne	r0, #0
 800538c:	2006      	moveq	r0, #6
 800538e:	e17c      	b.n	800568a <__gethex+0x438>
 8005390:	1bf3      	subs	r3, r6, r7
 8005392:	3b01      	subs	r3, #1
 8005394:	4629      	mov	r1, r5
 8005396:	2b07      	cmp	r3, #7
 8005398:	dd02      	ble.n	80053a0 <__gethex+0x14e>
 800539a:	3101      	adds	r1, #1
 800539c:	105b      	asrs	r3, r3, #1
 800539e:	e7fa      	b.n	8005396 <__gethex+0x144>
 80053a0:	9802      	ldr	r0, [sp, #8]
 80053a2:	f000 fb29 	bl	80059f8 <_Balloc>
 80053a6:	9b01      	ldr	r3, [sp, #4]
 80053a8:	f100 0a14 	add.w	sl, r0, #20
 80053ac:	f04f 0900 	mov.w	r9, #0
 80053b0:	f1c3 0301 	rsb	r3, r3, #1
 80053b4:	4605      	mov	r5, r0
 80053b6:	f8cd a010 	str.w	sl, [sp, #16]
 80053ba:	46cb      	mov	fp, r9
 80053bc:	9308      	str	r3, [sp, #32]
 80053be:	42b7      	cmp	r7, r6
 80053c0:	d22f      	bcs.n	8005422 <__gethex+0x1d0>
 80053c2:	1e73      	subs	r3, r6, #1
 80053c4:	9305      	str	r3, [sp, #20]
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00b      	beq.n	80053e8 <__gethex+0x196>
 80053d0:	f1bb 0f20 	cmp.w	fp, #32
 80053d4:	d116      	bne.n	8005404 <__gethex+0x1b2>
 80053d6:	9b04      	ldr	r3, [sp, #16]
 80053d8:	f8c3 9000 	str.w	r9, [r3]
 80053dc:	3304      	adds	r3, #4
 80053de:	f04f 0900 	mov.w	r9, #0
 80053e2:	9304      	str	r3, [sp, #16]
 80053e4:	46cb      	mov	fp, r9
 80053e6:	e00d      	b.n	8005404 <__gethex+0x1b2>
 80053e8:	9b05      	ldr	r3, [sp, #20]
 80053ea:	9a08      	ldr	r2, [sp, #32]
 80053ec:	4413      	add	r3, r2
 80053ee:	429f      	cmp	r7, r3
 80053f0:	d8ee      	bhi.n	80053d0 <__gethex+0x17e>
 80053f2:	4618      	mov	r0, r3
 80053f4:	9a01      	ldr	r2, [sp, #4]
 80053f6:	9903      	ldr	r1, [sp, #12]
 80053f8:	9309      	str	r3, [sp, #36]	; 0x24
 80053fa:	f000 ff21 	bl	8006240 <strncmp>
 80053fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005400:	b168      	cbz	r0, 800541e <__gethex+0x1cc>
 8005402:	e7e5      	b.n	80053d0 <__gethex+0x17e>
 8005404:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005408:	f7ff ff0e 	bl	8005228 <__hexdig_fun>
 800540c:	f000 000f 	and.w	r0, r0, #15
 8005410:	fa00 f00b 	lsl.w	r0, r0, fp
 8005414:	9b05      	ldr	r3, [sp, #20]
 8005416:	ea49 0900 	orr.w	r9, r9, r0
 800541a:	f10b 0b04 	add.w	fp, fp, #4
 800541e:	461e      	mov	r6, r3
 8005420:	e7cd      	b.n	80053be <__gethex+0x16c>
 8005422:	9804      	ldr	r0, [sp, #16]
 8005424:	f840 9b04 	str.w	r9, [r0], #4
 8005428:	ebca 0000 	rsb	r0, sl, r0
 800542c:	1080      	asrs	r0, r0, #2
 800542e:	6128      	str	r0, [r5, #16]
 8005430:	0147      	lsls	r7, r0, #5
 8005432:	4648      	mov	r0, r9
 8005434:	f000 fba5 	bl	8005b82 <__hi0bits>
 8005438:	f8d8 6000 	ldr.w	r6, [r8]
 800543c:	1a38      	subs	r0, r7, r0
 800543e:	42b0      	cmp	r0, r6
 8005440:	dd26      	ble.n	8005490 <__gethex+0x23e>
 8005442:	1b87      	subs	r7, r0, r6
 8005444:	4639      	mov	r1, r7
 8005446:	4628      	mov	r0, r5
 8005448:	f000 fea3 	bl	8006192 <__any_on>
 800544c:	b1c8      	cbz	r0, 8005482 <__gethex+0x230>
 800544e:	1e7b      	subs	r3, r7, #1
 8005450:	1159      	asrs	r1, r3, #5
 8005452:	f003 021f 	and.w	r2, r3, #31
 8005456:	f04f 0901 	mov.w	r9, #1
 800545a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800545e:	fa09 f202 	lsl.w	r2, r9, r2
 8005462:	420a      	tst	r2, r1
 8005464:	d00e      	beq.n	8005484 <__gethex+0x232>
 8005466:	454b      	cmp	r3, r9
 8005468:	dc02      	bgt.n	8005470 <__gethex+0x21e>
 800546a:	f04f 0902 	mov.w	r9, #2
 800546e:	e009      	b.n	8005484 <__gethex+0x232>
 8005470:	1eb9      	subs	r1, r7, #2
 8005472:	4628      	mov	r0, r5
 8005474:	f000 fe8d 	bl	8006192 <__any_on>
 8005478:	2800      	cmp	r0, #0
 800547a:	d0f6      	beq.n	800546a <__gethex+0x218>
 800547c:	f04f 0903 	mov.w	r9, #3
 8005480:	e000      	b.n	8005484 <__gethex+0x232>
 8005482:	4681      	mov	r9, r0
 8005484:	4639      	mov	r1, r7
 8005486:	4628      	mov	r0, r5
 8005488:	f7ff fe98 	bl	80051bc <rshift>
 800548c:	443c      	add	r4, r7
 800548e:	e00c      	b.n	80054aa <__gethex+0x258>
 8005490:	da09      	bge.n	80054a6 <__gethex+0x254>
 8005492:	1a37      	subs	r7, r6, r0
 8005494:	4629      	mov	r1, r5
 8005496:	463a      	mov	r2, r7
 8005498:	9802      	ldr	r0, [sp, #8]
 800549a:	f000 fca7 	bl	8005dec <__lshift>
 800549e:	1be4      	subs	r4, r4, r7
 80054a0:	4605      	mov	r5, r0
 80054a2:	f100 0a14 	add.w	sl, r0, #20
 80054a6:	f04f 0900 	mov.w	r9, #0
 80054aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80054ae:	429c      	cmp	r4, r3
 80054b0:	dd08      	ble.n	80054c4 <__gethex+0x272>
 80054b2:	9802      	ldr	r0, [sp, #8]
 80054b4:	4629      	mov	r1, r5
 80054b6:	f000 fad4 	bl	8005a62 <_Bfree>
 80054ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80054bc:	2300      	movs	r3, #0
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	20a3      	movs	r0, #163	; 0xa3
 80054c2:	e0e2      	b.n	800568a <__gethex+0x438>
 80054c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80054c8:	4284      	cmp	r4, r0
 80054ca:	da53      	bge.n	8005574 <__gethex+0x322>
 80054cc:	1b04      	subs	r4, r0, r4
 80054ce:	42a6      	cmp	r6, r4
 80054d0:	dc2e      	bgt.n	8005530 <__gethex+0x2de>
 80054d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d01a      	beq.n	8005510 <__gethex+0x2be>
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d01c      	beq.n	8005518 <__gethex+0x2c6>
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d11d      	bne.n	800551e <__gethex+0x2cc>
 80054e2:	42a6      	cmp	r6, r4
 80054e4:	d11b      	bne.n	800551e <__gethex+0x2cc>
 80054e6:	2e01      	cmp	r6, #1
 80054e8:	dc0b      	bgt.n	8005502 <__gethex+0x2b0>
 80054ea:	9a06      	ldr	r2, [sp, #24]
 80054ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	2301      	movs	r3, #1
 80054f4:	612b      	str	r3, [r5, #16]
 80054f6:	f8ca 3000 	str.w	r3, [sl]
 80054fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054fc:	2062      	movs	r0, #98	; 0x62
 80054fe:	601d      	str	r5, [r3, #0]
 8005500:	e0c3      	b.n	800568a <__gethex+0x438>
 8005502:	1e71      	subs	r1, r6, #1
 8005504:	4628      	mov	r0, r5
 8005506:	f000 fe44 	bl	8006192 <__any_on>
 800550a:	2800      	cmp	r0, #0
 800550c:	d1ed      	bne.n	80054ea <__gethex+0x298>
 800550e:	e006      	b.n	800551e <__gethex+0x2cc>
 8005510:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0e9      	beq.n	80054ea <__gethex+0x298>
 8005516:	e002      	b.n	800551e <__gethex+0x2cc>
 8005518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e5      	bne.n	80054ea <__gethex+0x298>
 800551e:	9802      	ldr	r0, [sp, #8]
 8005520:	4629      	mov	r1, r5
 8005522:	f000 fa9e 	bl	8005a62 <_Bfree>
 8005526:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005528:	2300      	movs	r3, #0
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	2050      	movs	r0, #80	; 0x50
 800552e:	e0ac      	b.n	800568a <__gethex+0x438>
 8005530:	1e67      	subs	r7, r4, #1
 8005532:	f1b9 0f00 	cmp.w	r9, #0
 8005536:	d106      	bne.n	8005546 <__gethex+0x2f4>
 8005538:	b13f      	cbz	r7, 800554a <__gethex+0x2f8>
 800553a:	4639      	mov	r1, r7
 800553c:	4628      	mov	r0, r5
 800553e:	f000 fe28 	bl	8006192 <__any_on>
 8005542:	4681      	mov	r9, r0
 8005544:	e001      	b.n	800554a <__gethex+0x2f8>
 8005546:	f04f 0901 	mov.w	r9, #1
 800554a:	117a      	asrs	r2, r7, #5
 800554c:	2301      	movs	r3, #1
 800554e:	f007 071f 	and.w	r7, r7, #31
 8005552:	fa03 f707 	lsl.w	r7, r3, r7
 8005556:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 800555a:	4621      	mov	r1, r4
 800555c:	421f      	tst	r7, r3
 800555e:	4628      	mov	r0, r5
 8005560:	bf18      	it	ne
 8005562:	f049 0902 	orrne.w	r9, r9, #2
 8005566:	1b36      	subs	r6, r6, r4
 8005568:	f7ff fe28 	bl	80051bc <rshift>
 800556c:	2702      	movs	r7, #2
 800556e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005572:	e000      	b.n	8005576 <__gethex+0x324>
 8005574:	2701      	movs	r7, #1
 8005576:	f1b9 0f00 	cmp.w	r9, #0
 800557a:	f000 8081 	beq.w	8005680 <__gethex+0x42e>
 800557e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d00e      	beq.n	80055a4 <__gethex+0x352>
 8005586:	2b03      	cmp	r3, #3
 8005588:	d010      	beq.n	80055ac <__gethex+0x35a>
 800558a:	2b01      	cmp	r3, #1
 800558c:	d176      	bne.n	800567c <__gethex+0x42a>
 800558e:	f019 0f02 	tst.w	r9, #2
 8005592:	d073      	beq.n	800567c <__gethex+0x42a>
 8005594:	f8da 0000 	ldr.w	r0, [sl]
 8005598:	ea49 0900 	orr.w	r9, r9, r0
 800559c:	f019 0f01 	tst.w	r9, #1
 80055a0:	d107      	bne.n	80055b2 <__gethex+0x360>
 80055a2:	e06b      	b.n	800567c <__gethex+0x42a>
 80055a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055a6:	f1c3 0301 	rsb	r3, r3, #1
 80055aa:	9315      	str	r3, [sp, #84]	; 0x54
 80055ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d064      	beq.n	800567c <__gethex+0x42a>
 80055b2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80055b6:	f105 0314 	add.w	r3, r5, #20
 80055ba:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80055be:	eb03 0109 	add.w	r1, r3, r9
 80055c2:	2000      	movs	r0, #0
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80055ca:	d002      	beq.n	80055d2 <__gethex+0x380>
 80055cc:	3201      	adds	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	e020      	b.n	8005614 <__gethex+0x3c2>
 80055d2:	f843 0b04 	str.w	r0, [r3], #4
 80055d6:	4299      	cmp	r1, r3
 80055d8:	d8f4      	bhi.n	80055c4 <__gethex+0x372>
 80055da:	68ab      	ldr	r3, [r5, #8]
 80055dc:	459a      	cmp	sl, r3
 80055de:	db12      	blt.n	8005606 <__gethex+0x3b4>
 80055e0:	6869      	ldr	r1, [r5, #4]
 80055e2:	9802      	ldr	r0, [sp, #8]
 80055e4:	3101      	adds	r1, #1
 80055e6:	f000 fa07 	bl	80059f8 <_Balloc>
 80055ea:	692a      	ldr	r2, [r5, #16]
 80055ec:	3202      	adds	r2, #2
 80055ee:	f105 010c 	add.w	r1, r5, #12
 80055f2:	4683      	mov	fp, r0
 80055f4:	0092      	lsls	r2, r2, #2
 80055f6:	300c      	adds	r0, #12
 80055f8:	f7fe f972 	bl	80038e0 <memcpy>
 80055fc:	4629      	mov	r1, r5
 80055fe:	9802      	ldr	r0, [sp, #8]
 8005600:	f000 fa2f 	bl	8005a62 <_Bfree>
 8005604:	465d      	mov	r5, fp
 8005606:	692b      	ldr	r3, [r5, #16]
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800560e:	612a      	str	r2, [r5, #16]
 8005610:	2201      	movs	r2, #1
 8005612:	615a      	str	r2, [r3, #20]
 8005614:	2f02      	cmp	r7, #2
 8005616:	f105 0214 	add.w	r2, r5, #20
 800561a:	d111      	bne.n	8005640 <__gethex+0x3ee>
 800561c:	f8d8 3000 	ldr.w	r3, [r8]
 8005620:	3b01      	subs	r3, #1
 8005622:	429e      	cmp	r6, r3
 8005624:	d127      	bne.n	8005676 <__gethex+0x424>
 8005626:	1171      	asrs	r1, r6, #5
 8005628:	2301      	movs	r3, #1
 800562a:	f006 061f 	and.w	r6, r6, #31
 800562e:	fa03 f606 	lsl.w	r6, r3, r6
 8005632:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005636:	421e      	tst	r6, r3
 8005638:	bf0c      	ite	eq
 800563a:	2702      	moveq	r7, #2
 800563c:	2701      	movne	r7, #1
 800563e:	e01a      	b.n	8005676 <__gethex+0x424>
 8005640:	692b      	ldr	r3, [r5, #16]
 8005642:	459a      	cmp	sl, r3
 8005644:	da0a      	bge.n	800565c <__gethex+0x40a>
 8005646:	2101      	movs	r1, #1
 8005648:	4628      	mov	r0, r5
 800564a:	f7ff fdb7 	bl	80051bc <rshift>
 800564e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005652:	3401      	adds	r4, #1
 8005654:	429c      	cmp	r4, r3
 8005656:	f73f af2c 	bgt.w	80054b2 <__gethex+0x260>
 800565a:	e00b      	b.n	8005674 <__gethex+0x422>
 800565c:	f016 061f 	ands.w	r6, r6, #31
 8005660:	d008      	beq.n	8005674 <__gethex+0x422>
 8005662:	4491      	add	r9, r2
 8005664:	f1c6 0620 	rsb	r6, r6, #32
 8005668:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800566c:	f000 fa89 	bl	8005b82 <__hi0bits>
 8005670:	42b0      	cmp	r0, r6
 8005672:	dbe8      	blt.n	8005646 <__gethex+0x3f4>
 8005674:	2701      	movs	r7, #1
 8005676:	f047 0720 	orr.w	r7, r7, #32
 800567a:	e001      	b.n	8005680 <__gethex+0x42e>
 800567c:	f047 0710 	orr.w	r7, r7, #16
 8005680:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005682:	601d      	str	r5, [r3, #0]
 8005684:	9b06      	ldr	r3, [sp, #24]
 8005686:	4638      	mov	r0, r7
 8005688:	601c      	str	r4, [r3, #0]
 800568a:	b00b      	add	sp, #44	; 0x2c
 800568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005690 <L_shift>:
 8005690:	f1c2 0208 	rsb	r2, r2, #8
 8005694:	0092      	lsls	r2, r2, #2
 8005696:	b570      	push	{r4, r5, r6, lr}
 8005698:	f1c2 0620 	rsb	r6, r2, #32
 800569c:	6843      	ldr	r3, [r0, #4]
 800569e:	6805      	ldr	r5, [r0, #0]
 80056a0:	fa03 f406 	lsl.w	r4, r3, r6
 80056a4:	432c      	orrs	r4, r5
 80056a6:	40d3      	lsrs	r3, r2
 80056a8:	6004      	str	r4, [r0, #0]
 80056aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80056ae:	4288      	cmp	r0, r1
 80056b0:	d3f4      	bcc.n	800569c <L_shift+0xc>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}

080056b4 <__match>:
 80056b4:	b530      	push	{r4, r5, lr}
 80056b6:	6803      	ldr	r3, [r0, #0]
 80056b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056bc:	3301      	adds	r3, #1
 80056be:	b14c      	cbz	r4, 80056d4 <__match+0x20>
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80056c6:	2d19      	cmp	r5, #25
 80056c8:	bf98      	it	ls
 80056ca:	3220      	addls	r2, #32
 80056cc:	42a2      	cmp	r2, r4
 80056ce:	d0f3      	beq.n	80056b8 <__match+0x4>
 80056d0:	2000      	movs	r0, #0
 80056d2:	bd30      	pop	{r4, r5, pc}
 80056d4:	6003      	str	r3, [r0, #0]
 80056d6:	2001      	movs	r0, #1
 80056d8:	bd30      	pop	{r4, r5, pc}

080056da <__hexnan>:
 80056da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056de:	680b      	ldr	r3, [r1, #0]
 80056e0:	f8d0 b000 	ldr.w	fp, [r0]
 80056e4:	115e      	asrs	r6, r3, #5
 80056e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80056ea:	f013 031f 	ands.w	r3, r3, #31
 80056ee:	b085      	sub	sp, #20
 80056f0:	bf18      	it	ne
 80056f2:	3604      	addne	r6, #4
 80056f4:	1f35      	subs	r5, r6, #4
 80056f6:	4617      	mov	r7, r2
 80056f8:	2200      	movs	r2, #0
 80056fa:	4682      	mov	sl, r0
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8005702:	46a8      	mov	r8, r5
 8005704:	462c      	mov	r4, r5
 8005706:	9200      	str	r2, [sp, #0]
 8005708:	4691      	mov	r9, r2
 800570a:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 800570e:	2900      	cmp	r1, #0
 8005710:	d03c      	beq.n	800578c <__hexnan+0xb2>
 8005712:	4608      	mov	r0, r1
 8005714:	9203      	str	r2, [sp, #12]
 8005716:	9102      	str	r1, [sp, #8]
 8005718:	f7ff fd86 	bl	8005228 <__hexdig_fun>
 800571c:	9a03      	ldr	r2, [sp, #12]
 800571e:	bb00      	cbnz	r0, 8005762 <__hexnan+0x88>
 8005720:	9902      	ldr	r1, [sp, #8]
 8005722:	2920      	cmp	r1, #32
 8005724:	d816      	bhi.n	8005754 <__hexnan+0x7a>
 8005726:	9b00      	ldr	r3, [sp, #0]
 8005728:	4599      	cmp	r9, r3
 800572a:	ddee      	ble.n	800570a <__hexnan+0x30>
 800572c:	4544      	cmp	r4, r8
 800572e:	d205      	bcs.n	800573c <__hexnan+0x62>
 8005730:	2a07      	cmp	r2, #7
 8005732:	dc03      	bgt.n	800573c <__hexnan+0x62>
 8005734:	4641      	mov	r1, r8
 8005736:	4620      	mov	r0, r4
 8005738:	f7ff ffaa 	bl	8005690 <L_shift>
 800573c:	42bc      	cmp	r4, r7
 800573e:	d923      	bls.n	8005788 <__hexnan+0xae>
 8005740:	2300      	movs	r3, #0
 8005742:	f1a4 0804 	sub.w	r8, r4, #4
 8005746:	f844 3c04 	str.w	r3, [r4, #-4]
 800574a:	f8cd 9000 	str.w	r9, [sp]
 800574e:	4644      	mov	r4, r8
 8005750:	461a      	mov	r2, r3
 8005752:	e7da      	b.n	800570a <__hexnan+0x30>
 8005754:	2929      	cmp	r1, #41	; 0x29
 8005756:	d148      	bne.n	80057ea <__hexnan+0x110>
 8005758:	f10b 0301 	add.w	r3, fp, #1
 800575c:	f8ca 3000 	str.w	r3, [sl]
 8005760:	e014      	b.n	800578c <__hexnan+0xb2>
 8005762:	3201      	adds	r2, #1
 8005764:	2a08      	cmp	r2, #8
 8005766:	f109 0901 	add.w	r9, r9, #1
 800576a:	dd06      	ble.n	800577a <__hexnan+0xa0>
 800576c:	42bc      	cmp	r4, r7
 800576e:	d9cc      	bls.n	800570a <__hexnan+0x30>
 8005770:	2300      	movs	r3, #0
 8005772:	f844 3c04 	str.w	r3, [r4, #-4]
 8005776:	2201      	movs	r2, #1
 8005778:	3c04      	subs	r4, #4
 800577a:	6821      	ldr	r1, [r4, #0]
 800577c:	f000 000f 	and.w	r0, r0, #15
 8005780:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8005784:	6020      	str	r0, [r4, #0]
 8005786:	e7c0      	b.n	800570a <__hexnan+0x30>
 8005788:	2208      	movs	r2, #8
 800578a:	e7be      	b.n	800570a <__hexnan+0x30>
 800578c:	f1b9 0f00 	cmp.w	r9, #0
 8005790:	d02b      	beq.n	80057ea <__hexnan+0x110>
 8005792:	4544      	cmp	r4, r8
 8005794:	d205      	bcs.n	80057a2 <__hexnan+0xc8>
 8005796:	2a07      	cmp	r2, #7
 8005798:	dc03      	bgt.n	80057a2 <__hexnan+0xc8>
 800579a:	4641      	mov	r1, r8
 800579c:	4620      	mov	r0, r4
 800579e:	f7ff ff77 	bl	8005690 <L_shift>
 80057a2:	42bc      	cmp	r4, r7
 80057a4:	d90c      	bls.n	80057c0 <__hexnan+0xe6>
 80057a6:	463b      	mov	r3, r7
 80057a8:	f854 2b04 	ldr.w	r2, [r4], #4
 80057ac:	f843 2b04 	str.w	r2, [r3], #4
 80057b0:	42a5      	cmp	r5, r4
 80057b2:	d2f9      	bcs.n	80057a8 <__hexnan+0xce>
 80057b4:	2200      	movs	r2, #0
 80057b6:	f843 2b04 	str.w	r2, [r3], #4
 80057ba:	429d      	cmp	r5, r3
 80057bc:	d2fb      	bcs.n	80057b6 <__hexnan+0xdc>
 80057be:	e00b      	b.n	80057d8 <__hexnan+0xfe>
 80057c0:	9b01      	ldr	r3, [sp, #4]
 80057c2:	b14b      	cbz	r3, 80057d8 <__hexnan+0xfe>
 80057c4:	f1c3 0220 	rsb	r2, r3, #32
 80057c8:	f04f 33ff 	mov.w	r3, #4294967295
 80057cc:	40d3      	lsrs	r3, r2
 80057ce:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80057d2:	4013      	ands	r3, r2
 80057d4:	f846 3c04 	str.w	r3, [r6, #-4]
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b943      	cbnz	r3, 80057ee <__hexnan+0x114>
 80057dc:	42bd      	cmp	r5, r7
 80057de:	d102      	bne.n	80057e6 <__hexnan+0x10c>
 80057e0:	2301      	movs	r3, #1
 80057e2:	602b      	str	r3, [r5, #0]
 80057e4:	e003      	b.n	80057ee <__hexnan+0x114>
 80057e6:	3d04      	subs	r5, #4
 80057e8:	e7f6      	b.n	80057d8 <__hexnan+0xfe>
 80057ea:	2004      	movs	r0, #4
 80057ec:	e000      	b.n	80057f0 <__hexnan+0x116>
 80057ee:	2005      	movs	r0, #5
 80057f0:	b005      	add	sp, #20
 80057f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080057f8 <_findenv_r>:
 80057f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	4607      	mov	r7, r0
 80057fe:	468b      	mov	fp, r1
 8005800:	4690      	mov	r8, r2
 8005802:	f001 fa5f 	bl	8006cc4 <__env_lock>
 8005806:	4b19      	ldr	r3, [pc, #100]	; (800586c <_findenv_r+0x74>)
 8005808:	681d      	ldr	r5, [r3, #0]
 800580a:	469a      	mov	sl, r3
 800580c:	b13d      	cbz	r5, 800581e <_findenv_r+0x26>
 800580e:	465c      	mov	r4, fp
 8005810:	4623      	mov	r3, r4
 8005812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005816:	b142      	cbz	r2, 800582a <_findenv_r+0x32>
 8005818:	2a3d      	cmp	r2, #61	; 0x3d
 800581a:	461c      	mov	r4, r3
 800581c:	d1f8      	bne.n	8005810 <_findenv_r+0x18>
 800581e:	4638      	mov	r0, r7
 8005820:	f001 fa51 	bl	8006cc6 <__env_unlock>
 8005824:	2000      	movs	r0, #0
 8005826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582a:	ebcb 0404 	rsb	r4, fp, r4
 800582e:	46a9      	mov	r9, r5
 8005830:	f859 0b04 	ldr.w	r0, [r9], #4
 8005834:	2800      	cmp	r0, #0
 8005836:	d0f2      	beq.n	800581e <_findenv_r+0x26>
 8005838:	4622      	mov	r2, r4
 800583a:	4659      	mov	r1, fp
 800583c:	f000 fd00 	bl	8006240 <strncmp>
 8005840:	b988      	cbnz	r0, 8005866 <_findenv_r+0x6e>
 8005842:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8005846:	191e      	adds	r6, r3, r4
 8005848:	5d1b      	ldrb	r3, [r3, r4]
 800584a:	2b3d      	cmp	r3, #61	; 0x3d
 800584c:	d10b      	bne.n	8005866 <_findenv_r+0x6e>
 800584e:	f8da 3000 	ldr.w	r3, [sl]
 8005852:	1aed      	subs	r5, r5, r3
 8005854:	10ad      	asrs	r5, r5, #2
 8005856:	4638      	mov	r0, r7
 8005858:	f8c8 5000 	str.w	r5, [r8]
 800585c:	f001 fa33 	bl	8006cc6 <__env_unlock>
 8005860:	1c70      	adds	r0, r6, #1
 8005862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005866:	464d      	mov	r5, r9
 8005868:	e7e1      	b.n	800582e <_findenv_r+0x36>
 800586a:	bf00      	nop
 800586c:	200005e0 	.word	0x200005e0

08005870 <_getenv_r>:
 8005870:	b507      	push	{r0, r1, r2, lr}
 8005872:	aa01      	add	r2, sp, #4
 8005874:	f7ff ffc0 	bl	80057f8 <_findenv_r>
 8005878:	b003      	add	sp, #12
 800587a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005880 <_gettimeofday_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4c07      	ldr	r4, [pc, #28]	; (80058a0 <_gettimeofday_r+0x20>)
 8005884:	2300      	movs	r3, #0
 8005886:	4605      	mov	r5, r0
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	f001 fe39 	bl	8007504 <_gettimeofday>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	d102      	bne.n	800589c <_gettimeofday_r+0x1c>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	b103      	cbz	r3, 800589c <_gettimeofday_r+0x1c>
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	bd38      	pop	{r3, r4, r5, pc}
 800589e:	bf00      	nop
 80058a0:	200022a8 	.word	0x200022a8

080058a4 <__gettzinfo>:
 80058a4:	4800      	ldr	r0, [pc, #0]	; (80058a8 <__gettzinfo+0x4>)
 80058a6:	4770      	bx	lr
 80058a8:	20000450 	.word	0x20000450

080058ac <gmtime_r>:
 80058ac:	6802      	ldr	r2, [r0, #0]
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <gmtime_r+0x120>)
 80058b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b2:	fb92 f4f3 	sdiv	r4, r2, r3
 80058b6:	fb03 2214 	mls	r2, r3, r4, r2
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	bfbc      	itt	lt
 80058be:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80058c2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80058c6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80058ca:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80058ce:	fb92 f3f0 	sdiv	r3, r2, r0
 80058d2:	fb00 2213 	mls	r2, r0, r3, r2
 80058d6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80058da:	bfac      	ite	ge
 80058dc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80058e0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80058e4:	608b      	str	r3, [r1, #8]
 80058e6:	fb92 f3f0 	sdiv	r3, r2, r0
 80058ea:	fb00 2213 	mls	r2, r0, r3, r2
 80058ee:	604b      	str	r3, [r1, #4]
 80058f0:	600a      	str	r2, [r1, #0]
 80058f2:	2307      	movs	r3, #7
 80058f4:	1ce2      	adds	r2, r4, #3
 80058f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80058fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	618b      	str	r3, [r1, #24]
 8005902:	4b33      	ldr	r3, [pc, #204]	; (80059d0 <gmtime_r+0x124>)
 8005904:	4d33      	ldr	r5, [pc, #204]	; (80059d4 <gmtime_r+0x128>)
 8005906:	fb94 f5f5 	sdiv	r5, r4, r5
 800590a:	fb03 4405 	mla	r4, r3, r5, r4
 800590e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8005912:	fbb4 f2f2 	udiv	r2, r4, r2
 8005916:	4422      	add	r2, r4
 8005918:	f240 57b4 	movw	r7, #1460	; 0x5b4
 800591c:	fbb4 f3f7 	udiv	r3, r4, r7
 8005920:	1ad2      	subs	r2, r2, r3
 8005922:	482d      	ldr	r0, [pc, #180]	; (80059d8 <gmtime_r+0x12c>)
 8005924:	fbb4 f0f0 	udiv	r0, r4, r0
 8005928:	f648 6694 	movw	r6, #36500	; 0x8e94
 800592c:	1a13      	subs	r3, r2, r0
 800592e:	fbb3 f6f6 	udiv	r6, r3, r6
 8005932:	4434      	add	r4, r6
 8005934:	f240 126d 	movw	r2, #365	; 0x16d
 8005938:	fbb3 f0f2 	udiv	r0, r3, r2
 800593c:	fbb3 f3f7 	udiv	r3, r3, r7
 8005940:	1ae3      	subs	r3, r4, r3
 8005942:	fb02 3310 	mls	r3, r2, r0, r3
 8005946:	2499      	movs	r4, #153	; 0x99
 8005948:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800594c:	3202      	adds	r2, #2
 800594e:	fbb2 f2f4 	udiv	r2, r2, r4
 8005952:	2a0a      	cmp	r2, #10
 8005954:	fb04 f402 	mul.w	r4, r4, r2
 8005958:	f104 0602 	add.w	r6, r4, #2
 800595c:	f04f 0405 	mov.w	r4, #5
 8005960:	fbb6 f4f4 	udiv	r4, r6, r4
 8005964:	bf34      	ite	cc
 8005966:	2602      	movcc	r6, #2
 8005968:	f06f 0609 	mvncs.w	r6, #9
 800596c:	4416      	add	r6, r2
 800596e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005972:	fb02 0505 	mla	r5, r2, r5, r0
 8005976:	1c5f      	adds	r7, r3, #1
 8005978:	2e01      	cmp	r6, #1
 800597a:	bf98      	it	ls
 800597c:	3501      	addls	r5, #1
 800597e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8005982:	eba7 0704 	sub.w	r7, r7, r4
 8005986:	d302      	bcc.n	800598e <gmtime_r+0xe2>
 8005988:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 800598c:	e014      	b.n	80059b8 <gmtime_r+0x10c>
 800598e:	0782      	lsls	r2, r0, #30
 8005990:	d105      	bne.n	800599e <gmtime_r+0xf2>
 8005992:	2464      	movs	r4, #100	; 0x64
 8005994:	fbb0 f2f4 	udiv	r2, r0, r4
 8005998:	fb04 0212 	mls	r2, r4, r2, r0
 800599c:	b94a      	cbnz	r2, 80059b2 <gmtime_r+0x106>
 800599e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059a2:	fbb0 f4f2 	udiv	r4, r0, r2
 80059a6:	fb02 0014 	mls	r0, r2, r4, r0
 80059aa:	fab0 f280 	clz	r2, r0
 80059ae:	0952      	lsrs	r2, r2, #5
 80059b0:	e000      	b.n	80059b4 <gmtime_r+0x108>
 80059b2:	2201      	movs	r2, #1
 80059b4:	333b      	adds	r3, #59	; 0x3b
 80059b6:	441a      	add	r2, r3
 80059b8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80059bc:	2300      	movs	r3, #0
 80059be:	61ca      	str	r2, [r1, #28]
 80059c0:	614d      	str	r5, [r1, #20]
 80059c2:	610e      	str	r6, [r1, #16]
 80059c4:	60cf      	str	r7, [r1, #12]
 80059c6:	620b      	str	r3, [r1, #32]
 80059c8:	4608      	mov	r0, r1
 80059ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059cc:	00015180 	.word	0x00015180
 80059d0:	fffdc54f 	.word	0xfffdc54f
 80059d4:	00023ab1 	.word	0x00023ab1
 80059d8:	00023ab0 	.word	0x00023ab0

080059dc <__locale_charset>:
 80059dc:	4800      	ldr	r0, [pc, #0]	; (80059e0 <__locale_charset+0x4>)
 80059de:	4770      	bx	lr
 80059e0:	200005bc 	.word	0x200005bc

080059e4 <__locale_mb_cur_max>:
 80059e4:	4b01      	ldr	r3, [pc, #4]	; (80059ec <__locale_mb_cur_max+0x8>)
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	200005dc 	.word	0x200005dc

080059f0 <_localeconv_r>:
 80059f0:	4800      	ldr	r0, [pc, #0]	; (80059f4 <_localeconv_r+0x4>)
 80059f2:	4770      	bx	lr
 80059f4:	20000584 	.word	0x20000584

080059f8 <_Balloc>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059fc:	4604      	mov	r4, r0
 80059fe:	460e      	mov	r6, r1
 8005a00:	b93d      	cbnz	r5, 8005a12 <_Balloc+0x1a>
 8005a02:	2010      	movs	r0, #16
 8005a04:	f7fd fd3c 	bl	8003480 <malloc>
 8005a08:	6260      	str	r0, [r4, #36]	; 0x24
 8005a0a:	6045      	str	r5, [r0, #4]
 8005a0c:	6085      	str	r5, [r0, #8]
 8005a0e:	6005      	str	r5, [r0, #0]
 8005a10:	60c5      	str	r5, [r0, #12]
 8005a12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005a14:	68eb      	ldr	r3, [r5, #12]
 8005a16:	b143      	cbz	r3, 8005a2a <_Balloc+0x32>
 8005a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a20:	b178      	cbz	r0, 8005a42 <_Balloc+0x4a>
 8005a22:	6802      	ldr	r2, [r0, #0]
 8005a24:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005a28:	e017      	b.n	8005a5a <_Balloc+0x62>
 8005a2a:	2221      	movs	r2, #33	; 0x21
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f001 f91b 	bl	8006c6a <_calloc_r>
 8005a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a36:	60e8      	str	r0, [r5, #12]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1ec      	bne.n	8005a18 <_Balloc+0x20>
 8005a3e:	2000      	movs	r0, #0
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f506 	lsl.w	r5, r1, r6
 8005a48:	1d6a      	adds	r2, r5, #5
 8005a4a:	0092      	lsls	r2, r2, #2
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f001 f90c 	bl	8006c6a <_calloc_r>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d0f3      	beq.n	8005a3e <_Balloc+0x46>
 8005a56:	6046      	str	r6, [r0, #4]
 8005a58:	6085      	str	r5, [r0, #8]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6103      	str	r3, [r0, #16]
 8005a5e:	60c3      	str	r3, [r0, #12]
 8005a60:	bd70      	pop	{r4, r5, r6, pc}

08005a62 <_Bfree>:
 8005a62:	b570      	push	{r4, r5, r6, lr}
 8005a64:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a66:	4606      	mov	r6, r0
 8005a68:	460d      	mov	r5, r1
 8005a6a:	b93c      	cbnz	r4, 8005a7c <_Bfree+0x1a>
 8005a6c:	2010      	movs	r0, #16
 8005a6e:	f7fd fd07 	bl	8003480 <malloc>
 8005a72:	6270      	str	r0, [r6, #36]	; 0x24
 8005a74:	6044      	str	r4, [r0, #4]
 8005a76:	6084      	str	r4, [r0, #8]
 8005a78:	6004      	str	r4, [r0, #0]
 8005a7a:	60c4      	str	r4, [r0, #12]
 8005a7c:	b13d      	cbz	r5, 8005a8e <_Bfree+0x2c>
 8005a7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005a80:	686a      	ldr	r2, [r5, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a88:	6029      	str	r1, [r5, #0]
 8005a8a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}

08005a90 <__multadd>:
 8005a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a94:	690d      	ldr	r5, [r1, #16]
 8005a96:	461f      	mov	r7, r3
 8005a98:	4606      	mov	r6, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	f101 0e14 	add.w	lr, r1, #20
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f8de 0000 	ldr.w	r0, [lr]
 8005aa6:	b281      	uxth	r1, r0
 8005aa8:	fb02 7101 	mla	r1, r2, r1, r7
 8005aac:	0c0f      	lsrs	r7, r1, #16
 8005aae:	0c00      	lsrs	r0, r0, #16
 8005ab0:	fb02 7000 	mla	r0, r2, r0, r7
 8005ab4:	b289      	uxth	r1, r1
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005abc:	429d      	cmp	r5, r3
 8005abe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005ac2:	f84e 1b04 	str.w	r1, [lr], #4
 8005ac6:	dcec      	bgt.n	8005aa2 <__multadd+0x12>
 8005ac8:	b1d7      	cbz	r7, 8005b00 <__multadd+0x70>
 8005aca:	68a3      	ldr	r3, [r4, #8]
 8005acc:	429d      	cmp	r5, r3
 8005ace:	db12      	blt.n	8005af6 <__multadd+0x66>
 8005ad0:	6861      	ldr	r1, [r4, #4]
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	3101      	adds	r1, #1
 8005ad6:	f7ff ff8f 	bl	80059f8 <_Balloc>
 8005ada:	6922      	ldr	r2, [r4, #16]
 8005adc:	3202      	adds	r2, #2
 8005ade:	f104 010c 	add.w	r1, r4, #12
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	0092      	lsls	r2, r2, #2
 8005ae6:	300c      	adds	r0, #12
 8005ae8:	f7fd fefa 	bl	80038e0 <memcpy>
 8005aec:	4621      	mov	r1, r4
 8005aee:	4630      	mov	r0, r6
 8005af0:	f7ff ffb7 	bl	8005a62 <_Bfree>
 8005af4:	4644      	mov	r4, r8
 8005af6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005afa:	3501      	adds	r5, #1
 8005afc:	615f      	str	r7, [r3, #20]
 8005afe:	6125      	str	r5, [r4, #16]
 8005b00:	4620      	mov	r0, r4
 8005b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b06 <__s2b>:
 8005b06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	4615      	mov	r5, r2
 8005b0e:	461f      	mov	r7, r3
 8005b10:	2209      	movs	r2, #9
 8005b12:	3308      	adds	r3, #8
 8005b14:	4606      	mov	r6, r0
 8005b16:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	da02      	bge.n	8005b28 <__s2b+0x22>
 8005b22:	0052      	lsls	r2, r2, #1
 8005b24:	3101      	adds	r1, #1
 8005b26:	e7fa      	b.n	8005b1e <__s2b+0x18>
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f7ff ff65 	bl	80059f8 <_Balloc>
 8005b2e:	9b08      	ldr	r3, [sp, #32]
 8005b30:	6143      	str	r3, [r0, #20]
 8005b32:	2d09      	cmp	r5, #9
 8005b34:	f04f 0301 	mov.w	r3, #1
 8005b38:	6103      	str	r3, [r0, #16]
 8005b3a:	dd11      	ble.n	8005b60 <__s2b+0x5a>
 8005b3c:	f104 0809 	add.w	r8, r4, #9
 8005b40:	46c1      	mov	r9, r8
 8005b42:	442c      	add	r4, r5
 8005b44:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005b48:	4601      	mov	r1, r0
 8005b4a:	3b30      	subs	r3, #48	; 0x30
 8005b4c:	220a      	movs	r2, #10
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f7ff ff9e 	bl	8005a90 <__multadd>
 8005b54:	45a1      	cmp	r9, r4
 8005b56:	d1f5      	bne.n	8005b44 <__s2b+0x3e>
 8005b58:	eb08 0405 	add.w	r4, r8, r5
 8005b5c:	3c08      	subs	r4, #8
 8005b5e:	e001      	b.n	8005b64 <__s2b+0x5e>
 8005b60:	340a      	adds	r4, #10
 8005b62:	2509      	movs	r5, #9
 8005b64:	1b2d      	subs	r5, r5, r4
 8005b66:	1963      	adds	r3, r4, r5
 8005b68:	429f      	cmp	r7, r3
 8005b6a:	dd08      	ble.n	8005b7e <__s2b+0x78>
 8005b6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b70:	4601      	mov	r1, r0
 8005b72:	3b30      	subs	r3, #48	; 0x30
 8005b74:	220a      	movs	r2, #10
 8005b76:	4630      	mov	r0, r6
 8005b78:	f7ff ff8a 	bl	8005a90 <__multadd>
 8005b7c:	e7f3      	b.n	8005b66 <__s2b+0x60>
 8005b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005b82 <__hi0bits>:
 8005b82:	0c03      	lsrs	r3, r0, #16
 8005b84:	041b      	lsls	r3, r3, #16
 8005b86:	b913      	cbnz	r3, 8005b8e <__hi0bits+0xc>
 8005b88:	0400      	lsls	r0, r0, #16
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	e000      	b.n	8005b90 <__hi0bits+0xe>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b94:	bf04      	itt	eq
 8005b96:	0200      	lsleq	r0, r0, #8
 8005b98:	3308      	addeq	r3, #8
 8005b9a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b9e:	bf04      	itt	eq
 8005ba0:	0100      	lsleq	r0, r0, #4
 8005ba2:	3304      	addeq	r3, #4
 8005ba4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ba8:	bf04      	itt	eq
 8005baa:	0080      	lsleq	r0, r0, #2
 8005bac:	3302      	addeq	r3, #2
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	db03      	blt.n	8005bba <__hi0bits+0x38>
 8005bb2:	0042      	lsls	r2, r0, #1
 8005bb4:	d503      	bpl.n	8005bbe <__hi0bits+0x3c>
 8005bb6:	1c58      	adds	r0, r3, #1
 8005bb8:	4770      	bx	lr
 8005bba:	4618      	mov	r0, r3
 8005bbc:	4770      	bx	lr
 8005bbe:	2020      	movs	r0, #32
 8005bc0:	4770      	bx	lr

08005bc2 <__lo0bits>:
 8005bc2:	6803      	ldr	r3, [r0, #0]
 8005bc4:	f013 0207 	ands.w	r2, r3, #7
 8005bc8:	d00b      	beq.n	8005be2 <__lo0bits+0x20>
 8005bca:	07d9      	lsls	r1, r3, #31
 8005bcc:	d422      	bmi.n	8005c14 <__lo0bits+0x52>
 8005bce:	079a      	lsls	r2, r3, #30
 8005bd0:	bf4b      	itete	mi
 8005bd2:	085b      	lsrmi	r3, r3, #1
 8005bd4:	089b      	lsrpl	r3, r3, #2
 8005bd6:	6003      	strmi	r3, [r0, #0]
 8005bd8:	6003      	strpl	r3, [r0, #0]
 8005bda:	bf4c      	ite	mi
 8005bdc:	2001      	movmi	r0, #1
 8005bde:	2002      	movpl	r0, #2
 8005be0:	4770      	bx	lr
 8005be2:	b299      	uxth	r1, r3
 8005be4:	b909      	cbnz	r1, 8005bea <__lo0bits+0x28>
 8005be6:	0c1b      	lsrs	r3, r3, #16
 8005be8:	2210      	movs	r2, #16
 8005bea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bee:	bf04      	itt	eq
 8005bf0:	0a1b      	lsreq	r3, r3, #8
 8005bf2:	3208      	addeq	r2, #8
 8005bf4:	0719      	lsls	r1, r3, #28
 8005bf6:	bf04      	itt	eq
 8005bf8:	091b      	lsreq	r3, r3, #4
 8005bfa:	3204      	addeq	r2, #4
 8005bfc:	0799      	lsls	r1, r3, #30
 8005bfe:	bf04      	itt	eq
 8005c00:	089b      	lsreq	r3, r3, #2
 8005c02:	3202      	addeq	r2, #2
 8005c04:	07d9      	lsls	r1, r3, #31
 8005c06:	d402      	bmi.n	8005c0e <__lo0bits+0x4c>
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	d005      	beq.n	8005c18 <__lo0bits+0x56>
 8005c0c:	3201      	adds	r2, #1
 8005c0e:	6003      	str	r3, [r0, #0]
 8005c10:	4610      	mov	r0, r2
 8005c12:	4770      	bx	lr
 8005c14:	2000      	movs	r0, #0
 8005c16:	4770      	bx	lr
 8005c18:	2020      	movs	r0, #32
 8005c1a:	4770      	bx	lr

08005c1c <__i2b>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	460c      	mov	r4, r1
 8005c20:	2101      	movs	r1, #1
 8005c22:	f7ff fee9 	bl	80059f8 <_Balloc>
 8005c26:	2201      	movs	r2, #1
 8005c28:	6144      	str	r4, [r0, #20]
 8005c2a:	6102      	str	r2, [r0, #16]
 8005c2c:	bd10      	pop	{r4, pc}

08005c2e <__multiply>:
 8005c2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c32:	4614      	mov	r4, r2
 8005c34:	690a      	ldr	r2, [r1, #16]
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	bfb8      	it	lt
 8005c3c:	460b      	movlt	r3, r1
 8005c3e:	4688      	mov	r8, r1
 8005c40:	bfbc      	itt	lt
 8005c42:	46a0      	movlt	r8, r4
 8005c44:	461c      	movlt	r4, r3
 8005c46:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c4a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c52:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c56:	eb07 0609 	add.w	r6, r7, r9
 8005c5a:	429e      	cmp	r6, r3
 8005c5c:	bfc8      	it	gt
 8005c5e:	3101      	addgt	r1, #1
 8005c60:	f7ff feca 	bl	80059f8 <_Balloc>
 8005c64:	f100 0514 	add.w	r5, r0, #20
 8005c68:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4563      	cmp	r3, ip
 8005c72:	d202      	bcs.n	8005c7a <__multiply+0x4c>
 8005c74:	f843 2b04 	str.w	r2, [r3], #4
 8005c78:	e7fa      	b.n	8005c70 <__multiply+0x42>
 8005c7a:	f104 0214 	add.w	r2, r4, #20
 8005c7e:	f108 0114 	add.w	r1, r8, #20
 8005c82:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005c86:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	9b00      	ldr	r3, [sp, #0]
 8005c8e:	9201      	str	r2, [sp, #4]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d957      	bls.n	8005d44 <__multiply+0x116>
 8005c94:	f8b2 b000 	ldrh.w	fp, [r2]
 8005c98:	f1bb 0f00 	cmp.w	fp, #0
 8005c9c:	d023      	beq.n	8005ce6 <__multiply+0xb8>
 8005c9e:	4689      	mov	r9, r1
 8005ca0:	46ae      	mov	lr, r5
 8005ca2:	f04f 0800 	mov.w	r8, #0
 8005ca6:	f859 4b04 	ldr.w	r4, [r9], #4
 8005caa:	f8be a000 	ldrh.w	sl, [lr]
 8005cae:	b2a3      	uxth	r3, r4
 8005cb0:	fb0b a303 	mla	r3, fp, r3, sl
 8005cb4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005cb8:	f8de 4000 	ldr.w	r4, [lr]
 8005cbc:	4443      	add	r3, r8
 8005cbe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005cc2:	fb0b 840a 	mla	r4, fp, sl, r8
 8005cc6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005cca:	46f2      	mov	sl, lr
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005cd2:	454f      	cmp	r7, r9
 8005cd4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005cd8:	f84a 3b04 	str.w	r3, [sl], #4
 8005cdc:	d901      	bls.n	8005ce2 <__multiply+0xb4>
 8005cde:	46d6      	mov	lr, sl
 8005ce0:	e7e1      	b.n	8005ca6 <__multiply+0x78>
 8005ce2:	f8ce 8004 	str.w	r8, [lr, #4]
 8005ce6:	9b01      	ldr	r3, [sp, #4]
 8005ce8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005cec:	3204      	adds	r2, #4
 8005cee:	f1ba 0f00 	cmp.w	sl, #0
 8005cf2:	d021      	beq.n	8005d38 <__multiply+0x10a>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	462c      	mov	r4, r5
 8005cf8:	4689      	mov	r9, r1
 8005cfa:	f04f 0800 	mov.w	r8, #0
 8005cfe:	f8b9 e000 	ldrh.w	lr, [r9]
 8005d02:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8005d06:	fb0a be0e 	mla	lr, sl, lr, fp
 8005d0a:	44f0      	add	r8, lr
 8005d0c:	46a3      	mov	fp, r4
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005d14:	f84b 3b04 	str.w	r3, [fp], #4
 8005d18:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d1c:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	fb0a e303 	mla	r3, sl, r3, lr
 8005d26:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8005d2a:	454f      	cmp	r7, r9
 8005d2c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8005d30:	d901      	bls.n	8005d36 <__multiply+0x108>
 8005d32:	465c      	mov	r4, fp
 8005d34:	e7e3      	b.n	8005cfe <__multiply+0xd0>
 8005d36:	6063      	str	r3, [r4, #4]
 8005d38:	3504      	adds	r5, #4
 8005d3a:	e7a7      	b.n	8005c8c <__multiply+0x5e>
 8005d3c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8005d40:	b913      	cbnz	r3, 8005d48 <__multiply+0x11a>
 8005d42:	3e01      	subs	r6, #1
 8005d44:	2e00      	cmp	r6, #0
 8005d46:	dcf9      	bgt.n	8005d3c <__multiply+0x10e>
 8005d48:	6106      	str	r6, [r0, #16]
 8005d4a:	b003      	add	sp, #12
 8005d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d50 <__pow5mult>:
 8005d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d54:	4615      	mov	r5, r2
 8005d56:	f012 0203 	ands.w	r2, r2, #3
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	460f      	mov	r7, r1
 8005d5e:	d007      	beq.n	8005d70 <__pow5mult+0x20>
 8005d60:	3a01      	subs	r2, #1
 8005d62:	4c21      	ldr	r4, [pc, #132]	; (8005de8 <__pow5mult+0x98>)
 8005d64:	2300      	movs	r3, #0
 8005d66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d6a:	f7ff fe91 	bl	8005a90 <__multadd>
 8005d6e:	4607      	mov	r7, r0
 8005d70:	10ad      	asrs	r5, r5, #2
 8005d72:	d036      	beq.n	8005de2 <__pow5mult+0x92>
 8005d74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d76:	b93c      	cbnz	r4, 8005d88 <__pow5mult+0x38>
 8005d78:	2010      	movs	r0, #16
 8005d7a:	f7fd fb81 	bl	8003480 <malloc>
 8005d7e:	6270      	str	r0, [r6, #36]	; 0x24
 8005d80:	6044      	str	r4, [r0, #4]
 8005d82:	6084      	str	r4, [r0, #8]
 8005d84:	6004      	str	r4, [r0, #0]
 8005d86:	60c4      	str	r4, [r0, #12]
 8005d88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d90:	b94c      	cbnz	r4, 8005da6 <__pow5mult+0x56>
 8005d92:	f240 2171 	movw	r1, #625	; 0x271
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff ff40 	bl	8005c1c <__i2b>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005da2:	4604      	mov	r4, r0
 8005da4:	6003      	str	r3, [r0, #0]
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	07eb      	lsls	r3, r5, #31
 8005dac:	d50a      	bpl.n	8005dc4 <__pow5mult+0x74>
 8005dae:	4639      	mov	r1, r7
 8005db0:	4622      	mov	r2, r4
 8005db2:	4630      	mov	r0, r6
 8005db4:	f7ff ff3b 	bl	8005c2e <__multiply>
 8005db8:	4639      	mov	r1, r7
 8005dba:	4681      	mov	r9, r0
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7ff fe50 	bl	8005a62 <_Bfree>
 8005dc2:	464f      	mov	r7, r9
 8005dc4:	106d      	asrs	r5, r5, #1
 8005dc6:	d00c      	beq.n	8005de2 <__pow5mult+0x92>
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	b108      	cbz	r0, 8005dd0 <__pow5mult+0x80>
 8005dcc:	4604      	mov	r4, r0
 8005dce:	e7ec      	b.n	8005daa <__pow5mult+0x5a>
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f7ff ff2a 	bl	8005c2e <__multiply>
 8005dda:	6020      	str	r0, [r4, #0]
 8005ddc:	f8c0 8000 	str.w	r8, [r0]
 8005de0:	e7f4      	b.n	8005dcc <__pow5mult+0x7c>
 8005de2:	4638      	mov	r0, r7
 8005de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de8:	08007900 	.word	0x08007900

08005dec <__lshift>:
 8005dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	460c      	mov	r4, r1
 8005df2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005df6:	6926      	ldr	r6, [r4, #16]
 8005df8:	6849      	ldr	r1, [r1, #4]
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	4456      	add	r6, sl
 8005dfe:	4607      	mov	r7, r0
 8005e00:	4691      	mov	r9, r2
 8005e02:	1c75      	adds	r5, r6, #1
 8005e04:	42ab      	cmp	r3, r5
 8005e06:	da02      	bge.n	8005e0e <__lshift+0x22>
 8005e08:	3101      	adds	r1, #1
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	e7fa      	b.n	8005e04 <__lshift+0x18>
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff fdf2 	bl	80059f8 <_Balloc>
 8005e14:	2300      	movs	r3, #0
 8005e16:	4680      	mov	r8, r0
 8005e18:	f100 0114 	add.w	r1, r0, #20
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4553      	cmp	r3, sl
 8005e20:	da03      	bge.n	8005e2a <__lshift+0x3e>
 8005e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e26:	3301      	adds	r3, #1
 8005e28:	e7f9      	b.n	8005e1e <__lshift+0x32>
 8005e2a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8005e2e:	6920      	ldr	r0, [r4, #16]
 8005e30:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005e34:	f019 091f 	ands.w	r9, r9, #31
 8005e38:	f104 0114 	add.w	r1, r4, #20
 8005e3c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005e40:	d014      	beq.n	8005e6c <__lshift+0x80>
 8005e42:	f1c9 0c20 	rsb	ip, r9, #32
 8005e46:	2200      	movs	r2, #0
 8005e48:	6808      	ldr	r0, [r1, #0]
 8005e4a:	fa00 f009 	lsl.w	r0, r0, r9
 8005e4e:	4302      	orrs	r2, r0
 8005e50:	469a      	mov	sl, r3
 8005e52:	f843 2b04 	str.w	r2, [r3], #4
 8005e56:	f851 2b04 	ldr.w	r2, [r1], #4
 8005e5a:	458e      	cmp	lr, r1
 8005e5c:	fa22 f20c 	lsr.w	r2, r2, ip
 8005e60:	d8f2      	bhi.n	8005e48 <__lshift+0x5c>
 8005e62:	f8ca 2004 	str.w	r2, [sl, #4]
 8005e66:	b142      	cbz	r2, 8005e7a <__lshift+0x8e>
 8005e68:	1cb5      	adds	r5, r6, #2
 8005e6a:	e006      	b.n	8005e7a <__lshift+0x8e>
 8005e6c:	3b04      	subs	r3, #4
 8005e6e:	f851 2b04 	ldr.w	r2, [r1], #4
 8005e72:	f843 2f04 	str.w	r2, [r3, #4]!
 8005e76:	458e      	cmp	lr, r1
 8005e78:	d8f9      	bhi.n	8005e6e <__lshift+0x82>
 8005e7a:	3d01      	subs	r5, #1
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005e82:	4621      	mov	r1, r4
 8005e84:	f7ff fded 	bl	8005a62 <_Bfree>
 8005e88:	4640      	mov	r0, r8
 8005e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005e8e <__mcmp>:
 8005e8e:	6903      	ldr	r3, [r0, #16]
 8005e90:	690a      	ldr	r2, [r1, #16]
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	b510      	push	{r4, lr}
 8005e96:	d111      	bne.n	8005ebc <__mcmp+0x2e>
 8005e98:	0092      	lsls	r2, r2, #2
 8005e9a:	3014      	adds	r0, #20
 8005e9c:	3114      	adds	r1, #20
 8005e9e:	1883      	adds	r3, r0, r2
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005ea6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005eaa:	428c      	cmp	r4, r1
 8005eac:	d002      	beq.n	8005eb4 <__mcmp+0x26>
 8005eae:	d307      	bcc.n	8005ec0 <__mcmp+0x32>
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	bd10      	pop	{r4, pc}
 8005eb4:	4298      	cmp	r0, r3
 8005eb6:	d3f4      	bcc.n	8005ea2 <__mcmp+0x14>
 8005eb8:	2000      	movs	r0, #0
 8005eba:	bd10      	pop	{r4, pc}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	bd10      	pop	{r4, pc}
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	bd10      	pop	{r4, pc}

08005ec6 <__mdiff>:
 8005ec6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eca:	460c      	mov	r4, r1
 8005ecc:	4607      	mov	r7, r0
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	4615      	mov	r5, r2
 8005ed4:	f7ff ffdb 	bl	8005e8e <__mcmp>
 8005ed8:	1e06      	subs	r6, r0, #0
 8005eda:	d108      	bne.n	8005eee <__mdiff+0x28>
 8005edc:	4631      	mov	r1, r6
 8005ede:	4638      	mov	r0, r7
 8005ee0:	f7ff fd8a 	bl	80059f8 <_Balloc>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	6103      	str	r3, [r0, #16]
 8005ee8:	6146      	str	r6, [r0, #20]
 8005eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eee:	bfbc      	itt	lt
 8005ef0:	4623      	movlt	r3, r4
 8005ef2:	462c      	movlt	r4, r5
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	6861      	ldr	r1, [r4, #4]
 8005ef8:	bfba      	itte	lt
 8005efa:	461d      	movlt	r5, r3
 8005efc:	2601      	movlt	r6, #1
 8005efe:	2600      	movge	r6, #0
 8005f00:	f7ff fd7a 	bl	80059f8 <_Balloc>
 8005f04:	692b      	ldr	r3, [r5, #16]
 8005f06:	60c6      	str	r6, [r0, #12]
 8005f08:	6926      	ldr	r6, [r4, #16]
 8005f0a:	f105 0914 	add.w	r9, r5, #20
 8005f0e:	3414      	adds	r4, #20
 8005f10:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8005f14:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f18:	f100 0514 	add.w	r5, r0, #20
 8005f1c:	f04f 0c00 	mov.w	ip, #0
 8005f20:	f854 3b04 	ldr.w	r3, [r4], #4
 8005f24:	f859 2b04 	ldr.w	r2, [r9], #4
 8005f28:	fa1c f183 	uxtah	r1, ip, r3
 8005f2c:	fa1f fe82 	uxth.w	lr, r2
 8005f30:	0c12      	lsrs	r2, r2, #16
 8005f32:	ebce 0101 	rsb	r1, lr, r1
 8005f36:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8005f3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f3e:	b289      	uxth	r1, r1
 8005f40:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f44:	45c8      	cmp	r8, r9
 8005f46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f4a:	46a6      	mov	lr, r4
 8005f4c:	f845 3b04 	str.w	r3, [r5], #4
 8005f50:	d8e6      	bhi.n	8005f20 <__mdiff+0x5a>
 8005f52:	45be      	cmp	lr, r7
 8005f54:	d20e      	bcs.n	8005f74 <__mdiff+0xae>
 8005f56:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005f5a:	fa1c f281 	uxtah	r2, ip, r1
 8005f5e:	1413      	asrs	r3, r2, #16
 8005f60:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8005f64:	b292      	uxth	r2, r2
 8005f66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f6e:	f845 2b04 	str.w	r2, [r5], #4
 8005f72:	e7ee      	b.n	8005f52 <__mdiff+0x8c>
 8005f74:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005f78:	b90b      	cbnz	r3, 8005f7e <__mdiff+0xb8>
 8005f7a:	3e01      	subs	r6, #1
 8005f7c:	e7fa      	b.n	8005f74 <__mdiff+0xae>
 8005f7e:	6106      	str	r6, [r0, #16]
 8005f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005f84 <__ulp>:
 8005f84:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <__ulp+0x4c>)
 8005f86:	ee10 2a90 	vmov	r2, s1
 8005f8a:	401a      	ands	r2, r3
 8005f8c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	dd02      	ble.n	8005f9a <__ulp+0x16>
 8005f94:	2000      	movs	r0, #0
 8005f96:	4619      	mov	r1, r3
 8005f98:	e017      	b.n	8005fca <__ulp+0x46>
 8005f9a:	425b      	negs	r3, r3
 8005f9c:	151b      	asrs	r3, r3, #20
 8005f9e:	2b13      	cmp	r3, #19
 8005fa0:	f04f 0000 	mov.w	r0, #0
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	dc04      	bgt.n	8005fb4 <__ulp+0x30>
 8005faa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005fae:	fa42 f103 	asr.w	r1, r2, r3
 8005fb2:	e00a      	b.n	8005fca <__ulp+0x46>
 8005fb4:	3b14      	subs	r3, #20
 8005fb6:	2b1e      	cmp	r3, #30
 8005fb8:	f04f 0201 	mov.w	r2, #1
 8005fbc:	bfda      	itte	le
 8005fbe:	f1c3 031f 	rsble	r3, r3, #31
 8005fc2:	fa02 f303 	lslle.w	r3, r2, r3
 8005fc6:	4613      	movgt	r3, r2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	ec41 0b10 	vmov	d0, r0, r1
 8005fce:	4770      	bx	lr
 8005fd0:	7ff00000 	.word	0x7ff00000

08005fd4 <__b2d>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	6905      	ldr	r5, [r0, #16]
 8005fd8:	f100 0614 	add.w	r6, r0, #20
 8005fdc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8005fe0:	1f2f      	subs	r7, r5, #4
 8005fe2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f7ff fdcb 	bl	8005b82 <__hi0bits>
 8005fec:	f1c0 0320 	rsb	r3, r0, #32
 8005ff0:	280a      	cmp	r0, #10
 8005ff2:	600b      	str	r3, [r1, #0]
 8005ff4:	dc14      	bgt.n	8006020 <__b2d+0x4c>
 8005ff6:	f1c0 0e0b 	rsb	lr, r0, #11
 8005ffa:	fa24 f10e 	lsr.w	r1, r4, lr
 8005ffe:	42be      	cmp	r6, r7
 8006000:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8006004:	bf34      	ite	cc
 8006006:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800600a:	2100      	movcs	r1, #0
 800600c:	3015      	adds	r0, #21
 800600e:	fa04 f000 	lsl.w	r0, r4, r0
 8006012:	fa21 f10e 	lsr.w	r1, r1, lr
 8006016:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800601a:	ea40 0201 	orr.w	r2, r0, r1
 800601e:	e023      	b.n	8006068 <__b2d+0x94>
 8006020:	42be      	cmp	r6, r7
 8006022:	bf3a      	itte	cc
 8006024:	f1a5 0708 	subcc.w	r7, r5, #8
 8006028:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800602c:	2100      	movcs	r1, #0
 800602e:	380b      	subs	r0, #11
 8006030:	d015      	beq.n	800605e <__b2d+0x8a>
 8006032:	4084      	lsls	r4, r0
 8006034:	f1c0 0520 	rsb	r5, r0, #32
 8006038:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800603c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006040:	42b7      	cmp	r7, r6
 8006042:	fa21 fe05 	lsr.w	lr, r1, r5
 8006046:	ea44 030e 	orr.w	r3, r4, lr
 800604a:	bf8c      	ite	hi
 800604c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8006050:	2400      	movls	r4, #0
 8006052:	fa01 f000 	lsl.w	r0, r1, r0
 8006056:	40ec      	lsrs	r4, r5
 8006058:	ea40 0204 	orr.w	r2, r0, r4
 800605c:	e004      	b.n	8006068 <__b2d+0x94>
 800605e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006062:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006066:	460a      	mov	r2, r1
 8006068:	ec43 2b10 	vmov	d0, r2, r3
 800606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800606e <__d2b>:
 800606e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006072:	460e      	mov	r6, r1
 8006074:	2101      	movs	r1, #1
 8006076:	ec59 8b10 	vmov	r8, r9, d0
 800607a:	4615      	mov	r5, r2
 800607c:	f7ff fcbc 	bl	80059f8 <_Balloc>
 8006080:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006084:	4607      	mov	r7, r0
 8006086:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800608a:	b10c      	cbz	r4, 8006090 <__d2b+0x22>
 800608c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	f1b8 0f00 	cmp.w	r8, #0
 8006096:	d019      	beq.n	80060cc <__d2b+0x5e>
 8006098:	a802      	add	r0, sp, #8
 800609a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800609e:	f7ff fd90 	bl	8005bc2 <__lo0bits>
 80060a2:	9b00      	ldr	r3, [sp, #0]
 80060a4:	b148      	cbz	r0, 80060ba <__d2b+0x4c>
 80060a6:	9a01      	ldr	r2, [sp, #4]
 80060a8:	f1c0 0120 	rsb	r1, r0, #32
 80060ac:	fa02 f101 	lsl.w	r1, r2, r1
 80060b0:	430b      	orrs	r3, r1
 80060b2:	40c2      	lsrs	r2, r0
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	9201      	str	r2, [sp, #4]
 80060b8:	e000      	b.n	80060bc <__d2b+0x4e>
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	9b01      	ldr	r3, [sp, #4]
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf14      	ite	ne
 80060c4:	2102      	movne	r1, #2
 80060c6:	2101      	moveq	r1, #1
 80060c8:	6139      	str	r1, [r7, #16]
 80060ca:	e007      	b.n	80060dc <__d2b+0x6e>
 80060cc:	a801      	add	r0, sp, #4
 80060ce:	f7ff fd78 	bl	8005bc2 <__lo0bits>
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	2101      	movs	r1, #1
 80060d8:	6139      	str	r1, [r7, #16]
 80060da:	3020      	adds	r0, #32
 80060dc:	b134      	cbz	r4, 80060ec <__d2b+0x7e>
 80060de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80060e2:	4404      	add	r4, r0
 80060e4:	6034      	str	r4, [r6, #0]
 80060e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060ea:	e009      	b.n	8006100 <__d2b+0x92>
 80060ec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80060f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060f4:	6030      	str	r0, [r6, #0]
 80060f6:	6918      	ldr	r0, [r3, #16]
 80060f8:	f7ff fd43 	bl	8005b82 <__hi0bits>
 80060fc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006100:	6028      	str	r0, [r5, #0]
 8006102:	4638      	mov	r0, r7
 8006104:	b003      	add	sp, #12
 8006106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800610a <__ratio>:
 800610a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800610e:	4688      	mov	r8, r1
 8006110:	4669      	mov	r1, sp
 8006112:	4681      	mov	r9, r0
 8006114:	f7ff ff5e 	bl	8005fd4 <__b2d>
 8006118:	a901      	add	r1, sp, #4
 800611a:	4640      	mov	r0, r8
 800611c:	ec55 4b10 	vmov	r4, r5, d0
 8006120:	f7ff ff58 	bl	8005fd4 <__b2d>
 8006124:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006128:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800612c:	1a9a      	subs	r2, r3, r2
 800612e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006132:	1ac9      	subs	r1, r1, r3
 8006134:	ec57 6b10 	vmov	r6, r7, d0
 8006138:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 800613c:	2b00      	cmp	r3, #0
 800613e:	bfcc      	ite	gt
 8006140:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8006144:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8006148:	4632      	mov	r2, r6
 800614a:	463b      	mov	r3, r7
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fa fb2e 	bl	80007b0 <__aeabi_ddiv>
 8006154:	ec41 0b10 	vmov	d0, r0, r1
 8006158:	b003      	add	sp, #12
 800615a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800615e <__copybits>:
 800615e:	3901      	subs	r1, #1
 8006160:	b510      	push	{r4, lr}
 8006162:	1149      	asrs	r1, r1, #5
 8006164:	6914      	ldr	r4, [r2, #16]
 8006166:	3101      	adds	r1, #1
 8006168:	f102 0314 	add.w	r3, r2, #20
 800616c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006170:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006174:	42a3      	cmp	r3, r4
 8006176:	4602      	mov	r2, r0
 8006178:	d204      	bcs.n	8006184 <__copybits+0x26>
 800617a:	f853 2b04 	ldr.w	r2, [r3], #4
 800617e:	f840 2b04 	str.w	r2, [r0], #4
 8006182:	e7f7      	b.n	8006174 <__copybits+0x16>
 8006184:	2300      	movs	r3, #0
 8006186:	428a      	cmp	r2, r1
 8006188:	d202      	bcs.n	8006190 <__copybits+0x32>
 800618a:	f842 3b04 	str.w	r3, [r2], #4
 800618e:	e7fa      	b.n	8006186 <__copybits+0x28>
 8006190:	bd10      	pop	{r4, pc}

08006192 <__any_on>:
 8006192:	f100 0214 	add.w	r2, r0, #20
 8006196:	6900      	ldr	r0, [r0, #16]
 8006198:	114b      	asrs	r3, r1, #5
 800619a:	4298      	cmp	r0, r3
 800619c:	b510      	push	{r4, lr}
 800619e:	db0c      	blt.n	80061ba <__any_on+0x28>
 80061a0:	dd0c      	ble.n	80061bc <__any_on+0x2a>
 80061a2:	f011 011f 	ands.w	r1, r1, #31
 80061a6:	d009      	beq.n	80061bc <__any_on+0x2a>
 80061a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80061ac:	fa24 f001 	lsr.w	r0, r4, r1
 80061b0:	fa00 f101 	lsl.w	r1, r0, r1
 80061b4:	428c      	cmp	r4, r1
 80061b6:	d10c      	bne.n	80061d2 <__any_on+0x40>
 80061b8:	e000      	b.n	80061bc <__any_on+0x2a>
 80061ba:	4603      	mov	r3, r0
 80061bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d904      	bls.n	80061ce <__any_on+0x3c>
 80061c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061c8:	2900      	cmp	r1, #0
 80061ca:	d0f9      	beq.n	80061c0 <__any_on+0x2e>
 80061cc:	e001      	b.n	80061d2 <__any_on+0x40>
 80061ce:	2000      	movs	r0, #0
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	2001      	movs	r0, #1
 80061d4:	bd10      	pop	{r4, pc}
	...

080061d8 <siscanf>:
 80061d8:	b40e      	push	{r1, r2, r3}
 80061da:	b530      	push	{r4, r5, lr}
 80061dc:	b09c      	sub	sp, #112	; 0x70
 80061de:	ac1f      	add	r4, sp, #124	; 0x7c
 80061e0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80061e4:	f854 5b04 	ldr.w	r5, [r4], #4
 80061e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80061ec:	9002      	str	r0, [sp, #8]
 80061ee:	9006      	str	r0, [sp, #24]
 80061f0:	f7f9 fff4 	bl	80001dc <strlen>
 80061f4:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <siscanf+0x4c>)
 80061f6:	9003      	str	r0, [sp, #12]
 80061f8:	9007      	str	r0, [sp, #28]
 80061fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80061fc:	480a      	ldr	r0, [pc, #40]	; (8006228 <siscanf+0x50>)
 80061fe:	9401      	str	r4, [sp, #4]
 8006200:	2300      	movs	r3, #0
 8006202:	930f      	str	r3, [sp, #60]	; 0x3c
 8006204:	9314      	str	r3, [sp, #80]	; 0x50
 8006206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800620a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800620e:	462a      	mov	r2, r5
 8006210:	4623      	mov	r3, r4
 8006212:	a902      	add	r1, sp, #8
 8006214:	6800      	ldr	r0, [r0, #0]
 8006216:	f000 f945 	bl	80064a4 <__ssvfiscanf_r>
 800621a:	b01c      	add	sp, #112	; 0x70
 800621c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006220:	b003      	add	sp, #12
 8006222:	4770      	bx	lr
 8006224:	0800622d 	.word	0x0800622d
 8006228:	20000580 	.word	0x20000580

0800622c <__seofread>:
 800622c:	2000      	movs	r0, #0
 800622e:	4770      	bx	lr

08006230 <strcpy>:
 8006230:	4603      	mov	r3, r0
 8006232:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006236:	f803 2b01 	strb.w	r2, [r3], #1
 800623a:	2a00      	cmp	r2, #0
 800623c:	d1f9      	bne.n	8006232 <strcpy+0x2>
 800623e:	4770      	bx	lr

08006240 <strncmp>:
 8006240:	b530      	push	{r4, r5, lr}
 8006242:	b182      	cbz	r2, 8006266 <strncmp+0x26>
 8006244:	1e45      	subs	r5, r0, #1
 8006246:	3901      	subs	r1, #1
 8006248:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800624c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006250:	42a3      	cmp	r3, r4
 8006252:	d106      	bne.n	8006262 <strncmp+0x22>
 8006254:	43ec      	mvns	r4, r5
 8006256:	4414      	add	r4, r2
 8006258:	42e0      	cmn	r0, r4
 800625a:	d001      	beq.n	8006260 <strncmp+0x20>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f3      	bne.n	8006248 <strncmp+0x8>
 8006260:	461c      	mov	r4, r3
 8006262:	1b18      	subs	r0, r3, r4
 8006264:	bd30      	pop	{r4, r5, pc}
 8006266:	4610      	mov	r0, r2
 8006268:	bd30      	pop	{r4, r5, pc}
	...

0800626c <_strtoul_r>:
 800626c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	4680      	mov	r8, r0
 8006272:	483c      	ldr	r0, [pc, #240]	; (8006364 <_strtoul_r+0xf8>)
 8006274:	f8d0 9000 	ldr.w	r9, [r0]
 8006278:	460e      	mov	r6, r1
 800627a:	4635      	mov	r5, r6
 800627c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006280:	eb09 0004 	add.w	r0, r9, r4
 8006284:	7840      	ldrb	r0, [r0, #1]
 8006286:	f000 0008 	and.w	r0, r0, #8
 800628a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 800628e:	b108      	cbz	r0, 8006294 <_strtoul_r+0x28>
 8006290:	462e      	mov	r6, r5
 8006292:	e7f2      	b.n	800627a <_strtoul_r+0xe>
 8006294:	2c2d      	cmp	r4, #45	; 0x2d
 8006296:	d103      	bne.n	80062a0 <_strtoul_r+0x34>
 8006298:	1cb5      	adds	r5, r6, #2
 800629a:	7874      	ldrb	r4, [r6, #1]
 800629c:	2701      	movs	r7, #1
 800629e:	e003      	b.n	80062a8 <_strtoul_r+0x3c>
 80062a0:	2c2b      	cmp	r4, #43	; 0x2b
 80062a2:	bf04      	itt	eq
 80062a4:	7874      	ldrbeq	r4, [r6, #1]
 80062a6:	1cb5      	addeq	r5, r6, #2
 80062a8:	b113      	cbz	r3, 80062b0 <_strtoul_r+0x44>
 80062aa:	2b10      	cmp	r3, #16
 80062ac:	d10a      	bne.n	80062c4 <_strtoul_r+0x58>
 80062ae:	e053      	b.n	8006358 <_strtoul_r+0xec>
 80062b0:	2c30      	cmp	r4, #48	; 0x30
 80062b2:	d14f      	bne.n	8006354 <_strtoul_r+0xe8>
 80062b4:	7828      	ldrb	r0, [r5, #0]
 80062b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80062ba:	2858      	cmp	r0, #88	; 0x58
 80062bc:	d145      	bne.n	800634a <_strtoul_r+0xde>
 80062be:	786c      	ldrb	r4, [r5, #1]
 80062c0:	2310      	movs	r3, #16
 80062c2:	3502      	adds	r5, #2
 80062c4:	f04f 3cff 	mov.w	ip, #4294967295
 80062c8:	2600      	movs	r6, #0
 80062ca:	fbbc fcf3 	udiv	ip, ip, r3
 80062ce:	fb03 fa0c 	mul.w	sl, r3, ip
 80062d2:	ea6f 0a0a 	mvn.w	sl, sl
 80062d6:	4630      	mov	r0, r6
 80062d8:	eb09 0e04 	add.w	lr, r9, r4
 80062dc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80062e0:	f01e 0f04 	tst.w	lr, #4
 80062e4:	d001      	beq.n	80062ea <_strtoul_r+0x7e>
 80062e6:	3c30      	subs	r4, #48	; 0x30
 80062e8:	e00b      	b.n	8006302 <_strtoul_r+0x96>
 80062ea:	f01e 0e03 	ands.w	lr, lr, #3
 80062ee:	d01a      	beq.n	8006326 <_strtoul_r+0xba>
 80062f0:	f1be 0f01 	cmp.w	lr, #1
 80062f4:	bf0c      	ite	eq
 80062f6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80062fa:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80062fe:	ebce 0404 	rsb	r4, lr, r4
 8006302:	42a3      	cmp	r3, r4
 8006304:	dd0f      	ble.n	8006326 <_strtoul_r+0xba>
 8006306:	2e00      	cmp	r6, #0
 8006308:	db08      	blt.n	800631c <_strtoul_r+0xb0>
 800630a:	4560      	cmp	r0, ip
 800630c:	d806      	bhi.n	800631c <_strtoul_r+0xb0>
 800630e:	d101      	bne.n	8006314 <_strtoul_r+0xa8>
 8006310:	4554      	cmp	r4, sl
 8006312:	dc03      	bgt.n	800631c <_strtoul_r+0xb0>
 8006314:	fb03 4000 	mla	r0, r3, r0, r4
 8006318:	2601      	movs	r6, #1
 800631a:	e001      	b.n	8006320 <_strtoul_r+0xb4>
 800631c:	f04f 36ff 	mov.w	r6, #4294967295
 8006320:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006324:	e7d8      	b.n	80062d8 <_strtoul_r+0x6c>
 8006326:	2e00      	cmp	r6, #0
 8006328:	da07      	bge.n	800633a <_strtoul_r+0xce>
 800632a:	2322      	movs	r3, #34	; 0x22
 800632c:	f8c8 3000 	str.w	r3, [r8]
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	b92a      	cbnz	r2, 8006342 <_strtoul_r+0xd6>
 8006336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633a:	b107      	cbz	r7, 800633e <_strtoul_r+0xd2>
 800633c:	4240      	negs	r0, r0
 800633e:	b172      	cbz	r2, 800635e <_strtoul_r+0xf2>
 8006340:	b106      	cbz	r6, 8006344 <_strtoul_r+0xd8>
 8006342:	1e69      	subs	r1, r5, #1
 8006344:	6011      	str	r1, [r2, #0]
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634a:	2430      	movs	r4, #48	; 0x30
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1b9      	bne.n	80062c4 <_strtoul_r+0x58>
 8006350:	2308      	movs	r3, #8
 8006352:	e7b7      	b.n	80062c4 <_strtoul_r+0x58>
 8006354:	230a      	movs	r3, #10
 8006356:	e7b5      	b.n	80062c4 <_strtoul_r+0x58>
 8006358:	2c30      	cmp	r4, #48	; 0x30
 800635a:	d0ab      	beq.n	80062b4 <_strtoul_r+0x48>
 800635c:	e7b2      	b.n	80062c4 <_strtoul_r+0x58>
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006362:	bf00      	nop
 8006364:	2000044c 	.word	0x2000044c

08006368 <strtoul>:
 8006368:	4613      	mov	r3, r2
 800636a:	460a      	mov	r2, r1
 800636c:	4601      	mov	r1, r0
 800636e:	4802      	ldr	r0, [pc, #8]	; (8006378 <strtoul+0x10>)
 8006370:	6800      	ldr	r0, [r0, #0]
 8006372:	f7ff bf7b 	b.w	800626c <_strtoul_r>
 8006376:	bf00      	nop
 8006378:	20000580 	.word	0x20000580

0800637c <_sungetc_r>:
 800637c:	1c4b      	adds	r3, r1, #1
 800637e:	b570      	push	{r4, r5, r6, lr}
 8006380:	460e      	mov	r6, r1
 8006382:	4614      	mov	r4, r2
 8006384:	d102      	bne.n	800638c <_sungetc_r+0x10>
 8006386:	f04f 30ff 	mov.w	r0, #4294967295
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	8993      	ldrh	r3, [r2, #12]
 800638e:	f023 0320 	bic.w	r3, r3, #32
 8006392:	8193      	strh	r3, [r2, #12]
 8006394:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006396:	6852      	ldr	r2, [r2, #4]
 8006398:	b2cd      	uxtb	r5, r1
 800639a:	b183      	cbz	r3, 80063be <_sungetc_r+0x42>
 800639c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800639e:	429a      	cmp	r2, r3
 80063a0:	da07      	bge.n	80063b2 <_sungetc_r+0x36>
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	1e5a      	subs	r2, r3, #1
 80063a6:	6022      	str	r2, [r4, #0]
 80063a8:	f803 6c01 	strb.w	r6, [r3, #-1]
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	3301      	adds	r3, #1
 80063b0:	e01f      	b.n	80063f2 <_sungetc_r+0x76>
 80063b2:	4621      	mov	r1, r4
 80063b4:	f000 fc1e 	bl	8006bf4 <__submore>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d0f2      	beq.n	80063a2 <_sungetc_r+0x26>
 80063bc:	e7e3      	b.n	8006386 <_sungetc_r+0xa>
 80063be:	6921      	ldr	r1, [r4, #16]
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	b151      	cbz	r1, 80063da <_sungetc_r+0x5e>
 80063c4:	4299      	cmp	r1, r3
 80063c6:	d208      	bcs.n	80063da <_sungetc_r+0x5e>
 80063c8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80063cc:	428d      	cmp	r5, r1
 80063ce:	d104      	bne.n	80063da <_sungetc_r+0x5e>
 80063d0:	3b01      	subs	r3, #1
 80063d2:	3201      	adds	r2, #1
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	6062      	str	r2, [r4, #4]
 80063d8:	e00c      	b.n	80063f4 <_sungetc_r+0x78>
 80063da:	63e3      	str	r3, [r4, #60]	; 0x3c
 80063dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063e0:	6363      	str	r3, [r4, #52]	; 0x34
 80063e2:	2303      	movs	r3, #3
 80063e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80063e6:	4623      	mov	r3, r4
 80063e8:	6422      	str	r2, [r4, #64]	; 0x40
 80063ea:	f803 6f46 	strb.w	r6, [r3, #70]!
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	2301      	movs	r3, #1
 80063f2:	6063      	str	r3, [r4, #4]
 80063f4:	4628      	mov	r0, r5
 80063f6:	bd70      	pop	{r4, r5, r6, pc}

080063f8 <__ssrefill_r>:
 80063f8:	b510      	push	{r4, lr}
 80063fa:	460c      	mov	r4, r1
 80063fc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80063fe:	b169      	cbz	r1, 800641c <__ssrefill_r+0x24>
 8006400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006404:	4299      	cmp	r1, r3
 8006406:	d001      	beq.n	800640c <__ssrefill_r+0x14>
 8006408:	f7fe fe1a 	bl	8005040 <_free_r>
 800640c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800640e:	6063      	str	r3, [r4, #4]
 8006410:	2000      	movs	r0, #0
 8006412:	6360      	str	r0, [r4, #52]	; 0x34
 8006414:	b113      	cbz	r3, 800641c <__ssrefill_r+0x24>
 8006416:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd10      	pop	{r4, pc}
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	6063      	str	r3, [r4, #4]
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	f043 0320 	orr.w	r3, r3, #32
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	f04f 30ff 	mov.w	r0, #4294967295
 8006430:	bd10      	pop	{r4, pc}

08006432 <_sfread_r>:
 8006432:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006436:	4615      	mov	r5, r2
 8006438:	435d      	muls	r5, r3
 800643a:	4682      	mov	sl, r0
 800643c:	460f      	mov	r7, r1
 800643e:	4691      	mov	r9, r2
 8006440:	4698      	mov	r8, r3
 8006442:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006444:	d029      	beq.n	800649a <_sfread_r+0x68>
 8006446:	462e      	mov	r6, r5
 8006448:	f04f 0b00 	mov.w	fp, #0
 800644c:	6863      	ldr	r3, [r4, #4]
 800644e:	429e      	cmp	r6, r3
 8006450:	d916      	bls.n	8006480 <_sfread_r+0x4e>
 8006452:	461a      	mov	r2, r3
 8006454:	6821      	ldr	r1, [r4, #0]
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	4638      	mov	r0, r7
 800645a:	f7fd fa41 	bl	80038e0 <memcpy>
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	6822      	ldr	r2, [r4, #0]
 8006462:	441a      	add	r2, r3
 8006464:	e884 0804 	stmia.w	r4, {r2, fp}
 8006468:	4621      	mov	r1, r4
 800646a:	4650      	mov	r0, sl
 800646c:	441f      	add	r7, r3
 800646e:	1af6      	subs	r6, r6, r3
 8006470:	f7ff ffc2 	bl	80063f8 <__ssrefill_r>
 8006474:	2800      	cmp	r0, #0
 8006476:	d0e9      	beq.n	800644c <_sfread_r+0x1a>
 8006478:	1ba8      	subs	r0, r5, r6
 800647a:	fbb0 f0f9 	udiv	r0, r0, r9
 800647e:	e00d      	b.n	800649c <_sfread_r+0x6a>
 8006480:	4632      	mov	r2, r6
 8006482:	6821      	ldr	r1, [r4, #0]
 8006484:	4638      	mov	r0, r7
 8006486:	f7fd fa2b 	bl	80038e0 <memcpy>
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	1b9b      	subs	r3, r3, r6
 8006490:	4430      	add	r0, r6
 8006492:	6020      	str	r0, [r4, #0]
 8006494:	6063      	str	r3, [r4, #4]
 8006496:	4640      	mov	r0, r8
 8006498:	e000      	b.n	800649c <_sfread_r+0x6a>
 800649a:	4628      	mov	r0, r5
 800649c:	b003      	add	sp, #12
 800649e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080064a4 <__ssvfiscanf_r>:
 80064a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	461f      	mov	r7, r3
 80064aa:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80064ae:	b0d7      	sub	sp, #348	; 0x15c
 80064b0:	460d      	mov	r5, r1
 80064b2:	0499      	lsls	r1, r3, #18
 80064b4:	4681      	mov	r9, r0
 80064b6:	9205      	str	r2, [sp, #20]
 80064b8:	d406      	bmi.n	80064c8 <__ssvfiscanf_r+0x24>
 80064ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80064be:	81ab      	strh	r3, [r5, #12]
 80064c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064c6:	666b      	str	r3, [r5, #100]	; 0x64
 80064c8:	2300      	movs	r3, #0
 80064ca:	9304      	str	r3, [sp, #16]
 80064cc:	469b      	mov	fp, r3
 80064ce:	4698      	mov	r8, r3
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	9b05      	ldr	r3, [sp, #20]
 80064d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	9209      	str	r2, [sp, #36]	; 0x24
 80064dc:	2a00      	cmp	r2, #0
 80064de:	f000 837f 	beq.w	8006be0 <__ssvfiscanf_r+0x73c>
 80064e2:	4bac      	ldr	r3, [pc, #688]	; (8006794 <__ssvfiscanf_r+0x2f0>)
 80064e4:	6819      	ldr	r1, [r3, #0]
 80064e6:	188b      	adds	r3, r1, r2
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 80064f2:	b1cb      	cbz	r3, 8006528 <__ssvfiscanf_r+0x84>
 80064f4:	686b      	ldr	r3, [r5, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dd0f      	ble.n	800651a <__ssvfiscanf_r+0x76>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	49a5      	ldr	r1, [pc, #660]	; (8006794 <__ssvfiscanf_r+0x2f0>)
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	6809      	ldr	r1, [r1, #0]
 8006502:	440a      	add	r2, r1
 8006504:	7852      	ldrb	r2, [r2, #1]
 8006506:	0712      	lsls	r2, r2, #28
 8006508:	d5e3      	bpl.n	80064d2 <__ssvfiscanf_r+0x2e>
 800650a:	686a      	ldr	r2, [r5, #4]
 800650c:	3301      	adds	r3, #1
 800650e:	3a01      	subs	r2, #1
 8006510:	f108 0801 	add.w	r8, r8, #1
 8006514:	606a      	str	r2, [r5, #4]
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	e7ec      	b.n	80064f4 <__ssvfiscanf_r+0x50>
 800651a:	4629      	mov	r1, r5
 800651c:	4648      	mov	r0, r9
 800651e:	f7ff ff6b 	bl	80063f8 <__ssrefill_r>
 8006522:	2800      	cmp	r0, #0
 8006524:	d0e9      	beq.n	80064fa <__ssvfiscanf_r+0x56>
 8006526:	e7d4      	b.n	80064d2 <__ssvfiscanf_r+0x2e>
 8006528:	2a25      	cmp	r2, #37	; 0x25
 800652a:	d151      	bne.n	80065d0 <__ssvfiscanf_r+0x12c>
 800652c:	9a05      	ldr	r2, [sp, #20]
 800652e:	4626      	mov	r6, r4
 8006530:	200a      	movs	r0, #10
 8006532:	9b05      	ldr	r3, [sp, #20]
 8006534:	3301      	adds	r3, #1
 8006536:	9305      	str	r3, [sp, #20]
 8006538:	7813      	ldrb	r3, [r2, #0]
 800653a:	2b63      	cmp	r3, #99	; 0x63
 800653c:	f000 8088 	beq.w	8006650 <__ssvfiscanf_r+0x1ac>
 8006540:	d823      	bhi.n	800658a <__ssvfiscanf_r+0xe6>
 8006542:	2b39      	cmp	r3, #57	; 0x39
 8006544:	d809      	bhi.n	800655a <__ssvfiscanf_r+0xb6>
 8006546:	2b30      	cmp	r3, #48	; 0x30
 8006548:	d26f      	bcs.n	800662a <__ssvfiscanf_r+0x186>
 800654a:	2b25      	cmp	r3, #37	; 0x25
 800654c:	d040      	beq.n	80065d0 <__ssvfiscanf_r+0x12c>
 800654e:	2b2a      	cmp	r3, #42	; 0x2a
 8006550:	d058      	beq.n	8006604 <__ssvfiscanf_r+0x160>
 8006552:	2b00      	cmp	r3, #0
 8006554:	f040 809f 	bne.w	8006696 <__ssvfiscanf_r+0x1f2>
 8006558:	e344      	b.n	8006be4 <__ssvfiscanf_r+0x740>
 800655a:	2b4f      	cmp	r3, #79	; 0x4f
 800655c:	d069      	beq.n	8006632 <__ssvfiscanf_r+0x18e>
 800655e:	d805      	bhi.n	800656c <__ssvfiscanf_r+0xc8>
 8006560:	2b44      	cmp	r3, #68	; 0x44
 8006562:	f000 809e 	beq.w	80066a2 <__ssvfiscanf_r+0x1fe>
 8006566:	2b4c      	cmp	r3, #76	; 0x4c
 8006568:	d059      	beq.n	800661e <__ssvfiscanf_r+0x17a>
 800656a:	e094      	b.n	8006696 <__ssvfiscanf_r+0x1f2>
 800656c:	2b58      	cmp	r3, #88	; 0x58
 800656e:	d069      	beq.n	8006644 <__ssvfiscanf_r+0x1a0>
 8006570:	2b5b      	cmp	r3, #91	; 0x5b
 8006572:	f040 8090 	bne.w	8006696 <__ssvfiscanf_r+0x1f2>
 8006576:	9905      	ldr	r1, [sp, #20]
 8006578:	a816      	add	r0, sp, #88	; 0x58
 800657a:	f000 fdb1 	bl	80070e0 <__sccl>
 800657e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006582:	9005      	str	r0, [sp, #20]
 8006584:	f04f 0a01 	mov.w	sl, #1
 8006588:	e093      	b.n	80066b2 <__ssvfiscanf_r+0x20e>
 800658a:	2b6e      	cmp	r3, #110	; 0x6e
 800658c:	d06a      	beq.n	8006664 <__ssvfiscanf_r+0x1c0>
 800658e:	d80b      	bhi.n	80065a8 <__ssvfiscanf_r+0x104>
 8006590:	2b68      	cmp	r3, #104	; 0x68
 8006592:	d047      	beq.n	8006624 <__ssvfiscanf_r+0x180>
 8006594:	d803      	bhi.n	800659e <__ssvfiscanf_r+0xfa>
 8006596:	2b64      	cmp	r3, #100	; 0x64
 8006598:	f000 8085 	beq.w	80066a6 <__ssvfiscanf_r+0x202>
 800659c:	e07b      	b.n	8006696 <__ssvfiscanf_r+0x1f2>
 800659e:	2b69      	cmp	r3, #105	; 0x69
 80065a0:	d011      	beq.n	80065c6 <__ssvfiscanf_r+0x122>
 80065a2:	2b6c      	cmp	r3, #108	; 0x6c
 80065a4:	d032      	beq.n	800660c <__ssvfiscanf_r+0x168>
 80065a6:	e076      	b.n	8006696 <__ssvfiscanf_r+0x1f2>
 80065a8:	2b73      	cmp	r3, #115	; 0x73
 80065aa:	d04e      	beq.n	800664a <__ssvfiscanf_r+0x1a6>
 80065ac:	d806      	bhi.n	80065bc <__ssvfiscanf_r+0x118>
 80065ae:	2b6f      	cmp	r3, #111	; 0x6f
 80065b0:	d041      	beq.n	8006636 <__ssvfiscanf_r+0x192>
 80065b2:	2b70      	cmp	r3, #112	; 0x70
 80065b4:	d16f      	bne.n	8006696 <__ssvfiscanf_r+0x1f2>
 80065b6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
 80065ba:	e04e      	b.n	800665a <__ssvfiscanf_r+0x1b6>
 80065bc:	2b75      	cmp	r3, #117	; 0x75
 80065be:	d03f      	beq.n	8006640 <__ssvfiscanf_r+0x19c>
 80065c0:	2b78      	cmp	r3, #120	; 0x78
 80065c2:	d03f      	beq.n	8006644 <__ssvfiscanf_r+0x1a0>
 80065c4:	e067      	b.n	8006696 <__ssvfiscanf_r+0x1f2>
 80065c6:	4b74      	ldr	r3, [pc, #464]	; (8006798 <__ssvfiscanf_r+0x2f4>)
 80065c8:	9304      	str	r3, [sp, #16]
 80065ca:	f04f 0b00 	mov.w	fp, #0
 80065ce:	e06e      	b.n	80066ae <__ssvfiscanf_r+0x20a>
 80065d0:	686b      	ldr	r3, [r5, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	dd0f      	ble.n	80065f6 <__ssvfiscanf_r+0x152>
 80065d6:	682b      	ldr	r3, [r5, #0]
 80065d8:	9a05      	ldr	r2, [sp, #20]
 80065da:	7819      	ldrb	r1, [r3, #0]
 80065dc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80065e0:	4291      	cmp	r1, r2
 80065e2:	f040 82fd 	bne.w	8006be0 <__ssvfiscanf_r+0x73c>
 80065e6:	686a      	ldr	r2, [r5, #4]
 80065e8:	3301      	adds	r3, #1
 80065ea:	3a01      	subs	r2, #1
 80065ec:	606a      	str	r2, [r5, #4]
 80065ee:	602b      	str	r3, [r5, #0]
 80065f0:	f108 0801 	add.w	r8, r8, #1
 80065f4:	e76d      	b.n	80064d2 <__ssvfiscanf_r+0x2e>
 80065f6:	4629      	mov	r1, r5
 80065f8:	4648      	mov	r0, r9
 80065fa:	f7ff fefd 	bl	80063f8 <__ssrefill_r>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d0e9      	beq.n	80065d6 <__ssvfiscanf_r+0x132>
 8006602:	e2e2      	b.n	8006bca <__ssvfiscanf_r+0x726>
 8006604:	f044 0410 	orr.w	r4, r4, #16
 8006608:	9a05      	ldr	r2, [sp, #20]
 800660a:	e792      	b.n	8006532 <__ssvfiscanf_r+0x8e>
 800660c:	7853      	ldrb	r3, [r2, #1]
 800660e:	2b6c      	cmp	r3, #108	; 0x6c
 8006610:	d102      	bne.n	8006618 <__ssvfiscanf_r+0x174>
 8006612:	1c93      	adds	r3, r2, #2
 8006614:	9305      	str	r3, [sp, #20]
 8006616:	e002      	b.n	800661e <__ssvfiscanf_r+0x17a>
 8006618:	f044 0401 	orr.w	r4, r4, #1
 800661c:	e7f4      	b.n	8006608 <__ssvfiscanf_r+0x164>
 800661e:	f044 0402 	orr.w	r4, r4, #2
 8006622:	e7f1      	b.n	8006608 <__ssvfiscanf_r+0x164>
 8006624:	f044 0404 	orr.w	r4, r4, #4
 8006628:	e7ee      	b.n	8006608 <__ssvfiscanf_r+0x164>
 800662a:	fb00 3606 	mla	r6, r0, r6, r3
 800662e:	3e30      	subs	r6, #48	; 0x30
 8006630:	e7ea      	b.n	8006608 <__ssvfiscanf_r+0x164>
 8006632:	f044 0401 	orr.w	r4, r4, #1
 8006636:	4b59      	ldr	r3, [pc, #356]	; (800679c <__ssvfiscanf_r+0x2f8>)
 8006638:	9304      	str	r3, [sp, #16]
 800663a:	f04f 0b08 	mov.w	fp, #8
 800663e:	e036      	b.n	80066ae <__ssvfiscanf_r+0x20a>
 8006640:	4b56      	ldr	r3, [pc, #344]	; (800679c <__ssvfiscanf_r+0x2f8>)
 8006642:	e031      	b.n	80066a8 <__ssvfiscanf_r+0x204>
 8006644:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8006648:	e007      	b.n	800665a <__ssvfiscanf_r+0x1b6>
 800664a:	f04f 0a02 	mov.w	sl, #2
 800664e:	e030      	b.n	80066b2 <__ssvfiscanf_r+0x20e>
 8006650:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006654:	f04f 0a00 	mov.w	sl, #0
 8006658:	e02b      	b.n	80066b2 <__ssvfiscanf_r+0x20e>
 800665a:	4b50      	ldr	r3, [pc, #320]	; (800679c <__ssvfiscanf_r+0x2f8>)
 800665c:	9304      	str	r3, [sp, #16]
 800665e:	f04f 0b10 	mov.w	fp, #16
 8006662:	e024      	b.n	80066ae <__ssvfiscanf_r+0x20a>
 8006664:	06e3      	lsls	r3, r4, #27
 8006666:	f53f af34 	bmi.w	80064d2 <__ssvfiscanf_r+0x2e>
 800666a:	f014 0f04 	tst.w	r4, #4
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	f107 0304 	add.w	r3, r7, #4
 8006674:	d002      	beq.n	800667c <__ssvfiscanf_r+0x1d8>
 8006676:	f8a2 8000 	strh.w	r8, [r2]
 800667a:	e003      	b.n	8006684 <__ssvfiscanf_r+0x1e0>
 800667c:	07e6      	lsls	r6, r4, #31
 800667e:	d503      	bpl.n	8006688 <__ssvfiscanf_r+0x1e4>
 8006680:	f8c2 8000 	str.w	r8, [r2]
 8006684:	461f      	mov	r7, r3
 8006686:	e724      	b.n	80064d2 <__ssvfiscanf_r+0x2e>
 8006688:	07a4      	lsls	r4, r4, #30
 800668a:	d5f9      	bpl.n	8006680 <__ssvfiscanf_r+0x1dc>
 800668c:	4640      	mov	r0, r8
 800668e:	17c1      	asrs	r1, r0, #31
 8006690:	e9c2 0100 	strd	r0, r1, [r2]
 8006694:	e7f6      	b.n	8006684 <__ssvfiscanf_r+0x1e0>
 8006696:	440b      	add	r3, r1
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d101      	bne.n	80066a6 <__ssvfiscanf_r+0x202>
 80066a2:	f044 0401 	orr.w	r4, r4, #1
 80066a6:	4b3c      	ldr	r3, [pc, #240]	; (8006798 <__ssvfiscanf_r+0x2f4>)
 80066a8:	9304      	str	r3, [sp, #16]
 80066aa:	f04f 0b0a 	mov.w	fp, #10
 80066ae:	f04f 0a03 	mov.w	sl, #3
 80066b2:	686b      	ldr	r3, [r5, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dd02      	ble.n	80066be <__ssvfiscanf_r+0x21a>
 80066b8:	0660      	lsls	r0, r4, #25
 80066ba:	d420      	bmi.n	80066fe <__ssvfiscanf_r+0x25a>
 80066bc:	e00f      	b.n	80066de <__ssvfiscanf_r+0x23a>
 80066be:	4629      	mov	r1, r5
 80066c0:	4648      	mov	r0, r9
 80066c2:	f7ff fe99 	bl	80063f8 <__ssrefill_r>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d0f6      	beq.n	80066b8 <__ssvfiscanf_r+0x214>
 80066ca:	e27e      	b.n	8006bca <__ssvfiscanf_r+0x726>
 80066cc:	686a      	ldr	r2, [r5, #4]
 80066ce:	3a01      	subs	r2, #1
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	f108 0801 	add.w	r8, r8, #1
 80066d6:	606a      	str	r2, [r5, #4]
 80066d8:	dd0a      	ble.n	80066f0 <__ssvfiscanf_r+0x24c>
 80066da:	3301      	adds	r3, #1
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	4a2c      	ldr	r2, [pc, #176]	; (8006794 <__ssvfiscanf_r+0x2f0>)
 80066e2:	7819      	ldrb	r1, [r3, #0]
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	440a      	add	r2, r1
 80066e8:	7852      	ldrb	r2, [r2, #1]
 80066ea:	0711      	lsls	r1, r2, #28
 80066ec:	d4ee      	bmi.n	80066cc <__ssvfiscanf_r+0x228>
 80066ee:	e006      	b.n	80066fe <__ssvfiscanf_r+0x25a>
 80066f0:	4629      	mov	r1, r5
 80066f2:	4648      	mov	r0, r9
 80066f4:	f7ff fe80 	bl	80063f8 <__ssrefill_r>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d0f0      	beq.n	80066de <__ssvfiscanf_r+0x23a>
 80066fc:	e265      	b.n	8006bca <__ssvfiscanf_r+0x726>
 80066fe:	f1ba 0f02 	cmp.w	sl, #2
 8006702:	f000 80e4 	beq.w	80068ce <__ssvfiscanf_r+0x42a>
 8006706:	f1ba 0f03 	cmp.w	sl, #3
 800670a:	f000 8198 	beq.w	8006a3e <__ssvfiscanf_r+0x59a>
 800670e:	f1ba 0f01 	cmp.w	sl, #1
 8006712:	f004 0a10 	and.w	sl, r4, #16
 8006716:	f000 808a 	beq.w	800682e <__ssvfiscanf_r+0x38a>
 800671a:	2e00      	cmp	r6, #0
 800671c:	bf08      	it	eq
 800671e:	2601      	moveq	r6, #1
 8006720:	f014 0401 	ands.w	r4, r4, #1
 8006724:	d05b      	beq.n	80067de <__ssvfiscanf_r+0x33a>
 8006726:	2208      	movs	r2, #8
 8006728:	2100      	movs	r1, #0
 800672a:	a80a      	add	r0, sp, #40	; 0x28
 800672c:	f7fd f8e3 	bl	80038f6 <memset>
 8006730:	f1ba 0f00 	cmp.w	sl, #0
 8006734:	d103      	bne.n	800673e <__ssvfiscanf_r+0x29a>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	9306      	str	r3, [sp, #24]
 800673a:	3704      	adds	r7, #4
 800673c:	e001      	b.n	8006742 <__ssvfiscanf_r+0x29e>
 800673e:	2300      	movs	r3, #0
 8006740:	9306      	str	r3, [sp, #24]
 8006742:	2300      	movs	r3, #0
 8006744:	9307      	str	r3, [sp, #28]
 8006746:	f7ff f94d 	bl	80059e4 <__locale_mb_cur_max>
 800674a:	9b07      	ldr	r3, [sp, #28]
 800674c:	4298      	cmp	r0, r3
 800674e:	f000 823c 	beq.w	8006bca <__ssvfiscanf_r+0x726>
 8006752:	682a      	ldr	r2, [r5, #0]
 8006754:	a80c      	add	r0, sp, #48	; 0x30
 8006756:	f812 1b01 	ldrb.w	r1, [r2], #1
 800675a:	54c1      	strb	r1, [r0, r3]
 800675c:	1c5c      	adds	r4, r3, #1
 800675e:	686b      	ldr	r3, [r5, #4]
 8006760:	9906      	ldr	r1, [sp, #24]
 8006762:	3b01      	subs	r3, #1
 8006764:	e885 000c 	stmia.w	r5, {r2, r3}
 8006768:	ab0a      	add	r3, sp, #40	; 0x28
 800676a:	4602      	mov	r2, r0
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4648      	mov	r0, r9
 8006770:	4623      	mov	r3, r4
 8006772:	f000 fab7 	bl	8006ce4 <_mbrtowc_r>
 8006776:	1c42      	adds	r2, r0, #1
 8006778:	f000 8227 	beq.w	8006bca <__ssvfiscanf_r+0x726>
 800677c:	b980      	cbnz	r0, 80067a0 <__ssvfiscanf_r+0x2fc>
 800677e:	44a0      	add	r8, r4
 8006780:	3e01      	subs	r6, #1
 8006782:	f1ba 0f00 	cmp.w	sl, #0
 8006786:	f040 8230 	bne.w	8006bea <__ssvfiscanf_r+0x746>
 800678a:	9b06      	ldr	r3, [sp, #24]
 800678c:	f8c3 a000 	str.w	sl, [r3]
 8006790:	e00d      	b.n	80067ae <__ssvfiscanf_r+0x30a>
 8006792:	bf00      	nop
 8006794:	2000044c 	.word	0x2000044c
 8006798:	08007145 	.word	0x08007145
 800679c:	0800626d 	.word	0x0800626d
 80067a0:	3002      	adds	r0, #2
 80067a2:	d008      	beq.n	80067b6 <__ssvfiscanf_r+0x312>
 80067a4:	44a0      	add	r8, r4
 80067a6:	3e01      	subs	r6, #1
 80067a8:	f1ba 0f00 	cmp.w	sl, #0
 80067ac:	d102      	bne.n	80067b4 <__ssvfiscanf_r+0x310>
 80067ae:	9b06      	ldr	r3, [sp, #24]
 80067b0:	3304      	adds	r3, #4
 80067b2:	9306      	str	r3, [sp, #24]
 80067b4:	2400      	movs	r4, #0
 80067b6:	686b      	ldr	r3, [r5, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	dc0c      	bgt.n	80067d6 <__ssvfiscanf_r+0x332>
 80067bc:	4629      	mov	r1, r5
 80067be:	4648      	mov	r0, r9
 80067c0:	f7ff fe1a 	bl	80063f8 <__ssrefill_r>
 80067c4:	b138      	cbz	r0, 80067d6 <__ssvfiscanf_r+0x332>
 80067c6:	2c00      	cmp	r4, #0
 80067c8:	f040 81ff 	bne.w	8006bca <__ssvfiscanf_r+0x726>
 80067cc:	f1ba 0f00 	cmp.w	sl, #0
 80067d0:	f000 80ec 	beq.w	80069ac <__ssvfiscanf_r+0x508>
 80067d4:	e67d      	b.n	80064d2 <__ssvfiscanf_r+0x2e>
 80067d6:	2e00      	cmp	r6, #0
 80067d8:	d0f8      	beq.n	80067cc <__ssvfiscanf_r+0x328>
 80067da:	4623      	mov	r3, r4
 80067dc:	e7b2      	b.n	8006744 <__ssvfiscanf_r+0x2a0>
 80067de:	f1ba 0f00 	cmp.w	sl, #0
 80067e2:	d017      	beq.n	8006814 <__ssvfiscanf_r+0x370>
 80067e4:	686b      	ldr	r3, [r5, #4]
 80067e6:	682a      	ldr	r2, [r5, #0]
 80067e8:	42b3      	cmp	r3, r6
 80067ea:	da0d      	bge.n	8006808 <__ssvfiscanf_r+0x364>
 80067ec:	441c      	add	r4, r3
 80067ee:	1af6      	subs	r6, r6, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	4629      	mov	r1, r5
 80067f6:	4648      	mov	r0, r9
 80067f8:	f7ff fdfe 	bl	80063f8 <__ssrefill_r>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d0f1      	beq.n	80067e4 <__ssvfiscanf_r+0x340>
 8006800:	2c00      	cmp	r4, #0
 8006802:	f040 80f1 	bne.w	80069e8 <__ssvfiscanf_r+0x544>
 8006806:	e1e0      	b.n	8006bca <__ssvfiscanf_r+0x726>
 8006808:	1b9b      	subs	r3, r3, r6
 800680a:	606b      	str	r3, [r5, #4]
 800680c:	1993      	adds	r3, r2, r6
 800680e:	4434      	add	r4, r6
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	e0e9      	b.n	80069e8 <__ssvfiscanf_r+0x544>
 8006814:	9500      	str	r5, [sp, #0]
 8006816:	4633      	mov	r3, r6
 8006818:	2201      	movs	r2, #1
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	4648      	mov	r0, r9
 800681e:	1d3c      	adds	r4, r7, #4
 8006820:	f7ff fe07 	bl	8006432 <_sfread_r>
 8006824:	2800      	cmp	r0, #0
 8006826:	f000 81d0 	beq.w	8006bca <__ssvfiscanf_r+0x726>
 800682a:	4480      	add	r8, r0
 800682c:	e102      	b.n	8006a34 <__ssvfiscanf_r+0x590>
 800682e:	2e00      	cmp	r6, #0
 8006830:	bf08      	it	eq
 8006832:	f04f 36ff 	moveq.w	r6, #4294967295
 8006836:	f1ba 0f00 	cmp.w	sl, #0
 800683a:	d01d      	beq.n	8006878 <__ssvfiscanf_r+0x3d4>
 800683c:	2400      	movs	r4, #0
 800683e:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	f81a 2002 	ldrb.w	r2, [sl, r2]
 800684a:	b18a      	cbz	r2, 8006870 <__ssvfiscanf_r+0x3cc>
 800684c:	686a      	ldr	r2, [r5, #4]
 800684e:	3401      	adds	r4, #1
 8006850:	3a01      	subs	r2, #1
 8006852:	3301      	adds	r3, #1
 8006854:	42b4      	cmp	r4, r6
 8006856:	606a      	str	r2, [r5, #4]
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	f000 80c5 	beq.w	80069e8 <__ssvfiscanf_r+0x544>
 800685e:	2a00      	cmp	r2, #0
 8006860:	dcef      	bgt.n	8006842 <__ssvfiscanf_r+0x39e>
 8006862:	4629      	mov	r1, r5
 8006864:	4648      	mov	r0, r9
 8006866:	f7ff fdc7 	bl	80063f8 <__ssrefill_r>
 800686a:	2800      	cmp	r0, #0
 800686c:	d0e9      	beq.n	8006842 <__ssvfiscanf_r+0x39e>
 800686e:	e0bb      	b.n	80069e8 <__ssvfiscanf_r+0x544>
 8006870:	2c00      	cmp	r4, #0
 8006872:	f040 80b9 	bne.w	80069e8 <__ssvfiscanf_r+0x544>
 8006876:	e1b3      	b.n	8006be0 <__ssvfiscanf_r+0x73c>
 8006878:	683c      	ldr	r4, [r7, #0]
 800687a:	f107 0a04 	add.w	sl, r7, #4
 800687e:	4426      	add	r6, r4
 8006880:	4627      	mov	r7, r4
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	a916      	add	r1, sp, #88	; 0x58
 8006886:	781a      	ldrb	r2, [r3, #0]
 8006888:	5c8a      	ldrb	r2, [r1, r2]
 800688a:	b1aa      	cbz	r2, 80068b8 <__ssvfiscanf_r+0x414>
 800688c:	686a      	ldr	r2, [r5, #4]
 800688e:	3a01      	subs	r2, #1
 8006890:	606a      	str	r2, [r5, #4]
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	602a      	str	r2, [r5, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f807 3b01 	strb.w	r3, [r7], #1
 800689c:	42be      	cmp	r6, r7
 800689e:	d00c      	beq.n	80068ba <__ssvfiscanf_r+0x416>
 80068a0:	686b      	ldr	r3, [r5, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dced      	bgt.n	8006882 <__ssvfiscanf_r+0x3de>
 80068a6:	4629      	mov	r1, r5
 80068a8:	4648      	mov	r0, r9
 80068aa:	f7ff fda5 	bl	80063f8 <__ssrefill_r>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d0e7      	beq.n	8006882 <__ssvfiscanf_r+0x3de>
 80068b2:	42bc      	cmp	r4, r7
 80068b4:	f000 8189 	beq.w	8006bca <__ssvfiscanf_r+0x726>
 80068b8:	463e      	mov	r6, r7
 80068ba:	1b34      	subs	r4, r6, r4
 80068bc:	f000 8190 	beq.w	8006be0 <__ssvfiscanf_r+0x73c>
 80068c0:	2300      	movs	r3, #0
 80068c2:	7033      	strb	r3, [r6, #0]
 80068c4:	9b03      	ldr	r3, [sp, #12]
 80068c6:	3301      	adds	r3, #1
 80068c8:	9303      	str	r3, [sp, #12]
 80068ca:	4657      	mov	r7, sl
 80068cc:	e08c      	b.n	80069e8 <__ssvfiscanf_r+0x544>
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	bf08      	it	eq
 80068d2:	f04f 36ff 	moveq.w	r6, #4294967295
 80068d6:	f004 0210 	and.w	r2, r4, #16
 80068da:	f014 0301 	ands.w	r3, r4, #1
 80068de:	9206      	str	r2, [sp, #24]
 80068e0:	d067      	beq.n	80069b2 <__ssvfiscanf_r+0x50e>
 80068e2:	2208      	movs	r2, #8
 80068e4:	2100      	movs	r1, #0
 80068e6:	a80a      	add	r0, sp, #40	; 0x28
 80068e8:	f7fd f805 	bl	80038f6 <memset>
 80068ec:	9b06      	ldr	r3, [sp, #24]
 80068ee:	b913      	cbnz	r3, 80068f6 <__ssvfiscanf_r+0x452>
 80068f0:	683c      	ldr	r4, [r7, #0]
 80068f2:	3704      	adds	r7, #4
 80068f4:	e000      	b.n	80068f8 <__ssvfiscanf_r+0x454>
 80068f6:	ac09      	add	r4, sp, #36	; 0x24
 80068f8:	2300      	movs	r3, #0
 80068fa:	682a      	ldr	r2, [r5, #0]
 80068fc:	49a9      	ldr	r1, [pc, #676]	; (8006ba4 <__ssvfiscanf_r+0x700>)
 80068fe:	7812      	ldrb	r2, [r2, #0]
 8006900:	6809      	ldr	r1, [r1, #0]
 8006902:	440a      	add	r2, r1
 8006904:	7852      	ldrb	r2, [r2, #1]
 8006906:	0711      	lsls	r1, r2, #28
 8006908:	d44b      	bmi.n	80069a2 <__ssvfiscanf_r+0x4fe>
 800690a:	2e00      	cmp	r6, #0
 800690c:	d049      	beq.n	80069a2 <__ssvfiscanf_r+0x4fe>
 800690e:	9307      	str	r3, [sp, #28]
 8006910:	f7ff f868 	bl	80059e4 <__locale_mb_cur_max>
 8006914:	9b07      	ldr	r3, [sp, #28]
 8006916:	4283      	cmp	r3, r0
 8006918:	f000 8157 	beq.w	8006bca <__ssvfiscanf_r+0x726>
 800691c:	682a      	ldr	r2, [r5, #0]
 800691e:	a80c      	add	r0, sp, #48	; 0x30
 8006920:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006924:	54c1      	strb	r1, [r0, r3]
 8006926:	f103 0a01 	add.w	sl, r3, #1
 800692a:	686b      	ldr	r3, [r5, #4]
 800692c:	3b01      	subs	r3, #1
 800692e:	e885 000c 	stmia.w	r5, {r2, r3}
 8006932:	ab0a      	add	r3, sp, #40	; 0x28
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	4602      	mov	r2, r0
 8006938:	4653      	mov	r3, sl
 800693a:	4621      	mov	r1, r4
 800693c:	4648      	mov	r0, r9
 800693e:	f000 f9d1 	bl	8006ce4 <_mbrtowc_r>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	f000 8141 	beq.w	8006bca <__ssvfiscanf_r+0x726>
 8006948:	b908      	cbnz	r0, 800694e <__ssvfiscanf_r+0x4aa>
 800694a:	6020      	str	r0, [r4, #0]
 800694c:	e001      	b.n	8006952 <__ssvfiscanf_r+0x4ae>
 800694e:	3002      	adds	r0, #2
 8006950:	d018      	beq.n	8006984 <__ssvfiscanf_r+0x4e0>
 8006952:	6820      	ldr	r0, [r4, #0]
 8006954:	f000 f9b8 	bl	8006cc8 <iswspace>
 8006958:	b160      	cbz	r0, 8006974 <__ssvfiscanf_r+0x4d0>
 800695a:	ae0c      	add	r6, sp, #48	; 0x30
 800695c:	f1ba 0f00 	cmp.w	sl, #0
 8006960:	d01f      	beq.n	80069a2 <__ssvfiscanf_r+0x4fe>
 8006962:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006966:	462a      	mov	r2, r5
 8006968:	f816 100a 	ldrb.w	r1, [r6, sl]
 800696c:	4648      	mov	r0, r9
 800696e:	f7ff fd05 	bl	800637c <_sungetc_r>
 8006972:	e7f3      	b.n	800695c <__ssvfiscanf_r+0x4b8>
 8006974:	9b06      	ldr	r3, [sp, #24]
 8006976:	44d0      	add	r8, sl
 8006978:	3e01      	subs	r6, #1
 800697a:	b913      	cbnz	r3, 8006982 <__ssvfiscanf_r+0x4de>
 800697c:	3404      	adds	r4, #4
 800697e:	469a      	mov	sl, r3
 8006980:	e000      	b.n	8006984 <__ssvfiscanf_r+0x4e0>
 8006982:	4682      	mov	sl, r0
 8006984:	686b      	ldr	r3, [r5, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	dc09      	bgt.n	800699e <__ssvfiscanf_r+0x4fa>
 800698a:	4629      	mov	r1, r5
 800698c:	4648      	mov	r0, r9
 800698e:	f7ff fd33 	bl	80063f8 <__ssrefill_r>
 8006992:	b120      	cbz	r0, 800699e <__ssvfiscanf_r+0x4fa>
 8006994:	f1ba 0f00 	cmp.w	sl, #0
 8006998:	f040 8117 	bne.w	8006bca <__ssvfiscanf_r+0x726>
 800699c:	e001      	b.n	80069a2 <__ssvfiscanf_r+0x4fe>
 800699e:	4653      	mov	r3, sl
 80069a0:	e7ab      	b.n	80068fa <__ssvfiscanf_r+0x456>
 80069a2:	9b06      	ldr	r3, [sp, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f47f ad94 	bne.w	80064d2 <__ssvfiscanf_r+0x2e>
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	3301      	adds	r3, #1
 80069b0:	e58e      	b.n	80064d0 <__ssvfiscanf_r+0x2c>
 80069b2:	9a06      	ldr	r2, [sp, #24]
 80069b4:	b1d2      	cbz	r2, 80069ec <__ssvfiscanf_r+0x548>
 80069b6:	461c      	mov	r4, r3
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	497a      	ldr	r1, [pc, #488]	; (8006ba4 <__ssvfiscanf_r+0x700>)
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	6809      	ldr	r1, [r1, #0]
 80069c0:	440a      	add	r2, r1
 80069c2:	7852      	ldrb	r2, [r2, #1]
 80069c4:	0712      	lsls	r2, r2, #28
 80069c6:	d40f      	bmi.n	80069e8 <__ssvfiscanf_r+0x544>
 80069c8:	686a      	ldr	r2, [r5, #4]
 80069ca:	3401      	adds	r4, #1
 80069cc:	3a01      	subs	r2, #1
 80069ce:	3301      	adds	r3, #1
 80069d0:	42b4      	cmp	r4, r6
 80069d2:	606a      	str	r2, [r5, #4]
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	d007      	beq.n	80069e8 <__ssvfiscanf_r+0x544>
 80069d8:	2a00      	cmp	r2, #0
 80069da:	dced      	bgt.n	80069b8 <__ssvfiscanf_r+0x514>
 80069dc:	4629      	mov	r1, r5
 80069de:	4648      	mov	r0, r9
 80069e0:	f7ff fd0a 	bl	80063f8 <__ssrefill_r>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d0e7      	beq.n	80069b8 <__ssvfiscanf_r+0x514>
 80069e8:	44a0      	add	r8, r4
 80069ea:	e572      	b.n	80064d2 <__ssvfiscanf_r+0x2e>
 80069ec:	1d3c      	adds	r4, r7, #4
 80069ee:	683f      	ldr	r7, [r7, #0]
 80069f0:	443e      	add	r6, r7
 80069f2:	46ba      	mov	sl, r7
 80069f4:	6829      	ldr	r1, [r5, #0]
 80069f6:	4a6b      	ldr	r2, [pc, #428]	; (8006ba4 <__ssvfiscanf_r+0x700>)
 80069f8:	780b      	ldrb	r3, [r1, #0]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	4413      	add	r3, r2
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	071b      	lsls	r3, r3, #28
 8006a02:	d412      	bmi.n	8006a2a <__ssvfiscanf_r+0x586>
 8006a04:	686b      	ldr	r3, [r5, #4]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	606b      	str	r3, [r5, #4]
 8006a0a:	1c4b      	adds	r3, r1, #1
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	780b      	ldrb	r3, [r1, #0]
 8006a10:	f80a 3b01 	strb.w	r3, [sl], #1
 8006a14:	4556      	cmp	r6, sl
 8006a16:	d009      	beq.n	8006a2c <__ssvfiscanf_r+0x588>
 8006a18:	686b      	ldr	r3, [r5, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dcea      	bgt.n	80069f4 <__ssvfiscanf_r+0x550>
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4648      	mov	r0, r9
 8006a22:	f7ff fce9 	bl	80063f8 <__ssrefill_r>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d0e4      	beq.n	80069f4 <__ssvfiscanf_r+0x550>
 8006a2a:	4656      	mov	r6, sl
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	7033      	strb	r3, [r6, #0]
 8006a30:	1bf6      	subs	r6, r6, r7
 8006a32:	44b0      	add	r8, r6
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	3301      	adds	r3, #1
 8006a38:	9303      	str	r3, [sp, #12]
 8006a3a:	4627      	mov	r7, r4
 8006a3c:	e549      	b.n	80064d2 <__ssvfiscanf_r+0x2e>
 8006a3e:	1e73      	subs	r3, r6, #1
 8006a40:	2b26      	cmp	r3, #38	; 0x26
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	bf8a      	itet	hi
 8006a48:	f1a6 0327 	subhi.w	r3, r6, #39	; 0x27
 8006a4c:	2300      	movls	r3, #0
 8006a4e:	2627      	movhi	r6, #39	; 0x27
 8006a50:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
 8006a54:	9206      	str	r2, [sp, #24]
 8006a56:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8006a5a:	6829      	ldr	r1, [r5, #0]
 8006a5c:	780a      	ldrb	r2, [r1, #0]
 8006a5e:	2a39      	cmp	r2, #57	; 0x39
 8006a60:	d809      	bhi.n	8006a76 <__ssvfiscanf_r+0x5d2>
 8006a62:	2a38      	cmp	r2, #56	; 0x38
 8006a64:	d231      	bcs.n	8006aca <__ssvfiscanf_r+0x626>
 8006a66:	2a30      	cmp	r2, #48	; 0x30
 8006a68:	d014      	beq.n	8006a94 <__ssvfiscanf_r+0x5f0>
 8006a6a:	d82a      	bhi.n	8006ac2 <__ssvfiscanf_r+0x61e>
 8006a6c:	2a2b      	cmp	r2, #43	; 0x2b
 8006a6e:	d038      	beq.n	8006ae2 <__ssvfiscanf_r+0x63e>
 8006a70:	2a2d      	cmp	r2, #45	; 0x2d
 8006a72:	d036      	beq.n	8006ae2 <__ssvfiscanf_r+0x63e>
 8006a74:	e05a      	b.n	8006b2c <__ssvfiscanf_r+0x688>
 8006a76:	2a58      	cmp	r2, #88	; 0x58
 8006a78:	d038      	beq.n	8006aec <__ssvfiscanf_r+0x648>
 8006a7a:	d804      	bhi.n	8006a86 <__ssvfiscanf_r+0x5e2>
 8006a7c:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8006a80:	2805      	cmp	r0, #5
 8006a82:	d928      	bls.n	8006ad6 <__ssvfiscanf_r+0x632>
 8006a84:	e052      	b.n	8006b2c <__ssvfiscanf_r+0x688>
 8006a86:	2a61      	cmp	r2, #97	; 0x61
 8006a88:	d350      	bcc.n	8006b2c <__ssvfiscanf_r+0x688>
 8006a8a:	2a66      	cmp	r2, #102	; 0x66
 8006a8c:	d923      	bls.n	8006ad6 <__ssvfiscanf_r+0x632>
 8006a8e:	2a78      	cmp	r2, #120	; 0x78
 8006a90:	d02c      	beq.n	8006aec <__ssvfiscanf_r+0x648>
 8006a92:	e04b      	b.n	8006b2c <__ssvfiscanf_r+0x688>
 8006a94:	0520      	lsls	r0, r4, #20
 8006a96:	d534      	bpl.n	8006b02 <__ssvfiscanf_r+0x65e>
 8006a98:	f1bb 0f00 	cmp.w	fp, #0
 8006a9c:	d103      	bne.n	8006aa6 <__ssvfiscanf_r+0x602>
 8006a9e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8006aa2:	f04f 0b08 	mov.w	fp, #8
 8006aa6:	0560      	lsls	r0, r4, #21
 8006aa8:	d502      	bpl.n	8006ab0 <__ssvfiscanf_r+0x60c>
 8006aaa:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 8006aae:	e028      	b.n	8006b02 <__ssvfiscanf_r+0x65e>
 8006ab0:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 8006ab4:	b10b      	cbz	r3, 8006aba <__ssvfiscanf_r+0x616>
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	3601      	adds	r6, #1
 8006aba:	9a06      	ldr	r2, [sp, #24]
 8006abc:	3201      	adds	r2, #1
 8006abe:	9206      	str	r2, [sp, #24]
 8006ac0:	e023      	b.n	8006b0a <__ssvfiscanf_r+0x666>
 8006ac2:	4839      	ldr	r0, [pc, #228]	; (8006ba8 <__ssvfiscanf_r+0x704>)
 8006ac4:	f930 b01b 	ldrsh.w	fp, [r0, fp, lsl #1]
 8006ac8:	e008      	b.n	8006adc <__ssvfiscanf_r+0x638>
 8006aca:	4837      	ldr	r0, [pc, #220]	; (8006ba8 <__ssvfiscanf_r+0x704>)
 8006acc:	f930 b01b 	ldrsh.w	fp, [r0, fp, lsl #1]
 8006ad0:	f1bb 0f08 	cmp.w	fp, #8
 8006ad4:	e001      	b.n	8006ada <__ssvfiscanf_r+0x636>
 8006ad6:	f1bb 0f0a 	cmp.w	fp, #10
 8006ada:	dd27      	ble.n	8006b2c <__ssvfiscanf_r+0x688>
 8006adc:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 8006ae0:	e00f      	b.n	8006b02 <__ssvfiscanf_r+0x65e>
 8006ae2:	0620      	lsls	r0, r4, #24
 8006ae4:	d522      	bpl.n	8006b2c <__ssvfiscanf_r+0x688>
 8006ae6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8006aea:	e00a      	b.n	8006b02 <__ssvfiscanf_r+0x65e>
 8006aec:	f404 60c0 	and.w	r0, r4, #1536	; 0x600
 8006af0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006af4:	d11a      	bne.n	8006b2c <__ssvfiscanf_r+0x688>
 8006af6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8006afa:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 8006afe:	f04f 0b10 	mov.w	fp, #16
 8006b02:	f88a 2000 	strb.w	r2, [sl]
 8006b06:	f10a 0a01 	add.w	sl, sl, #1
 8006b0a:	686a      	ldr	r2, [r5, #4]
 8006b0c:	3a01      	subs	r2, #1
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	606a      	str	r2, [r5, #4]
 8006b12:	dd02      	ble.n	8006b1a <__ssvfiscanf_r+0x676>
 8006b14:	3101      	adds	r1, #1
 8006b16:	6029      	str	r1, [r5, #0]
 8006b18:	e006      	b.n	8006b28 <__ssvfiscanf_r+0x684>
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4648      	mov	r0, r9
 8006b1e:	9307      	str	r3, [sp, #28]
 8006b20:	f7ff fc6a 	bl	80063f8 <__ssrefill_r>
 8006b24:	9b07      	ldr	r3, [sp, #28]
 8006b26:	b908      	cbnz	r0, 8006b2c <__ssvfiscanf_r+0x688>
 8006b28:	3e01      	subs	r6, #1
 8006b2a:	d196      	bne.n	8006a5a <__ssvfiscanf_r+0x5b6>
 8006b2c:	05e3      	lsls	r3, r4, #23
 8006b2e:	d50e      	bpl.n	8006b4e <__ssvfiscanf_r+0x6aa>
 8006b30:	ab0c      	add	r3, sp, #48	; 0x30
 8006b32:	459a      	cmp	sl, r3
 8006b34:	d908      	bls.n	8006b48 <__ssvfiscanf_r+0x6a4>
 8006b36:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	4648      	mov	r0, r9
 8006b3e:	f7ff fc1d 	bl	800637c <_sungetc_r>
 8006b42:	f10a 36ff 	add.w	r6, sl, #4294967295
 8006b46:	46b2      	mov	sl, r6
 8006b48:	ab0c      	add	r3, sp, #48	; 0x30
 8006b4a:	459a      	cmp	sl, r3
 8006b4c:	d048      	beq.n	8006be0 <__ssvfiscanf_r+0x73c>
 8006b4e:	f014 0210 	ands.w	r2, r4, #16
 8006b52:	d133      	bne.n	8006bbc <__ssvfiscanf_r+0x718>
 8006b54:	465b      	mov	r3, fp
 8006b56:	a90c      	add	r1, sp, #48	; 0x30
 8006b58:	4648      	mov	r0, r9
 8006b5a:	9e04      	ldr	r6, [sp, #16]
 8006b5c:	f88a 2000 	strb.w	r2, [sl]
 8006b60:	47b0      	blx	r6
 8006b62:	f014 0f20 	tst.w	r4, #32
 8006b66:	f107 0304 	add.w	r3, r7, #4
 8006b6a:	d121      	bne.n	8006bb0 <__ssvfiscanf_r+0x70c>
 8006b6c:	0766      	lsls	r6, r4, #29
 8006b6e:	d502      	bpl.n	8006b76 <__ssvfiscanf_r+0x6d2>
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	8010      	strh	r0, [r2, #0]
 8006b74:	e01e      	b.n	8006bb4 <__ssvfiscanf_r+0x710>
 8006b76:	f014 0201 	ands.w	r2, r4, #1
 8006b7a:	d119      	bne.n	8006bb0 <__ssvfiscanf_r+0x70c>
 8006b7c:	07a1      	lsls	r1, r4, #30
 8006b7e:	d517      	bpl.n	8006bb0 <__ssvfiscanf_r+0x70c>
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <__ssvfiscanf_r+0x708>)
 8006b82:	9904      	ldr	r1, [sp, #16]
 8006b84:	4299      	cmp	r1, r3
 8006b86:	4648      	mov	r0, r9
 8006b88:	465b      	mov	r3, fp
 8006b8a:	a90c      	add	r1, sp, #48	; 0x30
 8006b8c:	d102      	bne.n	8006b94 <__ssvfiscanf_r+0x6f0>
 8006b8e:	f000 fc0f 	bl	80073b0 <_strtoull_r>
 8006b92:	e001      	b.n	8006b98 <__ssvfiscanf_r+0x6f4>
 8006b94:	f000 fb5c 	bl	8007250 <_strtoll_r>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	3704      	adds	r7, #4
 8006b9c:	e9c3 0100 	strd	r0, r1, [r3]
 8006ba0:	e009      	b.n	8006bb6 <__ssvfiscanf_r+0x712>
 8006ba2:	bf00      	nop
 8006ba4:	2000044c 	.word	0x2000044c
 8006ba8:	0800790c 	.word	0x0800790c
 8006bac:	0800626d 	.word	0x0800626d
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	6010      	str	r0, [r2, #0]
 8006bb4:	461f      	mov	r7, r3
 8006bb6:	9b03      	ldr	r3, [sp, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	9303      	str	r3, [sp, #12]
 8006bbc:	ab0c      	add	r3, sp, #48	; 0x30
 8006bbe:	ebc3 0a0a 	rsb	sl, r3, sl
 8006bc2:	9b06      	ldr	r3, [sp, #24]
 8006bc4:	449a      	add	sl, r3
 8006bc6:	44d0      	add	r8, sl
 8006bc8:	e483      	b.n	80064d2 <__ssvfiscanf_r+0x2e>
 8006bca:	9b03      	ldr	r3, [sp, #12]
 8006bcc:	b153      	cbz	r3, 8006be4 <__ssvfiscanf_r+0x740>
 8006bce:	89ab      	ldrh	r3, [r5, #12]
 8006bd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	bf18      	it	ne
 8006bd8:	f04f 33ff 	movne.w	r3, #4294967295
 8006bdc:	4618      	mov	r0, r3
 8006bde:	e006      	b.n	8006bee <__ssvfiscanf_r+0x74a>
 8006be0:	9803      	ldr	r0, [sp, #12]
 8006be2:	e004      	b.n	8006bee <__ssvfiscanf_r+0x74a>
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	e001      	b.n	8006bee <__ssvfiscanf_r+0x74a>
 8006bea:	4604      	mov	r4, r0
 8006bec:	e5e3      	b.n	80067b6 <__ssvfiscanf_r+0x312>
 8006bee:	b057      	add	sp, #348	; 0x15c
 8006bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bf4 <__submore>:
 8006bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c00:	4299      	cmp	r1, r3
 8006c02:	d11c      	bne.n	8006c3e <__submore+0x4a>
 8006c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c08:	f7fc fc4a 	bl	80034a0 <_malloc_r>
 8006c0c:	b918      	cbnz	r0, 8006c16 <__submore+0x22>
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8006c1c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006c20:	6360      	str	r0, [r4, #52]	; 0x34
 8006c22:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006c26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006c2a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006c2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006c32:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006c36:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006c3a:	6020      	str	r0, [r4, #0]
 8006c3c:	e012      	b.n	8006c64 <__submore+0x70>
 8006c3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006c40:	0077      	lsls	r7, r6, #1
 8006c42:	463a      	mov	r2, r7
 8006c44:	f000 f8a4 	bl	8006d90 <_realloc_r>
 8006c48:	4605      	mov	r5, r0
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d0df      	beq.n	8006c0e <__submore+0x1a>
 8006c4e:	eb00 0806 	add.w	r8, r0, r6
 8006c52:	4601      	mov	r1, r0
 8006c54:	4632      	mov	r2, r6
 8006c56:	4640      	mov	r0, r8
 8006c58:	f7fc fe42 	bl	80038e0 <memcpy>
 8006c5c:	f8c4 8000 	str.w	r8, [r4]
 8006c60:	6365      	str	r5, [r4, #52]	; 0x34
 8006c62:	63a7      	str	r7, [r4, #56]	; 0x38
 8006c64:	2000      	movs	r0, #0
 8006c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c6a <_calloc_r>:
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	4351      	muls	r1, r2
 8006c6e:	f7fc fc17 	bl	80034a0 <_malloc_r>
 8006c72:	4604      	mov	r4, r0
 8006c74:	b320      	cbz	r0, 8006cc0 <_calloc_r+0x56>
 8006c76:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006c7a:	f022 0203 	bic.w	r2, r2, #3
 8006c7e:	3a04      	subs	r2, #4
 8006c80:	2a24      	cmp	r2, #36	; 0x24
 8006c82:	d81a      	bhi.n	8006cba <_calloc_r+0x50>
 8006c84:	2a13      	cmp	r2, #19
 8006c86:	d912      	bls.n	8006cae <_calloc_r+0x44>
 8006c88:	2100      	movs	r1, #0
 8006c8a:	2a1b      	cmp	r2, #27
 8006c8c:	6001      	str	r1, [r0, #0]
 8006c8e:	6041      	str	r1, [r0, #4]
 8006c90:	d802      	bhi.n	8006c98 <_calloc_r+0x2e>
 8006c92:	f100 0308 	add.w	r3, r0, #8
 8006c96:	e00b      	b.n	8006cb0 <_calloc_r+0x46>
 8006c98:	2a24      	cmp	r2, #36	; 0x24
 8006c9a:	6081      	str	r1, [r0, #8]
 8006c9c:	60c1      	str	r1, [r0, #12]
 8006c9e:	bf11      	iteee	ne
 8006ca0:	f100 0310 	addne.w	r3, r0, #16
 8006ca4:	6101      	streq	r1, [r0, #16]
 8006ca6:	f100 0318 	addeq.w	r3, r0, #24
 8006caa:	6141      	streq	r1, [r0, #20]
 8006cac:	e000      	b.n	8006cb0 <_calloc_r+0x46>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	605a      	str	r2, [r3, #4]
 8006cb6:	609a      	str	r2, [r3, #8]
 8006cb8:	e002      	b.n	8006cc0 <_calloc_r+0x56>
 8006cba:	2100      	movs	r1, #0
 8006cbc:	f7fc fe1b 	bl	80038f6 <memset>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	bd10      	pop	{r4, pc}

08006cc4 <__env_lock>:
 8006cc4:	4770      	bx	lr

08006cc6 <__env_unlock>:
 8006cc6:	4770      	bx	lr

08006cc8 <iswspace>:
 8006cc8:	28ff      	cmp	r0, #255	; 0xff
 8006cca:	bf9f      	itttt	ls
 8006ccc:	4b04      	ldrls	r3, [pc, #16]	; (8006ce0 <iswspace+0x18>)
 8006cce:	681b      	ldrls	r3, [r3, #0]
 8006cd0:	18c0      	addls	r0, r0, r3
 8006cd2:	7840      	ldrbls	r0, [r0, #1]
 8006cd4:	bf9a      	itte	ls
 8006cd6:	f000 0008 	andls.w	r0, r0, #8
 8006cda:	b2c0      	uxtbls	r0, r0
 8006cdc:	2000      	movhi	r0, #0
 8006cde:	4770      	bx	lr
 8006ce0:	2000044c 	.word	0x2000044c

08006ce4 <_mbrtowc_r>:
 8006ce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	4616      	mov	r6, r2
 8006cea:	4a10      	ldr	r2, [pc, #64]	; (8006d2c <_mbrtowc_r+0x48>)
 8006cec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006cee:	6817      	ldr	r7, [r2, #0]
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	4688      	mov	r8, r1
 8006cf4:	4699      	mov	r9, r3
 8006cf6:	b93e      	cbnz	r6, 8006d08 <_mbrtowc_r+0x24>
 8006cf8:	f7fe fe70 	bl	80059dc <__locale_charset>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e88d 0021 	stmia.w	sp, {r0, r5}
 8006d02:	4a0b      	ldr	r2, [pc, #44]	; (8006d30 <_mbrtowc_r+0x4c>)
 8006d04:	4631      	mov	r1, r6
 8006d06:	e006      	b.n	8006d16 <_mbrtowc_r+0x32>
 8006d08:	f7fe fe68 	bl	80059dc <__locale_charset>
 8006d0c:	e88d 0021 	stmia.w	sp, {r0, r5}
 8006d10:	464b      	mov	r3, r9
 8006d12:	4632      	mov	r2, r6
 8006d14:	4641      	mov	r1, r8
 8006d16:	4620      	mov	r0, r4
 8006d18:	47b8      	blx	r7
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	bf01      	itttt	eq
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	602b      	streq	r3, [r5, #0]
 8006d22:	238a      	moveq	r3, #138	; 0x8a
 8006d24:	6023      	streq	r3, [r4, #0]
 8006d26:	b003      	add	sp, #12
 8006d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d2c:	200005e4 	.word	0x200005e4
 8006d30:	0800780e 	.word	0x0800780e

08006d34 <__ascii_mbtowc>:
 8006d34:	b082      	sub	sp, #8
 8006d36:	b901      	cbnz	r1, 8006d3a <__ascii_mbtowc+0x6>
 8006d38:	a901      	add	r1, sp, #4
 8006d3a:	b13a      	cbz	r2, 8006d4c <__ascii_mbtowc+0x18>
 8006d3c:	b143      	cbz	r3, 8006d50 <__ascii_mbtowc+0x1c>
 8006d3e:	7813      	ldrb	r3, [r2, #0]
 8006d40:	600b      	str	r3, [r1, #0]
 8006d42:	7812      	ldrb	r2, [r2, #0]
 8006d44:	1c10      	adds	r0, r2, #0
 8006d46:	bf18      	it	ne
 8006d48:	2001      	movne	r0, #1
 8006d4a:	e003      	b.n	8006d54 <__ascii_mbtowc+0x20>
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	e001      	b.n	8006d54 <__ascii_mbtowc+0x20>
 8006d50:	f06f 0001 	mvn.w	r0, #1
 8006d54:	b002      	add	sp, #8
 8006d56:	4770      	bx	lr

08006d58 <memmove>:
 8006d58:	4288      	cmp	r0, r1
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	eb01 0302 	add.w	r3, r1, r2
 8006d60:	d801      	bhi.n	8006d66 <memmove+0xe>
 8006d62:	1e42      	subs	r2, r0, #1
 8006d64:	e00b      	b.n	8006d7e <memmove+0x26>
 8006d66:	4298      	cmp	r0, r3
 8006d68:	d2fb      	bcs.n	8006d62 <memmove+0xa>
 8006d6a:	1881      	adds	r1, r0, r2
 8006d6c:	1ad2      	subs	r2, r2, r3
 8006d6e:	42d3      	cmn	r3, r2
 8006d70:	d004      	beq.n	8006d7c <memmove+0x24>
 8006d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d76:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d7a:	e7f8      	b.n	8006d6e <memmove+0x16>
 8006d7c:	bd10      	pop	{r4, pc}
 8006d7e:	4299      	cmp	r1, r3
 8006d80:	d004      	beq.n	8006d8c <memmove+0x34>
 8006d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d8a:	e7f8      	b.n	8006d7e <memmove+0x26>
 8006d8c:	bd10      	pop	{r4, pc}
	...

08006d90 <_realloc_r>:
 8006d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	4681      	mov	r9, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	b929      	cbnz	r1, 8006da6 <_realloc_r+0x16>
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	b003      	add	sp, #12
 8006d9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da2:	f7fc bb7d 	b.w	80034a0 <_malloc_r>
 8006da6:	9201      	str	r2, [sp, #4]
 8006da8:	f7fc fffc 	bl	8003da4 <__malloc_lock>
 8006dac:	9a01      	ldr	r2, [sp, #4]
 8006dae:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8006db2:	f102 080b 	add.w	r8, r2, #11
 8006db6:	f1b8 0f16 	cmp.w	r8, #22
 8006dba:	f1a4 0b08 	sub.w	fp, r4, #8
 8006dbe:	f02e 0503 	bic.w	r5, lr, #3
 8006dc2:	d903      	bls.n	8006dcc <_realloc_r+0x3c>
 8006dc4:	f038 0807 	bics.w	r8, r8, #7
 8006dc8:	d502      	bpl.n	8006dd0 <_realloc_r+0x40>
 8006dca:	e003      	b.n	8006dd4 <_realloc_r+0x44>
 8006dcc:	f04f 0810 	mov.w	r8, #16
 8006dd0:	4590      	cmp	r8, r2
 8006dd2:	d204      	bcs.n	8006dde <_realloc_r+0x4e>
 8006dd4:	230c      	movs	r3, #12
 8006dd6:	f8c9 3000 	str.w	r3, [r9]
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e17d      	b.n	80070da <_realloc_r+0x34a>
 8006dde:	45a8      	cmp	r8, r5
 8006de0:	f340 8150 	ble.w	8007084 <_realloc_r+0x2f4>
 8006de4:	4ba6      	ldr	r3, [pc, #664]	; (8007080 <_realloc_r+0x2f0>)
 8006de6:	6898      	ldr	r0, [r3, #8]
 8006de8:	eb0b 0105 	add.w	r1, fp, r5
 8006dec:	4281      	cmp	r1, r0
 8006dee:	684f      	ldr	r7, [r1, #4]
 8006df0:	d005      	beq.n	8006dfe <_realloc_r+0x6e>
 8006df2:	f027 0601 	bic.w	r6, r7, #1
 8006df6:	440e      	add	r6, r1
 8006df8:	6876      	ldr	r6, [r6, #4]
 8006dfa:	07f6      	lsls	r6, r6, #31
 8006dfc:	d426      	bmi.n	8006e4c <_realloc_r+0xbc>
 8006dfe:	f027 0a03 	bic.w	sl, r7, #3
 8006e02:	4281      	cmp	r1, r0
 8006e04:	eb05 070a 	add.w	r7, r5, sl
 8006e08:	d118      	bne.n	8006e3c <_realloc_r+0xac>
 8006e0a:	f108 0610 	add.w	r6, r8, #16
 8006e0e:	42b7      	cmp	r7, r6
 8006e10:	db1f      	blt.n	8006e52 <_realloc_r+0xc2>
 8006e12:	eb0b 0008 	add.w	r0, fp, r8
 8006e16:	ebc8 0707 	rsb	r7, r8, r7
 8006e1a:	f047 0701 	orr.w	r7, r7, #1
 8006e1e:	6098      	str	r0, [r3, #8]
 8006e20:	6047      	str	r7, [r0, #4]
 8006e22:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	ea43 0308 	orr.w	r3, r3, r8
 8006e2e:	4648      	mov	r0, r9
 8006e30:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e34:	f7fc ffb7 	bl	8003da6 <__malloc_unlock>
 8006e38:	4620      	mov	r0, r4
 8006e3a:	e14e      	b.n	80070da <_realloc_r+0x34a>
 8006e3c:	45b8      	cmp	r8, r7
 8006e3e:	dc08      	bgt.n	8006e52 <_realloc_r+0xc2>
 8006e40:	68cb      	ldr	r3, [r1, #12]
 8006e42:	688a      	ldr	r2, [r1, #8]
 8006e44:	463d      	mov	r5, r7
 8006e46:	60d3      	str	r3, [r2, #12]
 8006e48:	609a      	str	r2, [r3, #8]
 8006e4a:	e11b      	b.n	8007084 <_realloc_r+0x2f4>
 8006e4c:	f04f 0a00 	mov.w	sl, #0
 8006e50:	4651      	mov	r1, sl
 8006e52:	f01e 0f01 	tst.w	lr, #1
 8006e56:	f040 80c3 	bne.w	8006fe0 <_realloc_r+0x250>
 8006e5a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006e5e:	ebc7 070b 	rsb	r7, r7, fp
 8006e62:	687e      	ldr	r6, [r7, #4]
 8006e64:	f026 0603 	bic.w	r6, r6, #3
 8006e68:	442e      	add	r6, r5
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	f000 8083 	beq.w	8006f76 <_realloc_r+0x1e6>
 8006e70:	4281      	cmp	r1, r0
 8006e72:	44b2      	add	sl, r6
 8006e74:	d147      	bne.n	8006f06 <_realloc_r+0x176>
 8006e76:	f108 0110 	add.w	r1, r8, #16
 8006e7a:	458a      	cmp	sl, r1
 8006e7c:	db7b      	blt.n	8006f76 <_realloc_r+0x1e6>
 8006e7e:	463e      	mov	r6, r7
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8006e86:	60ca      	str	r2, [r1, #12]
 8006e88:	6091      	str	r1, [r2, #8]
 8006e8a:	1f2a      	subs	r2, r5, #4
 8006e8c:	2a24      	cmp	r2, #36	; 0x24
 8006e8e:	d825      	bhi.n	8006edc <_realloc_r+0x14c>
 8006e90:	2a13      	cmp	r2, #19
 8006e92:	d91b      	bls.n	8006ecc <_realloc_r+0x13c>
 8006e94:	6821      	ldr	r1, [r4, #0]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	6861      	ldr	r1, [r4, #4]
 8006e9a:	60f9      	str	r1, [r7, #12]
 8006e9c:	2a1b      	cmp	r2, #27
 8006e9e:	d803      	bhi.n	8006ea8 <_realloc_r+0x118>
 8006ea0:	f107 0210 	add.w	r2, r7, #16
 8006ea4:	3408      	adds	r4, #8
 8006ea6:	e012      	b.n	8006ece <_realloc_r+0x13e>
 8006ea8:	68a1      	ldr	r1, [r4, #8]
 8006eaa:	6139      	str	r1, [r7, #16]
 8006eac:	68e1      	ldr	r1, [r4, #12]
 8006eae:	6179      	str	r1, [r7, #20]
 8006eb0:	2a24      	cmp	r2, #36	; 0x24
 8006eb2:	bf01      	itttt	eq
 8006eb4:	6922      	ldreq	r2, [r4, #16]
 8006eb6:	61ba      	streq	r2, [r7, #24]
 8006eb8:	6961      	ldreq	r1, [r4, #20]
 8006eba:	61f9      	streq	r1, [r7, #28]
 8006ebc:	bf19      	ittee	ne
 8006ebe:	f107 0218 	addne.w	r2, r7, #24
 8006ec2:	3410      	addne	r4, #16
 8006ec4:	f107 0220 	addeq.w	r2, r7, #32
 8006ec8:	3418      	addeq	r4, #24
 8006eca:	e000      	b.n	8006ece <_realloc_r+0x13e>
 8006ecc:	4632      	mov	r2, r6
 8006ece:	6821      	ldr	r1, [r4, #0]
 8006ed0:	6011      	str	r1, [r2, #0]
 8006ed2:	6861      	ldr	r1, [r4, #4]
 8006ed4:	6051      	str	r1, [r2, #4]
 8006ed6:	68a1      	ldr	r1, [r4, #8]
 8006ed8:	6091      	str	r1, [r2, #8]
 8006eda:	e005      	b.n	8006ee8 <_realloc_r+0x158>
 8006edc:	4621      	mov	r1, r4
 8006ede:	4630      	mov	r0, r6
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	f7ff ff39 	bl	8006d58 <memmove>
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	eb07 0208 	add.w	r2, r7, r8
 8006eec:	ebc8 0a0a 	rsb	sl, r8, sl
 8006ef0:	609a      	str	r2, [r3, #8]
 8006ef2:	f04a 0301 	orr.w	r3, sl, #1
 8006ef6:	6053      	str	r3, [r2, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	ea43 0308 	orr.w	r3, r3, r8
 8006f02:	607b      	str	r3, [r7, #4]
 8006f04:	e0b6      	b.n	8007074 <_realloc_r+0x2e4>
 8006f06:	45d0      	cmp	r8, sl
 8006f08:	dc35      	bgt.n	8006f76 <_realloc_r+0x1e6>
 8006f0a:	68cb      	ldr	r3, [r1, #12]
 8006f0c:	688a      	ldr	r2, [r1, #8]
 8006f0e:	4638      	mov	r0, r7
 8006f10:	60d3      	str	r3, [r2, #12]
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	60d3      	str	r3, [r2, #12]
 8006f1c:	609a      	str	r2, [r3, #8]
 8006f1e:	1f2a      	subs	r2, r5, #4
 8006f20:	2a24      	cmp	r2, #36	; 0x24
 8006f22:	d823      	bhi.n	8006f6c <_realloc_r+0x1dc>
 8006f24:	2a13      	cmp	r2, #19
 8006f26:	d91a      	bls.n	8006f5e <_realloc_r+0x1ce>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	60bb      	str	r3, [r7, #8]
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	2a1b      	cmp	r2, #27
 8006f32:	d803      	bhi.n	8006f3c <_realloc_r+0x1ac>
 8006f34:	f107 0010 	add.w	r0, r7, #16
 8006f38:	3408      	adds	r4, #8
 8006f3a:	e010      	b.n	8006f5e <_realloc_r+0x1ce>
 8006f3c:	68a3      	ldr	r3, [r4, #8]
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	68e3      	ldr	r3, [r4, #12]
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	2a24      	cmp	r2, #36	; 0x24
 8006f46:	bf01      	itttt	eq
 8006f48:	6923      	ldreq	r3, [r4, #16]
 8006f4a:	61bb      	streq	r3, [r7, #24]
 8006f4c:	6963      	ldreq	r3, [r4, #20]
 8006f4e:	61fb      	streq	r3, [r7, #28]
 8006f50:	bf19      	ittee	ne
 8006f52:	f107 0018 	addne.w	r0, r7, #24
 8006f56:	3410      	addne	r4, #16
 8006f58:	f107 0020 	addeq.w	r0, r7, #32
 8006f5c:	3418      	addeq	r4, #24
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	6003      	str	r3, [r0, #0]
 8006f62:	6863      	ldr	r3, [r4, #4]
 8006f64:	6043      	str	r3, [r0, #4]
 8006f66:	68a3      	ldr	r3, [r4, #8]
 8006f68:	6083      	str	r3, [r0, #8]
 8006f6a:	e002      	b.n	8006f72 <_realloc_r+0x1e2>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	f7ff fef3 	bl	8006d58 <memmove>
 8006f72:	4655      	mov	r5, sl
 8006f74:	e02e      	b.n	8006fd4 <_realloc_r+0x244>
 8006f76:	45b0      	cmp	r8, r6
 8006f78:	dc32      	bgt.n	8006fe0 <_realloc_r+0x250>
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006f82:	60d3      	str	r3, [r2, #12]
 8006f84:	609a      	str	r2, [r3, #8]
 8006f86:	1f2a      	subs	r2, r5, #4
 8006f88:	2a24      	cmp	r2, #36	; 0x24
 8006f8a:	d825      	bhi.n	8006fd8 <_realloc_r+0x248>
 8006f8c:	2a13      	cmp	r2, #19
 8006f8e:	d91a      	bls.n	8006fc6 <_realloc_r+0x236>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	60bb      	str	r3, [r7, #8]
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	2a1b      	cmp	r2, #27
 8006f9a:	d803      	bhi.n	8006fa4 <_realloc_r+0x214>
 8006f9c:	f107 0010 	add.w	r0, r7, #16
 8006fa0:	3408      	adds	r4, #8
 8006fa2:	e010      	b.n	8006fc6 <_realloc_r+0x236>
 8006fa4:	68a3      	ldr	r3, [r4, #8]
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	68e3      	ldr	r3, [r4, #12]
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	2a24      	cmp	r2, #36	; 0x24
 8006fae:	bf01      	itttt	eq
 8006fb0:	6923      	ldreq	r3, [r4, #16]
 8006fb2:	61bb      	streq	r3, [r7, #24]
 8006fb4:	6963      	ldreq	r3, [r4, #20]
 8006fb6:	61fb      	streq	r3, [r7, #28]
 8006fb8:	bf19      	ittee	ne
 8006fba:	f107 0018 	addne.w	r0, r7, #24
 8006fbe:	3410      	addne	r4, #16
 8006fc0:	f107 0020 	addeq.w	r0, r7, #32
 8006fc4:	3418      	addeq	r4, #24
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	6003      	str	r3, [r0, #0]
 8006fca:	6863      	ldr	r3, [r4, #4]
 8006fcc:	6043      	str	r3, [r0, #4]
 8006fce:	68a3      	ldr	r3, [r4, #8]
 8006fd0:	6083      	str	r3, [r0, #8]
 8006fd2:	4635      	mov	r5, r6
 8006fd4:	46bb      	mov	fp, r7
 8006fd6:	e055      	b.n	8007084 <_realloc_r+0x2f4>
 8006fd8:	4621      	mov	r1, r4
 8006fda:	f7ff febd 	bl	8006d58 <memmove>
 8006fde:	e7f8      	b.n	8006fd2 <_realloc_r+0x242>
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	4648      	mov	r0, r9
 8006fe4:	f7fc fa5c 	bl	80034a0 <_malloc_r>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d042      	beq.n	8007074 <_realloc_r+0x2e4>
 8006fee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	f1a0 0208 	sub.w	r2, r0, #8
 8006ffa:	445b      	add	r3, fp
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d105      	bne.n	800700c <_realloc_r+0x27c>
 8007000:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007004:	f023 0303 	bic.w	r3, r3, #3
 8007008:	441d      	add	r5, r3
 800700a:	e03b      	b.n	8007084 <_realloc_r+0x2f4>
 800700c:	1f2a      	subs	r2, r5, #4
 800700e:	2a24      	cmp	r2, #36	; 0x24
 8007010:	d829      	bhi.n	8007066 <_realloc_r+0x2d6>
 8007012:	2a13      	cmp	r2, #19
 8007014:	d91e      	bls.n	8007054 <_realloc_r+0x2c4>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	6003      	str	r3, [r0, #0]
 800701a:	6863      	ldr	r3, [r4, #4]
 800701c:	6043      	str	r3, [r0, #4]
 800701e:	2a1b      	cmp	r2, #27
 8007020:	d804      	bhi.n	800702c <_realloc_r+0x29c>
 8007022:	f100 0308 	add.w	r3, r0, #8
 8007026:	f104 0208 	add.w	r2, r4, #8
 800702a:	e015      	b.n	8007058 <_realloc_r+0x2c8>
 800702c:	68a3      	ldr	r3, [r4, #8]
 800702e:	6083      	str	r3, [r0, #8]
 8007030:	68e3      	ldr	r3, [r4, #12]
 8007032:	60c3      	str	r3, [r0, #12]
 8007034:	2a24      	cmp	r2, #36	; 0x24
 8007036:	bf01      	itttt	eq
 8007038:	6923      	ldreq	r3, [r4, #16]
 800703a:	6103      	streq	r3, [r0, #16]
 800703c:	6961      	ldreq	r1, [r4, #20]
 800703e:	6141      	streq	r1, [r0, #20]
 8007040:	bf19      	ittee	ne
 8007042:	f100 0310 	addne.w	r3, r0, #16
 8007046:	f104 0210 	addne.w	r2, r4, #16
 800704a:	f100 0318 	addeq.w	r3, r0, #24
 800704e:	f104 0218 	addeq.w	r2, r4, #24
 8007052:	e001      	b.n	8007058 <_realloc_r+0x2c8>
 8007054:	4603      	mov	r3, r0
 8007056:	4622      	mov	r2, r4
 8007058:	6811      	ldr	r1, [r2, #0]
 800705a:	6019      	str	r1, [r3, #0]
 800705c:	6851      	ldr	r1, [r2, #4]
 800705e:	6059      	str	r1, [r3, #4]
 8007060:	6892      	ldr	r2, [r2, #8]
 8007062:	609a      	str	r2, [r3, #8]
 8007064:	e002      	b.n	800706c <_realloc_r+0x2dc>
 8007066:	4621      	mov	r1, r4
 8007068:	f7ff fe76 	bl	8006d58 <memmove>
 800706c:	4621      	mov	r1, r4
 800706e:	4648      	mov	r0, r9
 8007070:	f7fd ffe6 	bl	8005040 <_free_r>
 8007074:	4648      	mov	r0, r9
 8007076:	f7fc fe96 	bl	8003da6 <__malloc_unlock>
 800707a:	4630      	mov	r0, r6
 800707c:	e02d      	b.n	80070da <_realloc_r+0x34a>
 800707e:	bf00      	nop
 8007080:	20000034 	.word	0x20000034
 8007084:	ebc8 0205 	rsb	r2, r8, r5
 8007088:	2a0f      	cmp	r2, #15
 800708a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800708e:	d914      	bls.n	80070ba <_realloc_r+0x32a>
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	eb0b 0108 	add.w	r1, fp, r8
 8007098:	ea43 0308 	orr.w	r3, r3, r8
 800709c:	f8cb 3004 	str.w	r3, [fp, #4]
 80070a0:	f042 0301 	orr.w	r3, r2, #1
 80070a4:	440a      	add	r2, r1
 80070a6:	604b      	str	r3, [r1, #4]
 80070a8:	6853      	ldr	r3, [r2, #4]
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	6053      	str	r3, [r2, #4]
 80070b0:	3108      	adds	r1, #8
 80070b2:	4648      	mov	r0, r9
 80070b4:	f7fd ffc4 	bl	8005040 <_free_r>
 80070b8:	e00a      	b.n	80070d0 <_realloc_r+0x340>
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	432b      	orrs	r3, r5
 80070c0:	eb0b 0205 	add.w	r2, fp, r5
 80070c4:	f8cb 3004 	str.w	r3, [fp, #4]
 80070c8:	6853      	ldr	r3, [r2, #4]
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	6053      	str	r3, [r2, #4]
 80070d0:	4648      	mov	r0, r9
 80070d2:	f7fc fe68 	bl	8003da6 <__malloc_unlock>
 80070d6:	f10b 0008 	add.w	r0, fp, #8
 80070da:	b003      	add	sp, #12
 80070dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070e0 <__sccl>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	780b      	ldrb	r3, [r1, #0]
 80070e4:	2b5e      	cmp	r3, #94	; 0x5e
 80070e6:	bf13      	iteet	ne
 80070e8:	1c4a      	addne	r2, r1, #1
 80070ea:	1c8a      	addeq	r2, r1, #2
 80070ec:	784b      	ldrbeq	r3, [r1, #1]
 80070ee:	2100      	movne	r1, #0
 80070f0:	bf08      	it	eq
 80070f2:	2101      	moveq	r1, #1
 80070f4:	1e44      	subs	r4, r0, #1
 80070f6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80070fa:	f804 1f01 	strb.w	r1, [r4, #1]!
 80070fe:	42ac      	cmp	r4, r5
 8007100:	d1fb      	bne.n	80070fa <__sccl+0x1a>
 8007102:	b90b      	cbnz	r3, 8007108 <__sccl+0x28>
 8007104:	1e50      	subs	r0, r2, #1
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	f081 0401 	eor.w	r4, r1, #1
 800710c:	54c4      	strb	r4, [r0, r3]
 800710e:	4611      	mov	r1, r2
 8007110:	780d      	ldrb	r5, [r1, #0]
 8007112:	2d2d      	cmp	r5, #45	; 0x2d
 8007114:	f101 0201 	add.w	r2, r1, #1
 8007118:	d006      	beq.n	8007128 <__sccl+0x48>
 800711a:	2d5d      	cmp	r5, #93	; 0x5d
 800711c:	d00f      	beq.n	800713e <__sccl+0x5e>
 800711e:	b10d      	cbz	r5, 8007124 <__sccl+0x44>
 8007120:	462b      	mov	r3, r5
 8007122:	e7f3      	b.n	800710c <__sccl+0x2c>
 8007124:	4608      	mov	r0, r1
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	784e      	ldrb	r6, [r1, #1]
 800712a:	2e5d      	cmp	r6, #93	; 0x5d
 800712c:	d0f8      	beq.n	8007120 <__sccl+0x40>
 800712e:	42b3      	cmp	r3, r6
 8007130:	dcf6      	bgt.n	8007120 <__sccl+0x40>
 8007132:	3102      	adds	r1, #2
 8007134:	3301      	adds	r3, #1
 8007136:	429e      	cmp	r6, r3
 8007138:	54c4      	strb	r4, [r0, r3]
 800713a:	dcfb      	bgt.n	8007134 <__sccl+0x54>
 800713c:	e7e8      	b.n	8007110 <__sccl+0x30>
 800713e:	4610      	mov	r0, r2
 8007140:	bd70      	pop	{r4, r5, r6, pc}
	...

08007144 <_strtol_r>:
 8007144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	4680      	mov	r8, r0
 800714a:	4840      	ldr	r0, [pc, #256]	; (800724c <_strtol_r+0x108>)
 800714c:	f8d0 9000 	ldr.w	r9, [r0]
 8007150:	460f      	mov	r7, r1
 8007152:	463d      	mov	r5, r7
 8007154:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007158:	eb09 0004 	add.w	r0, r9, r4
 800715c:	7840      	ldrb	r0, [r0, #1]
 800715e:	f000 0008 	and.w	r0, r0, #8
 8007162:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8007166:	b108      	cbz	r0, 800716c <_strtol_r+0x28>
 8007168:	462f      	mov	r7, r5
 800716a:	e7f2      	b.n	8007152 <_strtol_r+0xe>
 800716c:	2c2d      	cmp	r4, #45	; 0x2d
 800716e:	d103      	bne.n	8007178 <_strtol_r+0x34>
 8007170:	1cbd      	adds	r5, r7, #2
 8007172:	787c      	ldrb	r4, [r7, #1]
 8007174:	2601      	movs	r6, #1
 8007176:	e003      	b.n	8007180 <_strtol_r+0x3c>
 8007178:	2c2b      	cmp	r4, #43	; 0x2b
 800717a:	bf04      	itt	eq
 800717c:	787c      	ldrbeq	r4, [r7, #1]
 800717e:	1cbd      	addeq	r5, r7, #2
 8007180:	b113      	cbz	r3, 8007188 <_strtol_r+0x44>
 8007182:	2b10      	cmp	r3, #16
 8007184:	d10a      	bne.n	800719c <_strtol_r+0x58>
 8007186:	e05b      	b.n	8007240 <_strtol_r+0xfc>
 8007188:	2c30      	cmp	r4, #48	; 0x30
 800718a:	d157      	bne.n	800723c <_strtol_r+0xf8>
 800718c:	7828      	ldrb	r0, [r5, #0]
 800718e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007192:	2858      	cmp	r0, #88	; 0x58
 8007194:	d14d      	bne.n	8007232 <_strtol_r+0xee>
 8007196:	786c      	ldrb	r4, [r5, #1]
 8007198:	2310      	movs	r3, #16
 800719a:	3502      	adds	r5, #2
 800719c:	2e00      	cmp	r6, #0
 800719e:	bf14      	ite	ne
 80071a0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80071a4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80071a8:	2700      	movs	r7, #0
 80071aa:	fbbc faf3 	udiv	sl, ip, r3
 80071ae:	4638      	mov	r0, r7
 80071b0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80071b4:	eb09 0e04 	add.w	lr, r9, r4
 80071b8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80071bc:	f01e 0f04 	tst.w	lr, #4
 80071c0:	d001      	beq.n	80071c6 <_strtol_r+0x82>
 80071c2:	3c30      	subs	r4, #48	; 0x30
 80071c4:	e00b      	b.n	80071de <_strtol_r+0x9a>
 80071c6:	f01e 0e03 	ands.w	lr, lr, #3
 80071ca:	d01b      	beq.n	8007204 <_strtol_r+0xc0>
 80071cc:	f1be 0f01 	cmp.w	lr, #1
 80071d0:	bf0c      	ite	eq
 80071d2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80071d6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80071da:	ebce 0404 	rsb	r4, lr, r4
 80071de:	42a3      	cmp	r3, r4
 80071e0:	dd10      	ble.n	8007204 <_strtol_r+0xc0>
 80071e2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80071e6:	d00a      	beq.n	80071fe <_strtol_r+0xba>
 80071e8:	4550      	cmp	r0, sl
 80071ea:	d806      	bhi.n	80071fa <_strtol_r+0xb6>
 80071ec:	d101      	bne.n	80071f2 <_strtol_r+0xae>
 80071ee:	4564      	cmp	r4, ip
 80071f0:	dc03      	bgt.n	80071fa <_strtol_r+0xb6>
 80071f2:	fb03 4000 	mla	r0, r3, r0, r4
 80071f6:	2701      	movs	r7, #1
 80071f8:	e001      	b.n	80071fe <_strtol_r+0xba>
 80071fa:	f04f 37ff 	mov.w	r7, #4294967295
 80071fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007202:	e7d7      	b.n	80071b4 <_strtol_r+0x70>
 8007204:	1c7b      	adds	r3, r7, #1
 8007206:	d10c      	bne.n	8007222 <_strtol_r+0xde>
 8007208:	2e00      	cmp	r6, #0
 800720a:	f04f 0322 	mov.w	r3, #34	; 0x22
 800720e:	bf14      	ite	ne
 8007210:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8007214:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007218:	f8c8 3000 	str.w	r3, [r8]
 800721c:	b92a      	cbnz	r2, 800722a <_strtol_r+0xe6>
 800721e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007222:	b106      	cbz	r6, 8007226 <_strtol_r+0xe2>
 8007224:	4240      	negs	r0, r0
 8007226:	b172      	cbz	r2, 8007246 <_strtol_r+0x102>
 8007228:	b107      	cbz	r7, 800722c <_strtol_r+0xe8>
 800722a:	1e69      	subs	r1, r5, #1
 800722c:	6011      	str	r1, [r2, #0]
 800722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007232:	2430      	movs	r4, #48	; 0x30
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1b1      	bne.n	800719c <_strtol_r+0x58>
 8007238:	2308      	movs	r3, #8
 800723a:	e7af      	b.n	800719c <_strtol_r+0x58>
 800723c:	230a      	movs	r3, #10
 800723e:	e7ad      	b.n	800719c <_strtol_r+0x58>
 8007240:	2c30      	cmp	r4, #48	; 0x30
 8007242:	d0a3      	beq.n	800718c <_strtol_r+0x48>
 8007244:	e7aa      	b.n	800719c <_strtol_r+0x58>
 8007246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724a:	bf00      	nop
 800724c:	2000044c 	.word	0x2000044c

08007250 <_strtoll_r>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	461f      	mov	r7, r3
 8007256:	4b55      	ldr	r3, [pc, #340]	; (80073ac <_strtoll_r+0x15c>)
 8007258:	b087      	sub	sp, #28
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	9303      	str	r3, [sp, #12]
 800725e:	9005      	str	r0, [sp, #20]
 8007260:	468a      	mov	sl, r1
 8007262:	4693      	mov	fp, r2
 8007264:	460b      	mov	r3, r1
 8007266:	461d      	mov	r5, r3
 8007268:	9a03      	ldr	r2, [sp, #12]
 800726a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800726e:	4422      	add	r2, r4
 8007270:	7852      	ldrb	r2, [r2, #1]
 8007272:	f002 0208 	and.w	r2, r2, #8
 8007276:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 800727a:	b10a      	cbz	r2, 8007280 <_strtoll_r+0x30>
 800727c:	462b      	mov	r3, r5
 800727e:	e7f2      	b.n	8007266 <_strtoll_r+0x16>
 8007280:	2c2d      	cmp	r4, #45	; 0x2d
 8007282:	d103      	bne.n	800728c <_strtoll_r+0x3c>
 8007284:	1c9d      	adds	r5, r3, #2
 8007286:	785c      	ldrb	r4, [r3, #1]
 8007288:	2601      	movs	r6, #1
 800728a:	e003      	b.n	8007294 <_strtoll_r+0x44>
 800728c:	2c2b      	cmp	r4, #43	; 0x2b
 800728e:	bf04      	itt	eq
 8007290:	785c      	ldrbeq	r4, [r3, #1]
 8007292:	1c9d      	addeq	r5, r3, #2
 8007294:	b117      	cbz	r7, 800729c <_strtoll_r+0x4c>
 8007296:	2f10      	cmp	r7, #16
 8007298:	d10a      	bne.n	80072b0 <_strtoll_r+0x60>
 800729a:	e07f      	b.n	800739c <_strtoll_r+0x14c>
 800729c:	2c30      	cmp	r4, #48	; 0x30
 800729e:	d17b      	bne.n	8007398 <_strtoll_r+0x148>
 80072a0:	782b      	ldrb	r3, [r5, #0]
 80072a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80072a6:	2b58      	cmp	r3, #88	; 0x58
 80072a8:	d171      	bne.n	800738e <_strtoll_r+0x13e>
 80072aa:	786c      	ldrb	r4, [r5, #1]
 80072ac:	2710      	movs	r7, #16
 80072ae:	3502      	adds	r5, #2
 80072b0:	b926      	cbnz	r6, 80072bc <_strtoll_r+0x6c>
 80072b2:	f04f 38ff 	mov.w	r8, #4294967295
 80072b6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80072ba:	e003      	b.n	80072c4 <_strtoll_r+0x74>
 80072bc:	f04f 0800 	mov.w	r8, #0
 80072c0:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80072c4:	463a      	mov	r2, r7
 80072c6:	17fb      	asrs	r3, r7, #31
 80072c8:	4640      	mov	r0, r8
 80072ca:	4649      	mov	r1, r9
 80072cc:	e9cd 2300 	strd	r2, r3, [sp]
 80072d0:	f7f9 fc76 	bl	8000bc0 <__aeabi_uldivmod>
 80072d4:	17fb      	asrs	r3, r7, #31
 80072d6:	9204      	str	r2, [sp, #16]
 80072d8:	4640      	mov	r0, r8
 80072da:	4649      	mov	r1, r9
 80072dc:	463a      	mov	r2, r7
 80072de:	f7f9 fc6f 	bl	8000bc0 <__aeabi_uldivmod>
 80072e2:	2300      	movs	r3, #0
 80072e4:	4680      	mov	r8, r0
 80072e6:	4689      	mov	r9, r1
 80072e8:	2000      	movs	r0, #0
 80072ea:	2100      	movs	r1, #0
 80072ec:	9a03      	ldr	r2, [sp, #12]
 80072ee:	4422      	add	r2, r4
 80072f0:	7852      	ldrb	r2, [r2, #1]
 80072f2:	f012 0f04 	tst.w	r2, #4
 80072f6:	d001      	beq.n	80072fc <_strtoll_r+0xac>
 80072f8:	3c30      	subs	r4, #48	; 0x30
 80072fa:	e007      	b.n	800730c <_strtoll_r+0xbc>
 80072fc:	f012 0203 	ands.w	r2, r2, #3
 8007300:	d025      	beq.n	800734e <_strtoll_r+0xfe>
 8007302:	2a01      	cmp	r2, #1
 8007304:	bf0c      	ite	eq
 8007306:	2237      	moveq	r2, #55	; 0x37
 8007308:	2257      	movne	r2, #87	; 0x57
 800730a:	1aa4      	subs	r4, r4, r2
 800730c:	42a7      	cmp	r7, r4
 800730e:	dd1e      	ble.n	800734e <_strtoll_r+0xfe>
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	d019      	beq.n	8007348 <_strtoll_r+0xf8>
 8007314:	4589      	cmp	r9, r1
 8007316:	bf08      	it	eq
 8007318:	4580      	cmpeq	r8, r0
 800731a:	d313      	bcc.n	8007344 <_strtoll_r+0xf4>
 800731c:	4549      	cmp	r1, r9
 800731e:	bf08      	it	eq
 8007320:	4540      	cmpeq	r0, r8
 8007322:	d102      	bne.n	800732a <_strtoll_r+0xda>
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	429c      	cmp	r4, r3
 8007328:	dc0c      	bgt.n	8007344 <_strtoll_r+0xf4>
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	9a00      	ldr	r2, [sp, #0]
 800732e:	4343      	muls	r3, r0
 8007330:	fb02 3301 	mla	r3, r2, r1, r3
 8007334:	fba0 0102 	umull	r0, r1, r0, r2
 8007338:	4419      	add	r1, r3
 800733a:	1900      	adds	r0, r0, r4
 800733c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8007340:	2301      	movs	r3, #1
 8007342:	e001      	b.n	8007348 <_strtoll_r+0xf8>
 8007344:	f04f 33ff 	mov.w	r3, #4294967295
 8007348:	f815 4b01 	ldrb.w	r4, [r5], #1
 800734c:	e7ce      	b.n	80072ec <_strtoll_r+0x9c>
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	d10f      	bne.n	8007372 <_strtoll_r+0x122>
 8007352:	b926      	cbnz	r6, 800735e <_strtoll_r+0x10e>
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800735c:	e002      	b.n	8007364 <_strtoll_r+0x114>
 800735e:	2000      	movs	r0, #0
 8007360:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007364:	9a05      	ldr	r2, [sp, #20]
 8007366:	2322      	movs	r3, #34	; 0x22
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	f1bb 0f00 	cmp.w	fp, #0
 800736e:	d108      	bne.n	8007382 <_strtoll_r+0x132>
 8007370:	e018      	b.n	80073a4 <_strtoll_r+0x154>
 8007372:	b116      	cbz	r6, 800737a <_strtoll_r+0x12a>
 8007374:	4240      	negs	r0, r0
 8007376:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800737a:	f1bb 0f00 	cmp.w	fp, #0
 800737e:	d011      	beq.n	80073a4 <_strtoll_r+0x154>
 8007380:	b10b      	cbz	r3, 8007386 <_strtoll_r+0x136>
 8007382:	3d01      	subs	r5, #1
 8007384:	e000      	b.n	8007388 <_strtoll_r+0x138>
 8007386:	4655      	mov	r5, sl
 8007388:	f8cb 5000 	str.w	r5, [fp]
 800738c:	e00a      	b.n	80073a4 <_strtoll_r+0x154>
 800738e:	2430      	movs	r4, #48	; 0x30
 8007390:	2f00      	cmp	r7, #0
 8007392:	d18d      	bne.n	80072b0 <_strtoll_r+0x60>
 8007394:	2708      	movs	r7, #8
 8007396:	e78b      	b.n	80072b0 <_strtoll_r+0x60>
 8007398:	270a      	movs	r7, #10
 800739a:	e789      	b.n	80072b0 <_strtoll_r+0x60>
 800739c:	2c30      	cmp	r4, #48	; 0x30
 800739e:	f43f af7f 	beq.w	80072a0 <_strtoll_r+0x50>
 80073a2:	e785      	b.n	80072b0 <_strtoll_r+0x60>
 80073a4:	b007      	add	sp, #28
 80073a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073aa:	bf00      	nop
 80073ac:	2000044c 	.word	0x2000044c

080073b0 <_strtoull_r>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	461e      	mov	r6, r3
 80073b6:	4b52      	ldr	r3, [pc, #328]	; (8007500 <_strtoull_r+0x150>)
 80073b8:	b085      	sub	sp, #20
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	9302      	str	r3, [sp, #8]
 80073be:	9003      	str	r0, [sp, #12]
 80073c0:	4688      	mov	r8, r1
 80073c2:	4691      	mov	r9, r2
 80073c4:	460b      	mov	r3, r1
 80073c6:	461d      	mov	r5, r3
 80073c8:	9a02      	ldr	r2, [sp, #8]
 80073ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073ce:	4422      	add	r2, r4
 80073d0:	7852      	ldrb	r2, [r2, #1]
 80073d2:	f002 0208 	and.w	r2, r2, #8
 80073d6:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 80073da:	b10a      	cbz	r2, 80073e0 <_strtoull_r+0x30>
 80073dc:	462b      	mov	r3, r5
 80073de:	e7f2      	b.n	80073c6 <_strtoull_r+0x16>
 80073e0:	2c2d      	cmp	r4, #45	; 0x2d
 80073e2:	d103      	bne.n	80073ec <_strtoull_r+0x3c>
 80073e4:	1c9d      	adds	r5, r3, #2
 80073e6:	785c      	ldrb	r4, [r3, #1]
 80073e8:	2701      	movs	r7, #1
 80073ea:	e003      	b.n	80073f4 <_strtoull_r+0x44>
 80073ec:	2c2b      	cmp	r4, #43	; 0x2b
 80073ee:	bf04      	itt	eq
 80073f0:	785c      	ldrbeq	r4, [r3, #1]
 80073f2:	1c9d      	addeq	r5, r3, #2
 80073f4:	b116      	cbz	r6, 80073fc <_strtoull_r+0x4c>
 80073f6:	2e10      	cmp	r6, #16
 80073f8:	d10a      	bne.n	8007410 <_strtoull_r+0x60>
 80073fa:	e07b      	b.n	80074f4 <_strtoull_r+0x144>
 80073fc:	2c30      	cmp	r4, #48	; 0x30
 80073fe:	d177      	bne.n	80074f0 <_strtoull_r+0x140>
 8007400:	782b      	ldrb	r3, [r5, #0]
 8007402:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007406:	2b58      	cmp	r3, #88	; 0x58
 8007408:	d16d      	bne.n	80074e6 <_strtoull_r+0x136>
 800740a:	786c      	ldrb	r4, [r5, #1]
 800740c:	2610      	movs	r6, #16
 800740e:	3502      	adds	r5, #2
 8007410:	ea4f 7be6 	mov.w	fp, r6, asr #31
 8007414:	4632      	mov	r2, r6
 8007416:	465b      	mov	r3, fp
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	f04f 31ff 	mov.w	r1, #4294967295
 8007420:	f7f9 fbce 	bl	8000bc0 <__aeabi_uldivmod>
 8007424:	4632      	mov	r2, r6
 8007426:	e9cd 0100 	strd	r0, r1, [sp]
 800742a:	465b      	mov	r3, fp
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	f04f 31ff 	mov.w	r1, #4294967295
 8007434:	f7f9 fbc4 	bl	8000bc0 <__aeabi_uldivmod>
 8007438:	46b2      	mov	sl, r6
 800743a:	4694      	mov	ip, r2
 800743c:	2300      	movs	r3, #0
 800743e:	2000      	movs	r0, #0
 8007440:	2100      	movs	r1, #0
 8007442:	9a02      	ldr	r2, [sp, #8]
 8007444:	eb02 0e04 	add.w	lr, r2, r4
 8007448:	f89e e001 	ldrb.w	lr, [lr, #1]
 800744c:	f01e 0f04 	tst.w	lr, #4
 8007450:	d001      	beq.n	8007456 <_strtoull_r+0xa6>
 8007452:	3c30      	subs	r4, #48	; 0x30
 8007454:	e00b      	b.n	800746e <_strtoull_r+0xbe>
 8007456:	f01e 0e03 	ands.w	lr, lr, #3
 800745a:	d029      	beq.n	80074b0 <_strtoull_r+0x100>
 800745c:	f1be 0f01 	cmp.w	lr, #1
 8007460:	bf0c      	ite	eq
 8007462:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8007466:	f04f 0e57 	movne.w	lr, #87	; 0x57
 800746a:	ebce 0404 	rsb	r4, lr, r4
 800746e:	42a6      	cmp	r6, r4
 8007470:	dd1e      	ble.n	80074b0 <_strtoull_r+0x100>
 8007472:	2b00      	cmp	r3, #0
 8007474:	db17      	blt.n	80074a6 <_strtoull_r+0xf6>
 8007476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800747a:	428b      	cmp	r3, r1
 800747c:	bf08      	it	eq
 800747e:	4282      	cmpeq	r2, r0
 8007480:	d311      	bcc.n	80074a6 <_strtoull_r+0xf6>
 8007482:	4299      	cmp	r1, r3
 8007484:	bf08      	it	eq
 8007486:	4290      	cmpeq	r0, r2
 8007488:	d101      	bne.n	800748e <_strtoull_r+0xde>
 800748a:	4564      	cmp	r4, ip
 800748c:	dc0b      	bgt.n	80074a6 <_strtoull_r+0xf6>
 800748e:	fb00 f30b 	mul.w	r3, r0, fp
 8007492:	fb0a 3301 	mla	r3, sl, r1, r3
 8007496:	fba0 010a 	umull	r0, r1, r0, sl
 800749a:	4419      	add	r1, r3
 800749c:	1900      	adds	r0, r0, r4
 800749e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80074a2:	2301      	movs	r3, #1
 80074a4:	e001      	b.n	80074aa <_strtoull_r+0xfa>
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ae:	e7c8      	b.n	8007442 <_strtoull_r+0x92>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	da0a      	bge.n	80074ca <_strtoull_r+0x11a>
 80074b4:	9a03      	ldr	r2, [sp, #12]
 80074b6:	2322      	movs	r3, #34	; 0x22
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295
 80074be:	f04f 31ff 	mov.w	r1, #4294967295
 80074c2:	f1b9 0f00 	cmp.w	r9, #0
 80074c6:	d108      	bne.n	80074da <_strtoull_r+0x12a>
 80074c8:	e017      	b.n	80074fa <_strtoull_r+0x14a>
 80074ca:	b117      	cbz	r7, 80074d2 <_strtoull_r+0x122>
 80074cc:	4240      	negs	r0, r0
 80074ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80074d2:	f1b9 0f00 	cmp.w	r9, #0
 80074d6:	d010      	beq.n	80074fa <_strtoull_r+0x14a>
 80074d8:	b10b      	cbz	r3, 80074de <_strtoull_r+0x12e>
 80074da:	3d01      	subs	r5, #1
 80074dc:	e000      	b.n	80074e0 <_strtoull_r+0x130>
 80074de:	4645      	mov	r5, r8
 80074e0:	f8c9 5000 	str.w	r5, [r9]
 80074e4:	e009      	b.n	80074fa <_strtoull_r+0x14a>
 80074e6:	2430      	movs	r4, #48	; 0x30
 80074e8:	2e00      	cmp	r6, #0
 80074ea:	d191      	bne.n	8007410 <_strtoull_r+0x60>
 80074ec:	2608      	movs	r6, #8
 80074ee:	e78f      	b.n	8007410 <_strtoull_r+0x60>
 80074f0:	260a      	movs	r6, #10
 80074f2:	e78d      	b.n	8007410 <_strtoull_r+0x60>
 80074f4:	2c30      	cmp	r4, #48	; 0x30
 80074f6:	d083      	beq.n	8007400 <_strtoull_r+0x50>
 80074f8:	e78a      	b.n	8007410 <_strtoull_r+0x60>
 80074fa:	b005      	add	sp, #20
 80074fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007500:	2000044c 	.word	0x2000044c

08007504 <_gettimeofday>:
 8007504:	4b02      	ldr	r3, [pc, #8]	; (8007510 <_gettimeofday+0xc>)
 8007506:	2258      	movs	r2, #88	; 0x58
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	f04f 30ff 	mov.w	r0, #4294967295
 800750e:	4770      	bx	lr
 8007510:	200022a8 	.word	0x200022a8

08007514 <_sbrk>:
 8007514:	4b04      	ldr	r3, [pc, #16]	; (8007528 <_sbrk+0x14>)
 8007516:	6819      	ldr	r1, [r3, #0]
 8007518:	4602      	mov	r2, r0
 800751a:	b909      	cbnz	r1, 8007520 <_sbrk+0xc>
 800751c:	4903      	ldr	r1, [pc, #12]	; (800752c <_sbrk+0x18>)
 800751e:	6019      	str	r1, [r3, #0]
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	4402      	add	r2, r0
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	4770      	bx	lr
 8007528:	2000069c 	.word	0x2000069c
 800752c:	200022ac 	.word	0x200022ac

08007530 <_init>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	bf00      	nop
 8007534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007536:	bc08      	pop	{r3}
 8007538:	469e      	mov	lr, r3
 800753a:	4770      	bx	lr

0800753c <_fini>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	bf00      	nop
 8007540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007542:	bc08      	pop	{r3}
 8007544:	469e      	mov	lr, r3
 8007546:	4770      	bx	lr
