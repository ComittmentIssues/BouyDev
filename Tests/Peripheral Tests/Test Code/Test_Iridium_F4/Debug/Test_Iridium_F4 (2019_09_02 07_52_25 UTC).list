
C:\Users\user\Documents\GitHub\BouyDev\Firmware\New folder\Test_Iridium_F4\Debug\Test_Iridium_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002618  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  0800289c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  7 .bss          00000c0c  20000084  20000084  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000c90  20000c90  00020084  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000083db  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001708  00000000  00000000  0002848f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a20  00000000  00000000  00029b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000958  00000000  00000000  0002a5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000039bd  00000000  00000000  0002af10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000033af  00000000  00000000  0002e8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00031c7c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002cdc  00000000  00000000  00031cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000349d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002788 	.word	0x08002788

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08002788 	.word	0x08002788

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	2300      	movs	r3, #0
 80001fa:	73bb      	strb	r3, [r7, #14]
 80001fc:	230f      	movs	r3, #15
 80001fe:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d038      	beq.n	800027a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000208:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <NVIC_Init+0xbc>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	43db      	mvns	r3, r3
 800020e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	f1c3 0304 	rsb	r3, r3, #4
 800021c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800021e:	7b7a      	ldrb	r2, [r7, #13]
 8000220:	7bfb      	ldrb	r3, [r7, #15]
 8000222:	fa42 f303 	asr.w	r3, r2, r3
 8000226:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	785b      	ldrb	r3, [r3, #1]
 800022c:	461a      	mov	r2, r3
 800022e:	7bbb      	ldrb	r3, [r7, #14]
 8000230:	fa02 f303 	lsl.w	r3, r2, r3
 8000234:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	789a      	ldrb	r2, [r3, #2]
 800023a:	7b7b      	ldrb	r3, [r7, #13]
 800023c:	4013      	ands	r3, r2
 800023e:	b2da      	uxtb	r2, r3
 8000240:	7bfb      	ldrb	r3, [r7, #15]
 8000242:	4313      	orrs	r3, r2
 8000244:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	011b      	lsls	r3, r3, #4
 800024a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <NVIC_Init+0xc0>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	4413      	add	r3, r2
 8000254:	7bfa      	ldrb	r2, [r7, #15]
 8000256:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025a:	4a14      	ldr	r2, [pc, #80]	; (80002ac <NVIC_Init+0xc0>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	095b      	lsrs	r3, r3, #5
 8000262:	b2db      	uxtb	r3, r3
 8000264:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	f003 031f 	and.w	r3, r3, #31
 800026e:	2101      	movs	r1, #1
 8000270:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000274:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000278:	e00f      	b.n	800029a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027a:	490c      	ldr	r1, [pc, #48]	; (80002ac <NVIC_Init+0xc0>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	095b      	lsrs	r3, r3, #5
 8000282:	b2db      	uxtb	r3, r3
 8000284:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	f003 031f 	and.w	r3, r3, #31
 800028e:	2201      	movs	r2, #1
 8000290:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000292:	f100 0320 	add.w	r3, r0, #32
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f023 0201 	bic.w	r2, r3, #1
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2221      	movs	r2, #33	; 0x21
 80002e6:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a46      	ldr	r2, [pc, #280]	; (8000404 <DMA_DeInit+0x154>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d103      	bne.n	80002f8 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80002f0:	4b45      	ldr	r3, [pc, #276]	; (8000408 <DMA_DeInit+0x158>)
 80002f2:	223d      	movs	r2, #61	; 0x3d
 80002f4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80002f6:	e07e      	b.n	80003f6 <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a44      	ldr	r2, [pc, #272]	; (800040c <DMA_DeInit+0x15c>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d104      	bne.n	800030a <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000300:	4b41      	ldr	r3, [pc, #260]	; (8000408 <DMA_DeInit+0x158>)
 8000302:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000306:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000308:	e075      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a40      	ldr	r2, [pc, #256]	; (8000410 <DMA_DeInit+0x160>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d104      	bne.n	800031c <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000312:	4b3d      	ldr	r3, [pc, #244]	; (8000408 <DMA_DeInit+0x158>)
 8000314:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000318:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800031a:	e06c      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a3d      	ldr	r2, [pc, #244]	; (8000414 <DMA_DeInit+0x164>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d104      	bne.n	800032e <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000324:	4b38      	ldr	r3, [pc, #224]	; (8000408 <DMA_DeInit+0x158>)
 8000326:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800032a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800032c:	e063      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a39      	ldr	r2, [pc, #228]	; (8000418 <DMA_DeInit+0x168>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d103      	bne.n	800033e <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000336:	4b34      	ldr	r3, [pc, #208]	; (8000408 <DMA_DeInit+0x158>)
 8000338:	4a38      	ldr	r2, [pc, #224]	; (800041c <DMA_DeInit+0x16c>)
 800033a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800033c:	e05b      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a37      	ldr	r2, [pc, #220]	; (8000420 <DMA_DeInit+0x170>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d103      	bne.n	800034e <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000346:	4b30      	ldr	r3, [pc, #192]	; (8000408 <DMA_DeInit+0x158>)
 8000348:	4a36      	ldr	r2, [pc, #216]	; (8000424 <DMA_DeInit+0x174>)
 800034a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800034c:	e053      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a35      	ldr	r2, [pc, #212]	; (8000428 <DMA_DeInit+0x178>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d103      	bne.n	800035e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000356:	4b2c      	ldr	r3, [pc, #176]	; (8000408 <DMA_DeInit+0x158>)
 8000358:	4a34      	ldr	r2, [pc, #208]	; (800042c <DMA_DeInit+0x17c>)
 800035a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800035c:	e04b      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a33      	ldr	r2, [pc, #204]	; (8000430 <DMA_DeInit+0x180>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d104      	bne.n	8000370 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000366:	4b28      	ldr	r3, [pc, #160]	; (8000408 <DMA_DeInit+0x158>)
 8000368:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800036c:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800036e:	e042      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a30      	ldr	r2, [pc, #192]	; (8000434 <DMA_DeInit+0x184>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d103      	bne.n	8000380 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000378:	4b2f      	ldr	r3, [pc, #188]	; (8000438 <DMA_DeInit+0x188>)
 800037a:	223d      	movs	r2, #61	; 0x3d
 800037c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800037e:	e03a      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a2e      	ldr	r2, [pc, #184]	; (800043c <DMA_DeInit+0x18c>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d104      	bne.n	8000392 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000388:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <DMA_DeInit+0x188>)
 800038a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800038e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000390:	e031      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <DMA_DeInit+0x190>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d104      	bne.n	80003a4 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800039a:	4b27      	ldr	r3, [pc, #156]	; (8000438 <DMA_DeInit+0x188>)
 800039c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80003a0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80003a2:	e028      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a27      	ldr	r2, [pc, #156]	; (8000444 <DMA_DeInit+0x194>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d104      	bne.n	80003b6 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80003ac:	4b22      	ldr	r3, [pc, #136]	; (8000438 <DMA_DeInit+0x188>)
 80003ae:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80003b2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80003b4:	e01f      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a23      	ldr	r2, [pc, #140]	; (8000448 <DMA_DeInit+0x198>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d103      	bne.n	80003c6 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80003be:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <DMA_DeInit+0x188>)
 80003c0:	4a16      	ldr	r2, [pc, #88]	; (800041c <DMA_DeInit+0x16c>)
 80003c2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80003c4:	e017      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a20      	ldr	r2, [pc, #128]	; (800044c <DMA_DeInit+0x19c>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d103      	bne.n	80003d6 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <DMA_DeInit+0x188>)
 80003d0:	4a14      	ldr	r2, [pc, #80]	; (8000424 <DMA_DeInit+0x174>)
 80003d2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80003d4:	e00f      	b.n	80003f6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <DMA_DeInit+0x1a0>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d103      	bne.n	80003e6 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80003de:	4b16      	ldr	r3, [pc, #88]	; (8000438 <DMA_DeInit+0x188>)
 80003e0:	4a12      	ldr	r2, [pc, #72]	; (800042c <DMA_DeInit+0x17c>)
 80003e2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80003e4:	e007      	b.n	80003f6 <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a1a      	ldr	r2, [pc, #104]	; (8000454 <DMA_DeInit+0x1a4>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d103      	bne.n	80003f6 <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <DMA_DeInit+0x188>)
 80003f0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80003f4:	60da      	str	r2, [r3, #12]
    }
  }
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40026010 	.word	0x40026010
 8000408:	40026000 	.word	0x40026000
 800040c:	40026028 	.word	0x40026028
 8000410:	40026040 	.word	0x40026040
 8000414:	40026058 	.word	0x40026058
 8000418:	40026070 	.word	0x40026070
 800041c:	2000003d 	.word	0x2000003d
 8000420:	40026088 	.word	0x40026088
 8000424:	20000f40 	.word	0x20000f40
 8000428:	400260a0 	.word	0x400260a0
 800042c:	203d0000 	.word	0x203d0000
 8000430:	400260b8 	.word	0x400260b8
 8000434:	40026410 	.word	0x40026410
 8000438:	40026400 	.word	0x40026400
 800043c:	40026428 	.word	0x40026428
 8000440:	40026440 	.word	0x40026440
 8000444:	40026458 	.word	0x40026458
 8000448:	40026470 	.word	0x40026470
 800044c:	40026488 	.word	0x40026488
 8000450:	400264a0 	.word	0x400264a0
 8000454:	400264b8 	.word	0x400264b8

08000458 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800046c:	68fa      	ldr	r2, [r7, #12]
 800046e:	4b25      	ldr	r3, [pc, #148]	; (8000504 <DMA_Init+0xac>)
 8000470:	4013      	ands	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000482:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800048e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800049a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004a6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ac:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 0307 	bic.w	r3, r3, #7
 80004c6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4313      	orrs	r3, r2
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	691a      	ldr	r2, [r3, #16]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	685a      	ldr	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	60da      	str	r2, [r3, #12]
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	f01c803f 	.word	0xf01c803f

08000508 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d006      	beq.n	8000528 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f043 0201 	orr.w	r2, r3, #1
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000526:	e005      	b.n	8000534 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 0201 	bic.w	r2, r3, #1
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	601a      	str	r2, [r3, #0]
  }
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	b29b      	uxth	r3, r3
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b00      	cmp	r3, #0
 8000572:	d002      	beq.n	800057a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000574:	2301      	movs	r3, #1
 8000576:	73fb      	strb	r3, [r7, #15]
 8000578:	e001      	b.n	800057e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000596:	2300      	movs	r3, #0
 8000598:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <DMA_GetFlagStatus+0x6c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d802      	bhi.n	80005ac <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <DMA_GetFlagStatus+0x70>)
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	e001      	b.n	80005b0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <DMA_GetFlagStatus+0x74>)
 80005ae:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e002      	b.n	80005c8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80005ce:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80005d2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	4013      	ands	r3, r2
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80005de:	2301      	movs	r3, #1
 80005e0:	75fb      	strb	r3, [r7, #23]
 80005e2:	e001      	b.n	80005e8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80005e4:	2300      	movs	r3, #0
 80005e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	4002640f 	.word	0x4002640f
 80005fc:	40026000 	.word	0x40026000
 8000600:	40026400 	.word	0x40026400

08000604 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00f      	beq.n	800063c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	615a      	str	r2, [r3, #20]
 800062e:	e005      	b.n	800063c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	2b80      	cmp	r3, #128	; 0x80
 8000640:	d014      	beq.n	800066c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d008      	beq.n	800065a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	f003 031e 	and.w	r3, r3, #30
 8000652:	431a      	orrs	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000658:	e008      	b.n	800066c <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	f003 031e 	and.w	r3, r3, #30
 8000664:	43db      	mvns	r3, r3
 8000666:	401a      	ands	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <DMA_ClearITPendingBit+0x50>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d802      	bhi.n	8000690 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <DMA_ClearITPendingBit+0x54>)
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e001      	b.n	8000694 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <DMA_ClearITPendingBit+0x58>)
 8000692:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d007      	beq.n	80006ae <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006a4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80006ac:	e006      	b.n	80006bc <DMA_ClearITPendingBit+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006b4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	6093      	str	r3, [r2, #8]
  }   
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	4002640f 	.word	0x4002640f
 80006cc:	40026000 	.word	0x40026000
 80006d0:	40026400 	.word	0x40026400

080006d4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80006e0:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <EXTI_Init+0xe0>)
 80006e2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	799b      	ldrb	r3, [r3, #6]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d04f      	beq.n	800078c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80006ec:	4931      	ldr	r1, [pc, #196]	; (80007b4 <EXTI_Init+0xe0>)
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <EXTI_Init+0xe0>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4013      	ands	r3, r2
 80006fa:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80006fc:	492d      	ldr	r1, [pc, #180]	; (80007b4 <EXTI_Init+0xe0>)
 80006fe:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <EXTI_Init+0xe0>)
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	43db      	mvns	r3, r3
 8000708:	4013      	ands	r3, r2
 800070a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	461a      	mov	r2, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4413      	add	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	6812      	ldr	r2, [r2, #0]
 8000722:	430a      	orrs	r2, r1
 8000724:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000726:	4923      	ldr	r1, [pc, #140]	; (80007b4 <EXTI_Init+0xe0>)
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <EXTI_Init+0xe0>)
 800072a:	689a      	ldr	r2, [r3, #8]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	43db      	mvns	r3, r3
 8000732:	4013      	ands	r3, r2
 8000734:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000736:	491f      	ldr	r1, [pc, #124]	; (80007b4 <EXTI_Init+0xe0>)
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <EXTI_Init+0xe0>)
 800073a:	68da      	ldr	r2, [r3, #12]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	43db      	mvns	r3, r3
 8000742:	4013      	ands	r3, r2
 8000744:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	2b10      	cmp	r3, #16
 800074c:	d10e      	bne.n	800076c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800074e:	4919      	ldr	r1, [pc, #100]	; (80007b4 <EXTI_Init+0xe0>)
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <EXTI_Init+0xe0>)
 8000752:	689a      	ldr	r2, [r3, #8]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4313      	orrs	r3, r2
 800075a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800075c:	4915      	ldr	r1, [pc, #84]	; (80007b4 <EXTI_Init+0xe0>)
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <EXTI_Init+0xe0>)
 8000760:	68da      	ldr	r2, [r3, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800076a:	e01d      	b.n	80007a8 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <EXTI_Init+0xe0>)
 800076e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	795b      	ldrb	r3, [r3, #5]
 8000774:	461a      	mov	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4413      	add	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	6811      	ldr	r1, [r2, #0]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	430a      	orrs	r2, r1
 8000788:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800078a:	e00d      	b.n	80007a8 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	461a      	mov	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4413      	add	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	6811      	ldr	r1, [r2, #0]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	43d2      	mvns	r2, r2
 80007a4:	400a      	ands	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
  }
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40013c00 	.word	0x40013c00

080007b8 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <EXTI_GetITStatus+0x44>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4013      	ands	r3, r2
 80007d0:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <EXTI_GetITStatus+0x44>)
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4013      	ands	r3, r2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d005      	beq.n	80007ea <EXTI_GetITStatus+0x32>
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80007e4:	2301      	movs	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e001      	b.n	80007ee <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	40013c00 	.word	0x40013c00

08000800 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <EXTI_ClearITPendingBit+0x1c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6153      	str	r3, [r2, #20]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40013c00 	.word	0x40013c00

08000820 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	e076      	b.n	800092a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800083c:	2201      	movs	r2, #1
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	4013      	ands	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d165      	bne.n	8000924 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	2103      	movs	r1, #3
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	401a      	ands	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	4619      	mov	r1, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	431a      	orrs	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d003      	beq.n	8000896 <GPIO_Init+0x76>
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d12e      	bne.n	80008f4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	2103      	movs	r1, #3
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	401a      	ands	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	795b      	ldrb	r3, [r3, #5]
 80008b4:	4619      	mov	r1, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	431a      	orrs	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	2101      	movs	r1, #1
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	401a      	ands	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	799b      	ldrb	r3, [r3, #6]
 80008e2:	4619      	mov	r1, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	431a      	orrs	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2103      	movs	r1, #3
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	401a      	ands	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	79db      	ldrb	r3, [r3, #7]
 8000914:	4619      	mov	r1, r3
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	431a      	orrs	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d985      	bls.n	800083c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000930:	bf00      	nop
 8000932:	371c      	adds	r7, #28
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	691a      	ldr	r2, [r3, #16]
 8000950:	887b      	ldrh	r3, [r7, #2]
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000958:	2301      	movs	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e001      	b.n	8000962 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	807b      	strh	r3, [r7, #2]
 800097c:	4613      	mov	r3, r2
 800097e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000980:	787b      	ldrb	r3, [r7, #1]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	887a      	ldrh	r2, [r7, #2]
 800098a:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 800098c:	e002      	b.n	8000994 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	887a      	ldrh	r2, [r7, #2]
 8000992:	835a      	strh	r2, [r3, #26]
  }
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	807b      	strh	r3, [r7, #2]
 80009ac:	4613      	mov	r3, r2
 80009ae:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80009b8:	787a      	ldrb	r2, [r7, #1]
 80009ba:	887b      	ldrh	r3, [r7, #2]
 80009bc:	f003 0307 	and.w	r3, r3, #7
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	887b      	ldrh	r3, [r7, #2]
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3208      	adds	r2, #8
 80009dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009e0:	887b      	ldrh	r3, [r7, #2]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	210f      	movs	r1, #15
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	ea02 0103 	and.w	r1, r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f100 0208 	add.w	r2, r0, #8
 80009fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80009fe:	887b      	ldrh	r3, [r7, #2]
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000a14:	887b      	ldrh	r3, [r7, #2]
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3208      	adds	r2, #8
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
 8000a48:	2302      	movs	r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	2302      	movs	r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a54:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <RCC_GetClocksFreq+0x144>)
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	f003 030c 	and.w	r3, r3, #12
 8000a5c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d007      	beq.n	8000a74 <RCC_GetClocksFreq+0x40>
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	d009      	beq.n	8000a7c <RCC_GetClocksFreq+0x48>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d13f      	bne.n	8000aec <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a43      	ldr	r2, [pc, #268]	; (8000b7c <RCC_GetClocksFreq+0x148>)
 8000a70:	601a      	str	r2, [r3, #0]
      break;
 8000a72:	e03f      	b.n	8000af4 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a42      	ldr	r2, [pc, #264]	; (8000b80 <RCC_GetClocksFreq+0x14c>)
 8000a78:	601a      	str	r2, [r3, #0]
      break;
 8000a7a:	e03b      	b.n	8000af4 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a7c:	4b3e      	ldr	r3, [pc, #248]	; (8000b78 <RCC_GetClocksFreq+0x144>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a84:	0d9b      	lsrs	r3, r3, #22
 8000a86:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a88:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <RCC_GetClocksFreq+0x144>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a90:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00d      	beq.n	8000ab4 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a98:	4a39      	ldr	r2, [pc, #228]	; (8000b80 <RCC_GetClocksFreq+0x14c>)
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aa0:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <RCC_GetClocksFreq+0x144>)
 8000aa2:	6859      	ldr	r1, [r3, #4]
 8000aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000aa8:	400b      	ands	r3, r1
 8000aaa:	099b      	lsrs	r3, r3, #6
 8000aac:	fb03 f302 	mul.w	r3, r3, r2
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	e00c      	b.n	8000ace <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000ab4:	4a31      	ldr	r2, [pc, #196]	; (8000b7c <RCC_GetClocksFreq+0x148>)
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <RCC_GetClocksFreq+0x144>)
 8000abe:	6859      	ldr	r1, [r3, #4]
 8000ac0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ac4:	400b      	ands	r3, r1
 8000ac6:	099b      	lsrs	r3, r3, #6
 8000ac8:	fb03 f302 	mul.w	r3, r3, r2
 8000acc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <RCC_GetClocksFreq+0x144>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ad6:	0c1b      	lsrs	r3, r3, #16
 8000ad8:	3301      	adds	r3, #1
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	601a      	str	r2, [r3, #0]
      break;
 8000aea:	e003      	b.n	8000af4 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a23      	ldr	r2, [pc, #140]	; (8000b7c <RCC_GetClocksFreq+0x148>)
 8000af0:	601a      	str	r2, [r3, #0]
      break;
 8000af2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <RCC_GetClocksFreq+0x144>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000afc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <RCC_GetClocksFreq+0x150>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	40da      	lsrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <RCC_GetClocksFreq+0x144>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000b24:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	0a9b      	lsrs	r3, r3, #10
 8000b2a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b2c:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <RCC_GetClocksFreq+0x150>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	40da      	lsrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <RCC_GetClocksFreq+0x144>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000b4c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	0b5b      	lsrs	r3, r3, #13
 8000b52:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <RCC_GetClocksFreq+0x150>)
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	40da      	lsrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	60da      	str	r2, [r3, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3724      	adds	r7, #36	; 0x24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	00f42400 	.word	0x00f42400
 8000b80:	007a1200 	.word	0x007a1200
 8000b84:	20000000 	.word	0x20000000

08000b88 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b9a:	490a      	ldr	r1, [pc, #40]	; (8000bc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000ba6:	e006      	b.n	8000bb6 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ba8:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d006      	beq.n	8000be8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000bda:	490a      	ldr	r1, [pc, #40]	; (8000c04 <RCC_APB1PeriphClockCmd+0x3c>)
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <RCC_APB1PeriphClockCmd+0x3c>)
 8000bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000be6:	e006      	b.n	8000bf6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000be8:	4906      	ldr	r1, [pc, #24]	; (8000c04 <RCC_APB1PeriphClockCmd+0x3c>)
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <RCC_APB1PeriphClockCmd+0x3c>)
 8000bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c1a:	490a      	ldr	r1, [pc, #40]	; (8000c44 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c26:	e006      	b.n	8000c36 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c28:	4906      	ldr	r1, [pc, #24]	; (8000c44 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	4013      	ands	r3, r2
 8000c34:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000c5a:	490a      	ldr	r1, [pc, #40]	; (8000c84 <RCC_APB1PeriphResetCmd+0x3c>)
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <RCC_APB1PeriphResetCmd+0x3c>)
 8000c5e:	6a1a      	ldr	r2, [r3, #32]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000c66:	e006      	b.n	8000c76 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000c68:	4906      	ldr	r1, [pc, #24]	; (8000c84 <RCC_APB1PeriphResetCmd+0x3c>)
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <RCC_APB1PeriphResetCmd+0x3c>)
 8000c6c:	6a1a      	ldr	r2, [r3, #32]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	4013      	ands	r3, r2
 8000c74:	620b      	str	r3, [r1, #32]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000c9a:	490a      	ldr	r1, [pc, #40]	; (8000cc4 <RCC_APB2PeriphResetCmd+0x3c>)
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <RCC_APB2PeriphResetCmd+0x3c>)
 8000c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000ca6:	e006      	b.n	8000cb6 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000ca8:	4906      	ldr	r1, [pc, #24]	; (8000cc4 <RCC_APB2PeriphResetCmd+0x3c>)
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <RCC_APB2PeriphResetCmd+0x3c>)
 8000cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000cc8:	b490      	push	{r4, r7}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000cec:	4916      	ldr	r1, [pc, #88]	; (8000d48 <SYSCFG_EXTILineConfig+0x80>)
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <SYSCFG_EXTILineConfig+0x80>)
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	3302      	adds	r3, #2
 8000d00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	401a      	ands	r2, r3
 8000d0a:	1c83      	adds	r3, r0, #2
 8000d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <SYSCFG_EXTILineConfig+0x80>)
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461c      	mov	r4, r3
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <SYSCFG_EXTILineConfig+0x80>)
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	3302      	adds	r3, #2
 8000d24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d28:	79f9      	ldrb	r1, [r7, #7]
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	431a      	orrs	r2, r3
 8000d38:	1ca3      	adds	r3, r4, #2
 8000d3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc90      	pop	{r4, r7}
 8000d46:	4770      	bx	lr
 8000d48:	40013800 	.word	0x40013800

08000d4c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <TIM_TimeBaseInit+0xbc>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d013      	beq.n	8000d90 <TIM_TimeBaseInit+0x44>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a28      	ldr	r2, [pc, #160]	; (8000e0c <TIM_TimeBaseInit+0xc0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d00f      	beq.n	8000d90 <TIM_TimeBaseInit+0x44>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d76:	d00b      	beq.n	8000d90 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <TIM_TimeBaseInit+0xc4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d007      	beq.n	8000d90 <TIM_TimeBaseInit+0x44>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <TIM_TimeBaseInit+0xc8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d003      	beq.n	8000d90 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a23      	ldr	r2, [pc, #140]	; (8000e18 <TIM_TimeBaseInit+0xcc>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d108      	bne.n	8000da2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d96:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	885a      	ldrh	r2, [r3, #2]
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <TIM_TimeBaseInit+0xd0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d00c      	beq.n	8000dc4 <TIM_TimeBaseInit+0x78>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <TIM_TimeBaseInit+0xd4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d008      	beq.n	8000dc4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000db8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	891a      	ldrh	r2, [r3, #8]
 8000dbe:	89fb      	ldrh	r3, [r7, #14]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	89fa      	ldrh	r2, [r7, #14]
 8000dc8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	881a      	ldrh	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <TIM_TimeBaseInit+0xbc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d003      	beq.n	8000dea <TIM_TimeBaseInit+0x9e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <TIM_TimeBaseInit+0xc0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d104      	bne.n	8000df4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	7a9b      	ldrb	r3, [r3, #10]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2201      	movs	r2, #1
 8000df8:	829a      	strh	r2, [r3, #20]
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	40010400 	.word	0x40010400
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40000800 	.word	0x40000800
 8000e18:	40000c00 	.word	0x40000c00
 8000e1c:	40001000 	.word	0x40001000
 8000e20:	40001400 	.word	0x40001400

08000e24 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d008      	beq.n	8000e48 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000e46:	e007      	b.n	8000e58 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	801a      	strh	r2, [r3, #0]
  }
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
 8000e70:	4613      	mov	r3, r2
 8000e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e74:	787b      	ldrb	r3, [r7, #1]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d008      	beq.n	8000e8c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	899b      	ldrh	r3, [r3, #12]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000e8a:	e009      	b.n	8000ea0 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	899b      	ldrh	r3, [r3, #12]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	819a      	strh	r2, [r3, #12]
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	821a      	strh	r2, [r3, #16]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3b      	ldr	r2, [pc, #236]	; (8000fc8 <USART_DeInit+0xf8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d108      	bne.n	8000ef2 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2010      	movs	r0, #16
 8000ee4:	f7ff fed0 	bl	8000c88 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2010      	movs	r0, #16
 8000eec:	f7ff fecc 	bl	8000c88 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000ef0:	e065      	b.n	8000fbe <USART_DeInit+0xee>
  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a35      	ldr	r2, [pc, #212]	; (8000fcc <USART_DeInit+0xfc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10a      	bne.n	8000f10 <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000efa:	2101      	movs	r1, #1
 8000efc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f00:	f7ff fea2 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000f04:	2100      	movs	r1, #0
 8000f06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f0a:	f7ff fe9d 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f0e:	e056      	b.n	8000fbe <USART_DeInit+0xee>
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a2f      	ldr	r2, [pc, #188]	; (8000fd0 <USART_DeInit+0x100>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d10a      	bne.n	8000f2e <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000f18:	2101      	movs	r1, #1
 8000f1a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f1e:	f7ff fe93 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000f22:	2100      	movs	r1, #0
 8000f24:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f28:	f7ff fe8e 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f2c:	e047      	b.n	8000fbe <USART_DeInit+0xee>
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <USART_DeInit+0x104>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10a      	bne.n	8000f4c <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000f36:	2101      	movs	r1, #1
 8000f38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f3c:	f7ff fe84 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000f40:	2100      	movs	r1, #0
 8000f42:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f46:	f7ff fe7f 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f4a:	e038      	b.n	8000fbe <USART_DeInit+0xee>
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <USART_DeInit+0x108>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d10a      	bne.n	8000f6a <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000f54:	2101      	movs	r1, #1
 8000f56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f5a:	f7ff fe75 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f64:	f7ff fe70 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f68:	e029      	b.n	8000fbe <USART_DeInit+0xee>
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <USART_DeInit+0x10c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d108      	bne.n	8000f84 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000f72:	2101      	movs	r1, #1
 8000f74:	2020      	movs	r0, #32
 8000f76:	f7ff fe87 	bl	8000c88 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2020      	movs	r0, #32
 8000f7e:	f7ff fe83 	bl	8000c88 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f82:	e01c      	b.n	8000fbe <USART_DeInit+0xee>
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <USART_DeInit+0x110>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d10a      	bne.n	8000fa2 <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f92:	f7ff fe59 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000f96:	2100      	movs	r1, #0
 8000f98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f9c:	f7ff fe54 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000fa0:	e00d      	b.n	8000fbe <USART_DeInit+0xee>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <USART_DeInit+0x114>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d109      	bne.n	8000fbe <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8000faa:	2101      	movs	r1, #1
 8000fac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000fb0:	f7ff fe4a 	bl	8000c48 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000fba:	f7ff fe45 	bl	8000c48 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	40004800 	.word	0x40004800
 8000fd4:	40004c00 	.word	0x40004c00
 8000fd8:	40005000 	.word	0x40005000
 8000fdc:	40011400 	.word	0x40011400
 8000fe0:	40007800 	.word	0x40007800
 8000fe4:	40007c00 	.word	0x40007c00

08000fe8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	8a1b      	ldrh	r3, [r3, #16]
 8001006:	b29b      	uxth	r3, r3
 8001008:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001010:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	88db      	ldrh	r3, [r3, #6]
 8001016:	461a      	mov	r2, r3
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	4313      	orrs	r3, r2
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	b29a      	uxth	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	899b      	ldrh	r3, [r3, #12]
 800102a:	b29b      	uxth	r3, r3
 800102c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001034:	f023 030c 	bic.w	r3, r3, #12
 8001038:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	889a      	ldrh	r2, [r3, #4]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	891b      	ldrh	r3, [r3, #8]
 8001042:	4313      	orrs	r3, r2
 8001044:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800104a:	4313      	orrs	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	4313      	orrs	r3, r2
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	b29a      	uxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	8a9b      	ldrh	r3, [r3, #20]
 8001062:	b29b      	uxth	r3, r3
 8001064:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800106c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	899b      	ldrh	r3, [r3, #12]
 8001072:	461a      	mov	r2, r3
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	4313      	orrs	r3, r2
 8001078:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fcd4 	bl	8000a34 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a30      	ldr	r2, [pc, #192]	; (8001150 <USART_Init+0x168>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d003      	beq.n	800109c <USART_Init+0xb4>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <USART_Init+0x16c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d102      	bne.n	80010a2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	623b      	str	r3, [r7, #32]
 80010a0:	e001      	b.n	80010a6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	899b      	ldrh	r3, [r3, #12]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da0c      	bge.n	80010cc <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80010b2:	6a3a      	ldr	r2, [r7, #32]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	009a      	lsls	r2, r3, #2
 80010bc:	441a      	add	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e00b      	b.n	80010e4 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80010cc:	6a3a      	ldr	r2, [r7, #32]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	009a      	lsls	r2, r3, #2
 80010d6:	441a      	add	r2, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <USART_Init+0x170>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	095b      	lsrs	r3, r3, #5
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	2264      	movs	r2, #100	; 0x64
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	899b      	ldrh	r3, [r3, #12]
 8001106:	b29b      	uxth	r3, r3
 8001108:	b21b      	sxth	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	da0c      	bge.n	8001128 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	3332      	adds	r3, #50	; 0x32
 8001114:	4a10      	ldr	r2, [pc, #64]	; (8001158 <USART_Init+0x170>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001122:	4313      	orrs	r3, r2
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
 8001126:	e00b      	b.n	8001140 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <USART_Init+0x170>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	095b      	lsrs	r3, r3, #5
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113c:	4313      	orrs	r3, r2
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	b29a      	uxth	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	811a      	strh	r2, [r3, #8]
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40011000 	.word	0x40011000
 8001154:	40011400 	.word	0x40011400
 8001158:	51eb851f 	.word	0x51eb851f

0800115c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d008      	beq.n	8001180 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	899b      	ldrh	r3, [r3, #12]
 8001172:	b29b      	uxth	r3, r3
 8001174:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001178:	b29a      	uxth	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800117e:	e007      	b.n	8001190 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	899b      	ldrh	r3, [r3, #12]
 8001184:	b29b      	uxth	r3, r3
 8001186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	819a      	strh	r2, [r3, #12]
  }
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	809a      	strh	r2, [r3, #4]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	889b      	ldrh	r3, [r3, #4]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011d2:	b29b      	uxth	r3, r3
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d008      	beq.n	8001208 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	8a9b      	ldrh	r3, [r3, #20]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	4313      	orrs	r3, r2
 8001200:	b29a      	uxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8001206:	e009      	b.n	800121c <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	8a9b      	ldrh	r3, [r3, #20]
 800120c:	b29a      	uxth	r2, r3
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	43db      	mvns	r3, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	4013      	ands	r3, r2
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	829a      	strh	r2, [r3, #20]
  }
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	b2db      	uxtb	r3, r3
 8001254:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800125e:	2201      	movs	r2, #1
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d103      	bne.n	8001276 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	330c      	adds	r3, #12
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e009      	b.n	800128a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d103      	bne.n	8001284 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3310      	adds	r3, #16
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e002      	b.n	800128a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3314      	adds	r3, #20
 8001288:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800128a:	787b      	ldrb	r3, [r7, #1]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	6811      	ldr	r1, [r2, #0]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800129c:	e006      	b.n	80012ac <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	6811      	ldr	r1, [r2, #0]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	43d2      	mvns	r2, r2
 80012a8:	400a      	ands	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]
  }
}
 80012ac:	bf00      	nop
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	4013      	ands	r3, r2
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e001      	b.n	80012e2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	095b      	lsrs	r3, r3, #5
 8001312:	b2db      	uxtb	r3, r3
 8001314:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800131e:	2201      	movs	r2, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d107      	bne.n	800133e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	899b      	ldrh	r3, [r3, #12]
 8001332:	b29b      	uxth	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	4013      	ands	r3, r2
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e011      	b.n	8001362 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d107      	bne.n	8001354 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	8a1b      	ldrh	r3, [r3, #16]
 8001348:	b29b      	uxth	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	4013      	ands	r3, r2
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e006      	b.n	8001362 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	8a9b      	ldrh	r3, [r3, #20]
 8001358:	b29b      	uxth	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	4013      	ands	r3, r2
 8001360:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b29b      	uxth	r3, r3
 8001368:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800136a:	2201      	movs	r2, #1
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <USART_GetITStatus+0xa4>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	74fb      	strb	r3, [r7, #19]
 8001392:	e001      	b.n	8001398 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001398:	7cfb      	ldrb	r3, [r7, #19]
}
 800139a:	4618      	mov	r0, r3
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <STM_EVAL_LEDInit+0x50>)
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fbe3 	bl	8000b88 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <STM_EVAL_LEDInit+0x54>)
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80013cc:	2301      	movs	r3, #1
 80013ce:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80013d8:	2302      	movs	r3, #2
 80013da:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <STM_EVAL_LEDInit+0x58>)
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	f107 0208 	add.w	r2, r7, #8
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fa18 	bl	8000820 <GPIO_Init>
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	08002880 	.word	0x08002880
 80013fc:	08002878 	.word	0x08002878
 8001400:	20000010 	.word	0x20000010

08001404 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <STM_EVAL_LEDOn+0x28>)
 8001412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4905      	ldr	r1, [pc, #20]	; (8001430 <STM_EVAL_LEDOn+0x2c>)
 800141a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800141e:	831a      	strh	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000010 	.word	0x20000010
 8001430:	08002878 	.word	0x08002878

08001434 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <STM_EVAL_LEDToggle+0x34>)
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <STM_EVAL_LEDToggle+0x34>)
 800144a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800144e:	6952      	ldr	r2, [r2, #20]
 8001450:	79f9      	ldrb	r1, [r7, #7]
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <STM_EVAL_LEDToggle+0x38>)
 8001454:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001458:	404a      	eors	r2, r1
 800145a:	615a      	str	r2, [r3, #20]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	20000010 	.word	0x20000010
 800146c:	08002878 	.word	0x08002878

08001470 <init_Delay>:
 */

#include "Delay.h"

void init_Delay(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
	RCC_DelayPeriphClockCmd(RCC_Delay_Periph,ENABLE);
 8001476:	2101      	movs	r1, #1
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff fba5 	bl	8000bc8 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure; //create a 1ms delaay

	timerInitStructure.TIM_Prescaler = PSC_Base;
 800147e:	f241 0368 	movw	r3, #4200	; 0x1068
 8001482:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001484:	2300      	movs	r3, #0
 8001486:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period= 4999;
 8001488:	f241 3387 	movw	r3, #4999	; 0x1387
 800148c:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_RepetitionCounter = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(Delay_Timer, &timerInitStructure);
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800149e:	f7ff fc55 	bl	8000d4c <TIM_TimeBaseInit>
	NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = Delay_IRQn;
 80014a2:	231c      	movs	r3, #28
 80014a4:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80014aa:	2301      	movs	r3, #1
 80014ac:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80014ae:	2301      	movs	r3, #1
 80014b0:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 80014b2:	463b      	mov	r3, r7
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe fe99 	bl	80001ec <NVIC_Init>
	timeout = 0;
 80014ba:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <init_Delay+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
	//enable interrupts
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200000b0 	.word	0x200000b0

080014cc <Delay_begin_Timeout>:

void Delay_begin_Timeout(uint32_t time)//time in ms
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	//clear any active flags
	timeout = 0;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <Delay_begin_Timeout+0x70>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
	float ms = (float)time/1000;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e4:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001540 <Delay_begin_Timeout+0x74>
 80014e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ec:	edc7 7a03 	vstr	s15, [r7, #12]
	//set prescaler to 100
	uint32_t arr_value = ms*clock_frequency/(PSC_Base) -1;
 80014f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001544 <Delay_begin_Timeout+0x78>
 80014f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014fc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001548 <Delay_begin_Timeout+0x7c>
 8001500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001508:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800150c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001510:	ee17 3a90 	vmov	r3, s15
 8001514:	60bb      	str	r3, [r7, #8]
	Delay_Timer->ARR = arr_value;
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM_Cmd(Delay_Timer, ENABLE);
 800151e:	2101      	movs	r1, #1
 8001520:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001524:	f7ff fc7e 	bl	8000e24 <TIM_Cmd>
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,ENABLE);
 8001528:	2201      	movs	r2, #1
 800152a:	2101      	movs	r1, #1
 800152c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001530:	f7ff fc98 	bl	8000e64 <TIM_ITConfig>
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000b0 	.word	0x200000b0
 8001540:	447a0000 	.word	0x447a0000
 8001544:	4ca037a0 	.word	0x4ca037a0
 8001548:	45834000 	.word	0x45834000

0800154c <TIM2_IRQHandler>:
void Delay_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	//set timeout flag
	timeout = 1;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <TIM2_IRQHandler+0x1c>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
	//disable timer
	TIM_ClearITPendingBit(Delay_Timer, TIM_IT_Update);
 8001556:	2101      	movs	r1, #1
 8001558:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800155c:	f7ff fca6 	bl	8000eac <TIM_ClearITPendingBit>
	Delay_Disable();
 8001560:	f000 f804 	bl	800156c <Delay_Disable>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200000b0 	.word	0x200000b0

0800156c <Delay_Disable>:

void Delay_Disable(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	//turn off timer
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,DISABLE);
 8001570:	2200      	movs	r2, #0
 8001572:	2101      	movs	r1, #1
 8001574:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001578:	f7ff fc74 	bl	8000e64 <TIM_ITConfig>
	TIM_Cmd(Delay_Timer, DISABLE);
 800157c:	2100      	movs	r1, #0
 800157e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001582:	f7ff fc4f 	bl	8000e24 <TIM_Cmd>
	//clear counter
	assert_param(IS_TIM_ALL_PERIPH(Delay_Timer));
	Delay_Timer->CNT = 0;
 8001586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop

08001594 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 800159e:	4909      	ldr	r1, [pc, #36]	; (80015c4 <NVIC_DisableIRQ+0x30>)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	095b      	lsrs	r3, r3, #5
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	f002 021f 	and.w	r2, r2, #31
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	3320      	adds	r3, #32
 80015b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <init_Iridium_USART>:
 */

#include "Iridium.h"

void init_Iridium_USART(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b096      	sub	sp, #88	; 0x58
 80015cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART3_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;
	/* ENABLE RCC */
	//clear flags
	IR_Rx_done = 0;
 80015ce:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <init_Iridium_USART+0x230>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
	status_Received = 0;
 80015d4:	4b89      	ldr	r3, [pc, #548]	; (80017fc <init_Iridium_USART+0x234>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
	bin_message_received = 0;
 80015da:	4b89      	ldr	r3, [pc, #548]	; (8001800 <init_Iridium_USART+0x238>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
	Wait_for_network = 0;
 80015e0:	4b88      	ldr	r3, [pc, #544]	; (8001804 <init_Iridium_USART+0x23c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
	Iridium_GPIO_PeriphClockCommand(Iridium_GPIO_RCCPeriph,ENABLE);
 80015e6:	2101      	movs	r1, #1
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff facd 	bl	8000b88 <RCC_AHB1PeriphClockCmd>
	Iridium_USART_PeriphClockCommand(Iridium_USART_RCCPeriph,ENABLE);
 80015ee:	2101      	movs	r1, #1
 80015f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80015f4:	f7ff fae8 	bl	8000bc8 <RCC_APB1PeriphClockCmd>

	/* Configure GPIO to alternate function Open Drain Pull UP */
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80015f8:	2302      	movs	r3, #2
 80015fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.GPIO_Pin = (Iridium_USART_RX | Iridium_USART_TX);
 80015fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001602:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001604:	2301      	movs	r3, #1
 8001606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001610:	2303      	movs	r3, #3
 8001612:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	GPIO_Init(Iridium_GPIO,&GPIO_InitStruct);
 8001616:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800161a:	4619      	mov	r1, r3
 800161c:	487a      	ldr	r0, [pc, #488]	; (8001808 <init_Iridium_USART+0x240>)
 800161e:	f7ff f8ff 	bl	8000820 <GPIO_Init>
	//AF Mapping
	GPIO_PinAFConfig(Iridium_GPIO,Iridium_USART_RXsrc,Iridium_GPIO_AF);
 8001622:	2207      	movs	r2, #7
 8001624:	210b      	movs	r1, #11
 8001626:	4878      	ldr	r0, [pc, #480]	; (8001808 <init_Iridium_USART+0x240>)
 8001628:	f7ff f9ba 	bl	80009a0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(Iridium_GPIO,Iridium_USART_TXsrc,Iridium_GPIO_AF);
 800162c:	2207      	movs	r2, #7
 800162e:	210a      	movs	r1, #10
 8001630:	4875      	ldr	r0, [pc, #468]	; (8001808 <init_Iridium_USART+0x240>)
 8001632:	f7ff f9b5 	bl	80009a0 <GPIO_PinAFConfig>

	/* Configure USART	*/
	USART3_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8001636:	230c      	movs	r3, #12
 8001638:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	USART3_InitStruct.USART_WordLength = USART_WordLength_8b;
 800163c:	2300      	movs	r3, #0
 800163e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	USART3_InitStruct.USART_StopBits = USART_StopBits_1;
 8001642:	2300      	movs	r3, #0
 8001644:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	USART3_InitStruct.USART_Parity = USART_Parity_No;
 8001648:	2300      	movs	r3, #0
 800164a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	USART3_InitStruct.USART_BaudRate = Iridium_Baudrate;
 800164e:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
	USART3_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001654:	2300      	movs	r3, #0
 8001656:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	USART_Init(Iridium_USART, &USART3_InitStruct);
 800165a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800165e:	4619      	mov	r1, r3
 8001660:	486a      	ldr	r0, [pc, #424]	; (800180c <init_Iridium_USART+0x244>)
 8001662:	f7ff fcc1 	bl	8000fe8 <USART_Init>

	/* Configure NVIC for interrupt */
	NVIC_InitStruct.NVIC_IRQChannel = Iridium_USART_IRQn;
 8001666:	2327      	movs	r3, #39	; 0x27
 8001668:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800166c:	2301      	movs	r3, #1
 800166e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
 8001678:	2301      	movs	r3, #1
 800167a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	NVIC_Init(&NVIC_InitStruct);
 800167e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fdb2 	bl	80001ec <NVIC_Init>
	USART_ITConfig(Iridium_USART, USART_IT_IDLE,ENABLE);
 8001688:	2201      	movs	r2, #1
 800168a:	f240 4124 	movw	r1, #1060	; 0x424
 800168e:	485f      	ldr	r0, [pc, #380]	; (800180c <init_Iridium_USART+0x244>)
 8001690:	f7ff fdca 	bl	8001228 <USART_ITConfig>
	USART_Cmd(Iridium_USART,ENABLE);
 8001694:	2101      	movs	r1, #1
 8001696:	485d      	ldr	r0, [pc, #372]	; (800180c <init_Iridium_USART+0x244>)
 8001698:	f7ff fd60 	bl	800115c <USART_Cmd>


#ifdef IRIDIUM_Periph_Use_DMA
	DMA_InitTypeDef DMA_InitStructure;
	USART_DMACmd(Iridium_USART,USART_DMAReq_Rx,ENABLE);
 800169c:	2201      	movs	r2, #1
 800169e:	2140      	movs	r1, #64	; 0x40
 80016a0:	485a      	ldr	r0, [pc, #360]	; (800180c <init_Iridium_USART+0x244>)
 80016a2:	f7ff fd9d 	bl	80011e0 <USART_DMACmd>

#ifdef IRIDIUM_MEM_Use_DMA
	DMA_AHB1PeriphClockCmd(DMA2_AHB1Periph,ENABLE);
 80016a6:	2101      	movs	r1, #1
 80016a8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80016ac:	f7ff fa6c 	bl	8000b88 <RCC_AHB1PeriphClockCmd>
#endif
	DMA_AHB1PeriphClockCmd(DMA_AHB1Periph,ENABLE);
 80016b0:	2101      	movs	r1, #1
 80016b2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016b6:	f7ff fa67 	bl	8000b88 <RCC_AHB1PeriphClockCmd>

	/* De-initialize DMA RX & TX Stream */
	DMA_DeInit(Iridium_DMA_RX_Stream);
 80016ba:	4855      	ldr	r0, [pc, #340]	; (8001810 <init_Iridium_USART+0x248>)
 80016bc:	f7fe fdf8 	bl	80002b0 <DMA_DeInit>
	while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream ) != DISABLE) { ; }
 80016c0:	bf00      	nop
 80016c2:	4853      	ldr	r0, [pc, #332]	; (8001810 <init_Iridium_USART+0x248>)
 80016c4:	f7fe ff4a 	bl	800055c <DMA_GetCmdStatus>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f9      	bne.n	80016c2 <init_Iridium_USART+0xfa>
	DMA_DeInit(Iridium_DMA_MEM_Stream);
 80016ce:	4851      	ldr	r0, [pc, #324]	; (8001814 <init_Iridium_USART+0x24c>)
 80016d0:	f7fe fdee 	bl	80002b0 <DMA_DeInit>
	while (DMA_GetCmdStatus(Iridium_DMA_MEM_Stream) != DISABLE) { ; }
 80016d4:	bf00      	nop
 80016d6:	484f      	ldr	r0, [pc, #316]	; (8001814 <init_Iridium_USART+0x24c>)
 80016d8:	f7fe ff40 	bl	800055c <DMA_GetCmdStatus>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <init_Iridium_USART+0x10e>

	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(Iridium_USART->DR));
 80016e2:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <init_Iridium_USART+0x250>)
 80016e4:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80016ee:	2300      	movs	r3, #0
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38

	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)(Iridium_Rx_Buff);
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <init_Iridium_USART+0x254>)
 80016f4:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80016fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fe:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	; 0x34

	DMA_InitStructure.DMA_Channel = Iridium_DMA_RX_Channel;
 8001704:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001708:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001712:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_BufferSize = Iridium_RX_Buffsize;
 8001718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171c:	613b      	str	r3, [r7, #16]

	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001722:	2303      	movs	r3, #3
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(Iridium_DMA_RX_Stream, &DMA_InitStructure);
 8001726:	463b      	mov	r3, r7
 8001728:	4619      	mov	r1, r3
 800172a:	4839      	ldr	r0, [pc, #228]	; (8001810 <init_Iridium_USART+0x248>)
 800172c:	f7fe fe94 	bl	8000458 <DMA_Init>

	// enable the interrupt in the NVIC
	NVIC_InitStruct.NVIC_IRQChannel = DMA_USART_RX_IRQn;
 8001730:	230c      	movs	r3, #12
 8001732:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 800173c:	2301      	movs	r3, #1
 800173e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001742:	2301      	movs	r3, #1
 8001744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	NVIC_Init(&NVIC_InitStruct);
 8001748:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fd4d 	bl	80001ec <NVIC_Init>
	DMA_ITConfig(Iridium_DMA_RX_Stream, DMA_IT_TC, ENABLE);
 8001752:	2201      	movs	r2, #1
 8001754:	2110      	movs	r1, #16
 8001756:	482e      	ldr	r0, [pc, #184]	; (8001810 <init_Iridium_USART+0x248>)
 8001758:	f7fe ff54 	bl	8000604 <DMA_ITConfig>
#ifdef IRIDIUM_MEM_Use_DMA

			DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(Iridium_Rx_Buff);
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <init_Iridium_USART+0x254>)
 800175e:	607b      	str	r3, [r7, #4]
			DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
			DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
 8001764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001768:	617b      	str	r3, [r7, #20]
			DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800176a:	2300      	movs	r3, #0
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38

			DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)message_buff;
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <init_Iridium_USART+0x258>)
 8001770:	60bb      	str	r3, [r7, #8]
			DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
			DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	61bb      	str	r3, [r7, #24]
			DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	; 0x34

			DMA_InitStructure.DMA_Channel = Iridium_DMA_MEM_Channel;
 8001780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001784:	603b      	str	r3, [r7, #0]
			DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
			DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToMemory;
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	60fb      	str	r3, [r7, #12]
			DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800178e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
			DMA_InitStructure.DMA_BufferSize = Iridium_message_Buffsize;
 8001794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001798:	613b      	str	r3, [r7, #16]

			DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
			DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800179e:	2303      	movs	r3, #3
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30

			DMA_Init(Iridium_DMA_MEM_Stream, &DMA_InitStructure);
 80017a2:	463b      	mov	r3, r7
 80017a4:	4619      	mov	r1, r3
 80017a6:	481b      	ldr	r0, [pc, #108]	; (8001814 <init_Iridium_USART+0x24c>)
 80017a8:	f7fe fe56 	bl	8000458 <DMA_Init>

			// enable the interrupt in the NVIC
			NVIC_InitStruct.NVIC_IRQChannel = DMA_USART_MEM_IRQn;
 80017ac:	2338      	movs	r3, #56	; 0x38
 80017ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 00;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			NVIC_InitStruct.NVIC_IRQChannelSubPriority = 01;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			NVIC_Init(&NVIC_InitStruct);
 80017c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fd0f 	bl	80001ec <NVIC_Init>
			DMA_ITConfig(Iridium_DMA_MEM_Stream, DMA_IT_TC, ENABLE);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2110      	movs	r1, #16
 80017d2:	4810      	ldr	r0, [pc, #64]	; (8001814 <init_Iridium_USART+0x24c>)
 80017d4:	f7fe ff16 	bl	8000604 <DMA_ITConfig>
#endif
	DMA_Cmd(Iridium_DMA_RX_Stream, ENABLE);
 80017d8:	2101      	movs	r1, #1
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <init_Iridium_USART+0x248>)
 80017dc:	f7fe fe94 	bl	8000508 <DMA_Cmd>
	while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != ENABLE);
 80017e0:	bf00      	nop
 80017e2:	480b      	ldr	r0, [pc, #44]	; (8001810 <init_Iridium_USART+0x248>)
 80017e4:	f7fe feba 	bl	800055c <DMA_GetCmdStatus>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d1f9      	bne.n	80017e2 <init_Iridium_USART+0x21a>
#endif
}
 80017ee:	bf00      	nop
 80017f0:	3758      	adds	r7, #88	; 0x58
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200004b2 	.word	0x200004b2
 80017fc:	200004b1 	.word	0x200004b1
 8001800:	200004b3 	.word	0x200004b3
 8001804:	200004b0 	.word	0x200004b0
 8001808:	40020400 	.word	0x40020400
 800180c:	40004800 	.word	0x40004800
 8001810:	40026028 	.word	0x40026028
 8001814:	40026410 	.word	0x40026410
 8001818:	40004804 	.word	0x40004804
 800181c:	2000089c 	.word	0x2000089c
 8001820:	200004b4 	.word	0x200004b4

08001824 <init_Control_Pins>:

/*configure Control pins */
void init_Control_Pins(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
	//using port B
	Iridium_GPIO_PeriphClockCommand(RCC_AHB1Periph_GPIOB,ENABLE);
 800182a:	2101      	movs	r1, #1
 800182c:	2002      	movs	r0, #2
 800182e:	f7ff f9ab 	bl	8000b88 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001832:	2101      	movs	r1, #1
 8001834:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001838:	f7ff f9e6 	bl	8000c08 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	/*Wake up Pin*/
	GPIO_InitStruct.GPIO_Pin = Iridium_Wakeup_Pin;
 800183c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001840:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode =GPIO_Mode_OUT;
 8001842:	2301      	movs	r3, #1
 8001844:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001846:	2302      	movs	r3, #2
 8001848:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800184a:	2303      	movs	r3, #3
 800184c:	777b      	strb	r3, [r7, #29]
	GPIO_Init(Iridium_GPIO,&GPIO_InitStruct);
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	4619      	mov	r1, r3
 8001854:	481c      	ldr	r0, [pc, #112]	; (80018c8 <init_Control_Pins+0xa4>)
 8001856:	f7fe ffe3 	bl	8000820 <GPIO_Init>
	GPIO_WriteBit(Iridium_GPIO,Iridium_Wakeup_Pin,RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001860:	4819      	ldr	r0, [pc, #100]	; (80018c8 <init_Control_Pins+0xa4>)
 8001862:	f7ff f885 	bl	8000970 <GPIO_WriteBit>
	 * 	3.3V Digital
	 *	Available = high
	 *	Not available= low
	 */
	GPIO_InitTypeDef GPIO_NETAV;
	GPIO_NETAV.GPIO_Pin = GPIO_Pin_0;
 8001866:	2301      	movs	r3, #1
 8001868:	613b      	str	r3, [r7, #16]
	GPIO_NETAV.GPIO_Mode =GPIO_Mode_IN;
 800186a:	2300      	movs	r3, #0
 800186c:	753b      	strb	r3, [r7, #20]
	GPIO_NETAV.GPIO_OType = GPIO_OType_PP;
 800186e:	2300      	movs	r3, #0
 8001870:	75bb      	strb	r3, [r7, #22]
	GPIO_NETAV.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001872:	2302      	movs	r3, #2
 8001874:	75fb      	strb	r3, [r7, #23]
	GPIO_NETAV.GPIO_Speed = GPIO_Speed_100MHz;
 8001876:	2303      	movs	r3, #3
 8001878:	757b      	strb	r3, [r7, #21]
	GPIO_Init(Iridium_GPIO,&GPIO_NETAV);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	4619      	mov	r1, r3
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <init_Control_Pins+0xa4>)
 8001882:	f7fe ffcd 	bl	8000820 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB,EXTI_PinSource0);
 8001886:	2100      	movs	r1, #0
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff fa1d 	bl	8000cc8 <SYSCFG_EXTILineConfig>
	//configure NetAv pin to EXTI line
	EXTI_InitTypeDef EXTI_InitStruct;

	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 800188e:	2301      	movs	r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8001892:	2301      	movs	r3, #1
 8001894:	73bb      	strb	r3, [r7, #14]
	EXTI_InitStruct.EXTI_Mode =EXTI_Mode_Interrupt;
 8001896:	2300      	movs	r3, #0
 8001898:	733b      	strb	r3, [r7, #12]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising; //when high
 800189a:	2308      	movs	r3, #8
 800189c:	737b      	strb	r3, [r7, #13]
	EXTI_Init(&EXTI_InitStruct);
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe ff16 	bl	80006d4 <EXTI_Init>
	NVIC_InitTypeDef  NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 80018a8:	2306      	movs	r3, #6
 80018aa:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 80018b0:	2300      	movs	r3, #0
 80018b2:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fc96 	bl	80001ec <NVIC_Init>



}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020400 	.word	0x40020400

080018cc <init_Iridium_Module>:
/* Function to Reset the data buffer and pointer*/

int8_t init_Iridium_Module(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
	init_Iridium_USART();
 80018d2:	f7ff fe79 	bl	80015c8 <init_Iridium_USART>
	init_Control_Pins();
 80018d6:	f7ff ffa5 	bl	8001824 <init_Control_Pins>
	init_Rx_Buff();
 80018da:	f000 f847 	bl	800196c <init_Rx_Buff>
	//wait for module to fully power out
	uint8_t flag = send_ATcmd("AT\r",1000);
 80018de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018e2:	480a      	ldr	r0, [pc, #40]	; (800190c <init_Iridium_Module+0x40>)
 80018e4:	f000 f9fe 	bl	8001ce4 <send_ATcmd>
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
	if(flag == -2)
	{
		//timeout
		return flag;
	}
	if(strcmp((char*)temp_buff,"OK") ==0)
 80018ec:	4908      	ldr	r1, [pc, #32]	; (8001910 <init_Iridium_Module+0x44>)
 80018ee:	4809      	ldr	r0, [pc, #36]	; (8001914 <init_Iridium_Module+0x48>)
 80018f0:	f7fe fc6a 	bl	80001c8 <strcmp>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <init_Iridium_Module+0x32>
	{
		//VALID RESPONSE
		return 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e001      	b.n	8001902 <init_Iridium_Module+0x36>
	}
	//INVALID RESPONSE
	return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	080027a0 	.word	0x080027a0
 8001910:	080027a4 	.word	0x080027a4
 8001914:	200000c8 	.word	0x200000c8

08001918 <deinit_Iridium_Module>:

void deinit_Iridium_Module(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
	 //Clear Data Register and disable
	 Iridium_USART->DR = 0;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <deinit_Iridium_Module+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	809a      	strh	r2, [r3, #4]
	 USART_DeInit(Iridium_USART);
 8001924:	480f      	ldr	r0, [pc, #60]	; (8001964 <deinit_Iridium_Module+0x4c>)
 8001926:	f7ff fad3 	bl	8000ed0 <USART_DeInit>
	 USART_ITConfig(Iridium_USART,USART_IT_RXNE,DISABLE);
 800192a:	2200      	movs	r2, #0
 800192c:	f240 5125 	movw	r1, #1317	; 0x525
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <deinit_Iridium_Module+0x4c>)
 8001932:	f7ff fc79 	bl	8001228 <USART_ITConfig>
	 NVIC_DisableIRQ(Iridium_USART_IRQn);
 8001936:	2027      	movs	r0, #39	; 0x27
 8001938:	f7ff fe2c 	bl	8001594 <NVIC_DisableIRQ>

	 RCC_APB1PeriphClockCmd(Iridium_USART_RCCPeriph,DISABLE);
 800193c:	2100      	movs	r1, #0
 800193e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001942:	f7ff f941 	bl	8000bc8 <RCC_APB1PeriphClockCmd>

	 // deinit pins and place in weak pull up
	 GPIO_InitTypeDef  GPIO_InitStructure;
	 GPIO_InitStructure.GPIO_Pin = Iridium_USART_RX|Iridium_USART_TX;
 8001946:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800194a:	603b      	str	r3, [r7, #0]
	 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800194c:	2300      	movs	r3, #0
 800194e:	713b      	strb	r3, [r7, #4]
	 GPIO_Init(Iridium_GPIO, &GPIO_InitStructure);
 8001950:	463b      	mov	r3, r7
 8001952:	4619      	mov	r1, r3
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <deinit_Iridium_Module+0x50>)
 8001956:	f7fe ff63 	bl	8000820 <GPIO_Init>

}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40004800 	.word	0x40004800
 8001968:	40020400 	.word	0x40020400

0800196c <init_Rx_Buff>:

void init_Rx_Buff(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
	Iridium_data_length = 0;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <init_Rx_Buff+0x38>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Iridium_RX_Buffsize; ++i)
 8001978:	2300      	movs	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	e007      	b.n	800198e <init_Rx_Buff+0x22>
	{
		Iridium_Rx_Buff[i] = 0;
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <init_Rx_Buff+0x3c>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
}

void init_Rx_Buff(void)
{
	Iridium_data_length = 0;
	for (int i = 0; i < Iridium_RX_Buffsize; ++i)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3301      	adds	r3, #1
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001994:	dbf3      	blt.n	800197e <init_Rx_Buff+0x12>
	{
		Iridium_Rx_Buff[i] = 0;
	}
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000c88 	.word	0x20000c88
 80019a8:	2000089c 	.word	0x2000089c

080019ac <transmit_Data>:

void transmit_Data(char* tx_buff,size_t len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	//TODO: timeout and error checking
	/* get size of pointer*/
	for (int i = 0; i < len; ++i)
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e01c      	b.n	80019f6 <transmit_Data+0x4a>
	{

		USART_SendData(Iridium_USART,*(tx_buff++));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4619      	mov	r1, r3
 80019c8:	480f      	ldr	r0, [pc, #60]	; (8001a08 <transmit_Data+0x5c>)
 80019ca:	f7ff fbe7 	bl	800119c <USART_SendData>
		Delay_begin_Timeout(100);
 80019ce:	2064      	movs	r0, #100	; 0x64
 80019d0:	f7ff fd7c 	bl	80014cc <Delay_begin_Timeout>
		while(!USART_GetFlagStatus(Iridium_USART,USART_FLAG_TXE))
 80019d4:	e003      	b.n	80019de <transmit_Data+0x32>
		{
			if(timeout)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <transmit_Data+0x60>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d107      	bne.n	80019ee <transmit_Data+0x42>
	for (int i = 0; i < len; ++i)
	{

		USART_SendData(Iridium_USART,*(tx_buff++));
		Delay_begin_Timeout(100);
		while(!USART_GetFlagStatus(Iridium_USART,USART_FLAG_TXE))
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <transmit_Data+0x5c>)
 80019e2:	f7ff fc69 	bl	80012b8 <USART_GetFlagStatus>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f4      	beq.n	80019d6 <transmit_Data+0x2a>
 80019ec:	e000      	b.n	80019f0 <transmit_Data+0x44>
		{
			if(timeout)
			{
				break;
 80019ee:	bf00      	nop

void transmit_Data(char* tx_buff,size_t len)
{
	//TODO: timeout and error checking
	/* get size of pointer*/
	for (int i = 0; i < len; ++i)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3de      	bcc.n	80019bc <transmit_Data+0x10>
			{
				break;
			}
		}
	}
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40004800 	.word	0x40004800
 8001a0c:	200000b0 	.word	0x200000b0

08001a10 <transmit_bin_Data>:

void transmit_bin_Data(uint8_t* buff,size_t len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; ++i)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	e013      	b.n	8001a48 <transmit_bin_Data+0x38>
	{
		USART_SendData(Iridium_USART,*(buff++));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480a      	ldr	r0, [pc, #40]	; (8001a58 <transmit_bin_Data+0x48>)
 8001a2e:	f7ff fbb5 	bl	800119c <USART_SendData>
		while(!USART_GetFlagStatus(Iridium_USART,USART_FLAG_TXE));
 8001a32:	bf00      	nop
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	4808      	ldr	r0, [pc, #32]	; (8001a58 <transmit_bin_Data+0x48>)
 8001a38:	f7ff fc3e 	bl	80012b8 <USART_GetFlagStatus>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f8      	beq.n	8001a34 <transmit_bin_Data+0x24>
	}
}

void transmit_bin_Data(uint8_t* buff,size_t len)
{
	for (int i = 0; i < len; ++i)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3e7      	bcc.n	8001a20 <transmit_bin_Data+0x10>
	{
		USART_SendData(Iridium_USART,*(buff++));
		while(!USART_GetFlagStatus(Iridium_USART,USART_FLAG_TXE));
	}
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40004800 	.word	0x40004800

08001a5c <create_SBD_Session>:
		 *MT length
		 	 *Number of bytes received
		 *Count of mobile terminated SBD messages waiting at the GSS to be transferred to the ISU.
		 	 */
int8_t create_SBD_Session(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
	/* Initiate SBD session */
	session_flag = 1;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <create_SBD_Session+0x6c>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
	int8_t flag = send_ATcmd("AT+SBDIX\r",50000);
 8001a68:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001a6c:	4817      	ldr	r0, [pc, #92]	; (8001acc <create_SBD_Session+0x70>)
 8001a6e:	f000 f939 	bl	8001ce4 <send_ATcmd>
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
		//error = wait a few seconds then try again
	if(flag == -2)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	f113 0f02 	cmn.w	r3, #2
 8001a7e:	d102      	bne.n	8001a86 <create_SBD_Session+0x2a>
	{
		//timeout
		return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	e01b      	b.n	8001abe <create_SBD_Session+0x62>
	}
	//check SBD session
	switch(SBDIX_status[0])
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <create_SBD_Session+0x74>)
 8001a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db11      	blt.n	8001ab4 <create_SBD_Session+0x58>
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	dd02      	ble.n	8001a9a <create_SBD_Session+0x3e>
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d00a      	beq.n	8001aae <create_SBD_Session+0x52>
 8001a98:	e00c      	b.n	8001ab4 <create_SBD_Session+0x58>
	{
	case 0:
	case 1:
	case 2:
		if(strcmp((char*)temp_buff,"OK") == 0)
 8001a9a:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <create_SBD_Session+0x78>)
 8001a9c:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <create_SBD_Session+0x7c>)
 8001a9e:	f7fe fb93 	bl	80001c8 <strcmp>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <create_SBD_Session+0x5e>
		{
			break;
		}
		return -1;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	e007      	b.n	8001abe <create_SBD_Session+0x62>
	case 32:
		return -2;
 8001aae:	f06f 0301 	mvn.w	r3, #1
 8001ab2:	e004      	b.n	8001abe <create_SBD_Session+0x62>
	default:
		return -3;
 8001ab4:	f06f 0302 	mvn.w	r3, #2
 8001ab8:	e001      	b.n	8001abe <create_SBD_Session+0x62>
	case 0:
	case 1:
	case 2:
		if(strcmp((char*)temp_buff,"OK") == 0)
		{
			break;
 8001aba:	bf00      	nop
	case 32:
		return -2;
	default:
		return -3;
	}
	return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000c84 	.word	0x20000c84
 8001acc:	080027a8 	.word	0x080027a8
 8001ad0:	200000bc 	.word	0x200000bc
 8001ad4:	080027a4 	.word	0x080027a4
 8001ad8:	200000c8 	.word	0x200000c8

08001adc <get_status>:

void get_status(char* cmd)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	77fb      	strb	r3, [r7, #31]

	for(int j = 0; j < 6; j++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	e05d      	b.n	8001baa <get_status+0xce>
	{
		uint8_t numcount =0 ;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]
		uint len = strlen(cmd);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe fb72 	bl	80001dc <strlen>
 8001af8:	60f8      	str	r0, [r7, #12]
		while(cmd[count] != ',')
 8001afa:	e015      	b.n	8001b28 <get_status+0x4c>
		{
			if((count) == len)
 8001afc:	7ffa      	ldrb	r2, [r7, #31]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d018      	beq.n	8001b36 <get_status+0x5a>
			{
				break;
			}
			if(cmd[count] >= '0' && cmd[count] <= '9')
 8001b04:	7ffb      	ldrb	r3, [r7, #31]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b2f      	cmp	r3, #47	; 0x2f
 8001b0e:	d908      	bls.n	8001b22 <get_status+0x46>
 8001b10:	7ffb      	ldrb	r3, [r7, #31]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b39      	cmp	r3, #57	; 0x39
 8001b1a:	d802      	bhi.n	8001b22 <get_status+0x46>
			{
				numcount++;
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
			}

			count++;
 8001b22:	7ffb      	ldrb	r3, [r7, #31]
 8001b24:	3301      	adds	r3, #1
 8001b26:	77fb      	strb	r3, [r7, #31]

	for(int j = 0; j < 6; j++)
	{
		uint8_t numcount =0 ;
		uint len = strlen(cmd);
		while(cmd[count] != ',')
 8001b28:	7ffb      	ldrb	r3, [r7, #31]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b2c      	cmp	r3, #44	; 0x2c
 8001b32:	d1e3      	bne.n	8001afc <get_status+0x20>
 8001b34:	e000      	b.n	8001b38 <get_status+0x5c>
		{
			if((count) == len)
			{
				break;
 8001b36:	bf00      	nop
			}

			count++;
		}
		//combine numbers
		int16_t temp = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	82bb      	strh	r3, [r7, #20]

		for (int i = 0; i < numcount; ++i)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	e024      	b.n	8001b8c <get_status+0xb0>
		{
			temp = temp*10+ (cmd[count -numcount+i ]-48);
 8001b42:	8abb      	ldrh	r3, [r7, #20]
 8001b44:	461a      	mov	r2, r3
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	7ff9      	ldrb	r1, [r7, #31]
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	1ac9      	subs	r1, r1, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	440b      	add	r3, r1
 8001b58:	4619      	mov	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	440b      	add	r3, r1
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b30      	subs	r3, #48	; 0x30
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	82bb      	strh	r3, [r7, #20]
			if (cmd[count-numcount -1] == '-')
 8001b6c:	7ffa      	ldrb	r2, [r7, #31]
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b2d      	cmp	r3, #45	; 0x2d
 8001b7c:	d103      	bne.n	8001b86 <get_status+0xaa>
			{
				temp = temp*(-1);
 8001b7e:	8abb      	ldrh	r3, [r7, #20]
 8001b80:	425b      	negs	r3, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	82bb      	strh	r3, [r7, #20]
			count++;
		}
		//combine numbers
		int16_t temp = 0;

		for (int i = 0; i < numcount; ++i)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	7dfa      	ldrb	r2, [r7, #23]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dcd6      	bgt.n	8001b42 <get_status+0x66>
			if (cmd[count-numcount -1] == '-')
			{
				temp = temp*(-1);
			}
		}
		SBDIX_status[j] = temp;
 8001b94:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <get_status+0xdc>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	8aba      	ldrh	r2, [r7, #20]
 8001b9a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		count++;
 8001b9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	77fb      	strb	r3, [r7, #31]

void get_status(char* cmd)
{
	uint8_t count = 0;

	for(int j = 0; j < 6; j++)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	dd9e      	ble.n	8001aee <get_status+0x12>
			}
		}
		SBDIX_status[j] = temp;
		count++;
	}
}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200000bc 	.word	0x200000bc

08001bbc <clear_Status>:

void clear_Status(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; ++i)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	e007      	b.n	8001bd8 <clear_Status+0x1c>
	{
		SBDIX_status[i] = 0;
 8001bc8:	4a08      	ldr	r2, [pc, #32]	; (8001bec <clear_Status+0x30>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
}

void clear_Status(void)
{
	for (int i = 0; i < 6; ++i)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	ddf4      	ble.n	8001bc8 <clear_Status+0xc>
	{
		SBDIX_status[i] = 0;
	}
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200000bc 	.word	0x200000bc

08001bf0 <get_AT_response>:
/*
 * Retrieve the Iridium response only from Rx buffer
 */
char* get_AT_response(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
	//clear flag
	char* tmp = (char*)Iridium_Rx_Buff;
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <get_AT_response+0x98>)
 8001bf8:	607b      	str	r3, [r7, #4]
	if(status_Received== 1)
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <get_AT_response+0x9c>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10c      	bne.n	8001c1c <get_AT_response+0x2c>
	{
		//get transmission status
		tmp+=2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3302      	adds	r3, #2
 8001c06:	607b      	str	r3, [r7, #4]
		bin_message_received = *tmp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <get_AT_response+0xa0>)
 8001c0e:	701a      	strb	r2, [r3, #0]
		status_Received = 0;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <get_AT_response+0x9c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
		tmp+=2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3302      	adds	r3, #2
 8001c1a:	607b      	str	r3, [r7, #4]
	}
	tmp = strtok((char*)Iridium_Rx_Buff,"\r\n");
 8001c1c:	491d      	ldr	r1, [pc, #116]	; (8001c94 <get_AT_response+0xa4>)
 8001c1e:	481a      	ldr	r0, [pc, #104]	; (8001c88 <get_AT_response+0x98>)
 8001c20:	f000 fd44 	bl	80026ac <strtok>
 8001c24:	6078      	str	r0, [r7, #4]
	if(strlen(tmp) == 0)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <get_AT_response+0x42>
	{
		return NULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e026      	b.n	8001c80 <get_AT_response+0x90>
	}
	if(session_flag == 1)
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <get_AT_response+0xa8>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10f      	bne.n	8001c5a <get_AT_response+0x6a>
	{
		//SBD session: update status buffer
		clear_Status();
 8001c3a:	f7ff ffbf 	bl	8001bbc <clear_Status>
		char* msg = strtok(NULL,"\r\n");
 8001c3e:	4915      	ldr	r1, [pc, #84]	; (8001c94 <get_AT_response+0xa4>)
 8001c40:	2000      	movs	r0, #0
 8001c42:	f000 fd33 	bl	80026ac <strtok>
 8001c46:	6038      	str	r0, [r7, #0]
		get_status(tmp);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff47 	bl	8001adc <get_status>
		tmp = msg;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	607b      	str	r3, [r7, #4]
		session_flag = 0;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <get_AT_response+0xa8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	e004      	b.n	8001c64 <get_AT_response+0x74>
	}else
	{
		tmp = strtok(NULL,"\r\n");
 8001c5a:	490e      	ldr	r1, [pc, #56]	; (8001c94 <get_AT_response+0xa4>)
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f000 fd25 	bl	80026ac <strtok>
 8001c62:	6078      	str	r0, [r7, #4]
	}
	init_message_buff();
 8001c64:	f000 f81c 	bl	8001ca0 <init_message_buff>
	memcpy(temp_buff,tmp,strlen(tmp));
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7fe fab7 	bl	80001dc <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4809      	ldr	r0, [pc, #36]	; (8001c9c <get_AT_response+0xac>)
 8001c76:	f000 fc9f 	bl	80025b8 <memcpy>
	init_Rx_Buff();
 8001c7a:	f7ff fe77 	bl	800196c <init_Rx_Buff>
	return temp_buff;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <get_AT_response+0xac>)
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000089c 	.word	0x2000089c
 8001c8c:	200004b1 	.word	0x200004b1
 8001c90:	200004b3 	.word	0x200004b3
 8001c94:	080027b4 	.word	0x080027b4
 8001c98:	20000c84 	.word	0x20000c84
 8001c9c:	200000c8 	.word	0x200000c8

08001ca0 <init_message_buff>:

void init_message_buff()
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
	for (int i = 0; i < Iridium_message_Buffsize; ++i)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	e00c      	b.n	8001cc6 <init_message_buff+0x26>
	{
		message_buff[i] = 0;
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <init_message_buff+0x3c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
		temp_buff[i] =0;
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <init_message_buff+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
	return temp_buff;
}

void init_message_buff()
{
	for (int i = 0; i < Iridium_message_Buffsize; ++i)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ccc:	dbee      	blt.n	8001cac <init_message_buff+0xc>
	{
		message_buff[i] = 0;
		temp_buff[i] =0;
	}
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	200004b4 	.word	0x200004b4
 8001ce0:	200000c8 	.word	0x200000c8

08001ce4 <send_ATcmd>:
/*
 * Sends an AT command over USART
 * returns the response
 */
int8_t send_ATcmd(char* cmd,uint32_t delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
	transmit_Data(cmd,strlen(cmd));
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fa74 	bl	80001dc <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fe57 	bl	80019ac <transmit_Data>
	//timeout after 60 seconds of no activity
	Delay_begin_Timeout(delay);
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f7ff fbe4 	bl	80014cc <Delay_begin_Timeout>
	while((IR_Rx_done != 1))
 8001d04:	e009      	b.n	8001d1a <send_ATcmd+0x36>
	{
		if(timeout)
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <send_ATcmd+0x50>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <send_ATcmd+0x36>
		{
			timeout= 0;
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <send_ATcmd+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
			//Disable Interrupt
			return -2;
 8001d14:	f06f 0301 	mvn.w	r3, #1
 8001d18:	e007      	b.n	8001d2a <send_ATcmd+0x46>
int8_t send_ATcmd(char* cmd,uint32_t delay)
{
	transmit_Data(cmd,strlen(cmd));
	//timeout after 60 seconds of no activity
	Delay_begin_Timeout(delay);
	while((IR_Rx_done != 1))
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <send_ATcmd+0x54>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d1f1      	bne.n	8001d06 <send_ATcmd+0x22>
			timeout= 0;
			//Disable Interrupt
			return -2;
		}
	}
	IR_Rx_done = 0;
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <send_ATcmd+0x54>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
	return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000b0 	.word	0x200000b0
 8001d38:	200004b2 	.word	0x200004b2

08001d3c <send_Binary_Message>:
	free(atarr);
	return 0;
}

uint8_t send_Binary_Message(uint8_t *msg, uint16_t size)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]

	/* Set Flow control off*/
	int8_t flag = send_ATcmd("AT&K0\r",1000);
 8001d48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d4c:	4842      	ldr	r0, [pc, #264]	; (8001e58 <send_Binary_Message+0x11c>)
 8001d4e:	f7ff ffc9 	bl	8001ce4 <send_ATcmd>
 8001d52:	4603      	mov	r3, r0
 8001d54:	76bb      	strb	r3, [r7, #26]
	if(flag != 0)
 8001d56:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <send_Binary_Message+0x26>
	{
		//Timeout
		return -2;
 8001d5e:	23fe      	movs	r3, #254	; 0xfe
 8001d60:	e075      	b.n	8001e4e <send_Binary_Message+0x112>
	}else
	{
		if(strcmp((char*)temp_buff,"OK") != 0)
 8001d62:	493e      	ldr	r1, [pc, #248]	; (8001e5c <send_Binary_Message+0x120>)
 8001d64:	483e      	ldr	r0, [pc, #248]	; (8001e60 <send_Binary_Message+0x124>)
 8001d66:	f7fe fa2f 	bl	80001c8 <strcmp>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <send_Binary_Message+0x38>
		{
			//Error message
			return -3;
 8001d70:	23fd      	movs	r3, #253	; 0xfd
 8001d72:	e06c      	b.n	8001e4e <send_Binary_Message+0x112>
		}
	}
	/* Tell Iridium data is binary*/
	char atarr [12];
	sprintf(atarr,"AT+SBDWB=%d\r",size);
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	493a      	ldr	r1, [pc, #232]	; (8001e64 <send_Binary_Message+0x128>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fbd7 	bl	8002530 <siprintf>
	send_ATcmd(atarr,1000);
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ffaa 	bl	8001ce4 <send_ATcmd>
	//check for ready message
	char* imsg= (char*)temp_buff;
 8001d90:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <send_Binary_Message+0x124>)
 8001d92:	61fb      	str	r3, [r7, #28]
	imsg = strtok((char*)temp_buff,"\r\n");
 8001d94:	4934      	ldr	r1, [pc, #208]	; (8001e68 <send_Binary_Message+0x12c>)
 8001d96:	4832      	ldr	r0, [pc, #200]	; (8001e60 <send_Binary_Message+0x124>)
 8001d98:	f000 fc88 	bl	80026ac <strtok>
 8001d9c:	61f8      	str	r0, [r7, #28]
	uint8_t msg_ready = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	76fb      	strb	r3, [r7, #27]
	while(imsg != NULL)
 8001da2:	e00e      	b.n	8001dc2 <send_Binary_Message+0x86>
	{
		if(strcmp((char*)msg,"READY"))
 8001da4:	4931      	ldr	r1, [pc, #196]	; (8001e6c <send_Binary_Message+0x130>)
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe fa0e 	bl	80001c8 <strcmp>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <send_Binary_Message+0x7c>
		{
			msg_ready = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	76fb      	strb	r3, [r7, #27]
			break;
 8001db6:	e007      	b.n	8001dc8 <send_Binary_Message+0x8c>
		}
		imsg = strtok(NULL,"\r\n");
 8001db8:	492b      	ldr	r1, [pc, #172]	; (8001e68 <send_Binary_Message+0x12c>)
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 fc76 	bl	80026ac <strtok>
 8001dc0:	61f8      	str	r0, [r7, #28]
	send_ATcmd(atarr,1000);
	//check for ready message
	char* imsg= (char*)temp_buff;
	imsg = strtok((char*)temp_buff,"\r\n");
	uint8_t msg_ready = 0;
	while(imsg != NULL)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ed      	bne.n	8001da4 <send_Binary_Message+0x68>
			msg_ready = 1;
			break;
		}
		imsg = strtok(NULL,"\r\n");
	}
	if(!msg_ready)
 8001dc8:	7efb      	ldrb	r3, [r7, #27]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <send_Binary_Message+0x96>
	{
		return -3;
 8001dce:	23fd      	movs	r3, #253	; 0xfd
 8001dd0:	e03d      	b.n	8001e4e <send_Binary_Message+0x112>
	}

	/* create message string*/
	uint16_t temp = calculate_checkSum(msg,size);
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f84f 	bl	8001e7c <calculate_checkSum>
 8001dde:	4603      	mov	r3, r0
 8001de0:	833b      	strh	r3, [r7, #24]
	uint8_t check_sum[3]  = {(uint8_t)(temp&0xFF00),(uint8_t)temp&0xFF,0x0d};
 8001de2:	2300      	movs	r3, #0
 8001de4:	723b      	strb	r3, [r7, #8]
 8001de6:	8b3b      	ldrh	r3, [r7, #24]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	727b      	strb	r3, [r7, #9]
 8001dec:	230d      	movs	r3, #13
 8001dee:	72bb      	strb	r3, [r7, #10]
	//transmit message
	transmit_bin_Data(msg,size);
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fe0b 	bl	8001a10 <transmit_bin_Data>
	transmit_bin_Data(check_sum,3);
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2103      	movs	r1, #3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fe05 	bl	8001a10 <transmit_bin_Data>
	//wait for response
	status_Received = 1;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <send_Binary_Message+0x134>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
	while(IR_Rx_done != 1);
 8001e0c:	bf00      	nop
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <send_Binary_Message+0x138>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d1fb      	bne.n	8001e0e <send_Binary_Message+0xd2>
	IR_Rx_done= 0;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <send_Binary_Message+0x138>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
	switch ((bin_message_received-48)) {
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <send_Binary_Message+0x13c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3b30      	subs	r3, #48	; 0x30
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d00d      	beq.n	8001e42 <send_Binary_Message+0x106>
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d00d      	beq.n	8001e46 <send_Binary_Message+0x10a>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d000      	beq.n	8001e30 <send_Binary_Message+0xf4>
			return -1;
		case 2:
			//invalid checksum
			return -4;
		default:
			break;
 8001e2e:	e00d      	b.n	8001e4c <send_Binary_Message+0x110>
	while(IR_Rx_done != 1);
	IR_Rx_done= 0;
	switch ((bin_message_received-48)) {
		case 0:
			//check if status ok
			if(strcmp((char*)temp_buff,"OK") != 0)
 8001e30:	490a      	ldr	r1, [pc, #40]	; (8001e5c <send_Binary_Message+0x120>)
 8001e32:	480b      	ldr	r0, [pc, #44]	; (8001e60 <send_Binary_Message+0x124>)
 8001e34:	f7fe f9c8 	bl	80001c8 <strcmp>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <send_Binary_Message+0x10e>
			{
				return -3;
 8001e3e:	23fd      	movs	r3, #253	; 0xfd
 8001e40:	e005      	b.n	8001e4e <send_Binary_Message+0x112>
			}
			break;
		case 1:
			//timeout
			return -1;
 8001e42:	23ff      	movs	r3, #255	; 0xff
 8001e44:	e003      	b.n	8001e4e <send_Binary_Message+0x112>
		case 2:
			//invalid checksum
			return -4;
 8001e46:	23fc      	movs	r3, #252	; 0xfc
 8001e48:	e001      	b.n	8001e4e <send_Binary_Message+0x112>
			//check if status ok
			if(strcmp((char*)temp_buff,"OK") != 0)
			{
				return -3;
			}
			break;
 8001e4a:	bf00      	nop
			return -4;
		default:
			break;
	}
	//begin SBDIX session
	return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	080027b8 	.word	0x080027b8
 8001e5c:	080027a4 	.word	0x080027a4
 8001e60:	200000c8 	.word	0x200000c8
 8001e64:	080027d4 	.word	0x080027d4
 8001e68:	080027b4 	.word	0x080027b4
 8001e6c:	080027e4 	.word	0x080027e4
 8001e70:	200004b1 	.word	0x200004b1
 8001e74:	200004b2 	.word	0x200004b2
 8001e78:	200004b3 	.word	0x200004b3

08001e7c <calculate_checkSum>:

uint16_t calculate_checkSum(uint8_t* messagebuff, uint8_t size)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
	size_t sum = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; ++i)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	e00a      	b.n	8001ea8 <calculate_checkSum+0x2c>
	{
		sum+= messagebuff[i];
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
}

uint16_t calculate_checkSum(uint8_t* messagebuff, uint8_t size)
{
	size_t sum = 0;
	for (int i = 0; i < size; ++i)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dcf0      	bgt.n	8001e92 <calculate_checkSum+0x16>
	{
		sum+= messagebuff[i];
	}
	//return last 16 bits
	return (uint16_t)(sum & 0xFFFF);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	b29b      	uxth	r3, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <USART3_IRQHandler>:

//==========================================================================
/** IRQ HANDLERS **/
void Iridium_USART_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
	//TODO: USART pin handler
	if (USART_GetFlagStatus(Iridium_USART,USART_FLAG_IDLE) != RESET)
 8001ec6:	2110      	movs	r1, #16
 8001ec8:	4810      	ldr	r0, [pc, #64]	; (8001f0c <USART3_IRQHandler+0x4c>)
 8001eca:	f7ff f9f5 	bl	80012b8 <USART_GetFlagStatus>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d017      	beq.n	8001f04 <USART3_IRQHandler+0x44>
	{
		/* Clear USART registers */
		volatile uint32_t tmp;
		tmp = USART_GetITStatus(Iridium_USART, USART_IT_IDLE);
 8001ed4:	f240 4124 	movw	r1, #1060	; 0x424
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <USART3_IRQHandler+0x4c>)
 8001eda:	f7ff fa09 	bl	80012f0 <USART_GetITStatus>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	607b      	str	r3, [r7, #4]
		tmp = USART_ReceiveData(Iridium_USART);
 8001ee2:	480a      	ldr	r0, [pc, #40]	; (8001f0c <USART3_IRQHandler+0x4c>)
 8001ee4:	f7ff f96c 	bl	80011c0 <USART_ReceiveData>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	607b      	str	r3, [r7, #4]
		(void)tmp;
 8001eec:	687b      	ldr	r3, [r7, #4]
		/* Disable DMA RX Stream */
		DMA_Cmd(Iridium_DMA_RX_Stream, DISABLE);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4807      	ldr	r0, [pc, #28]	; (8001f10 <USART3_IRQHandler+0x50>)
 8001ef2:	f7fe fb09 	bl	8000508 <DMA_Cmd>
		while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != DISABLE) { ; }
 8001ef6:	bf00      	nop
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <USART3_IRQHandler+0x50>)
 8001efa:	f7fe fb2f 	bl	800055c <DMA_GetCmdStatus>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f9      	bne.n	8001ef8 <USART3_IRQHandler+0x38>
	}
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40004800 	.word	0x40004800
 8001f10:	40026028 	.word	0x40026028

08001f14 <DMA1_Stream1_IRQHandler>:

#ifdef IRIDIUM_Periph_Use_DMA
void DMA_USART_RX_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	/* Test on DMA Stream Transfer Complete interrupt */
		if (DMA_GetFlagStatus(Iridium_DMA_RX_Stream, DMA_FLAG_TCIF1) != RESET)
 8001f18:	4910      	ldr	r1, [pc, #64]	; (8001f5c <DMA1_Stream1_IRQHandler+0x48>)
 8001f1a:	4811      	ldr	r0, [pc, #68]	; (8001f60 <DMA1_Stream1_IRQHandler+0x4c>)
 8001f1c:	f7fe fb36 	bl	800058c <DMA_GetFlagStatus>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d017      	beq.n	8001f56 <DMA1_Stream1_IRQHandler+0x42>
		{
			Iridium_data_length = Iridium_RX_Buffsize - DMA_GetCurrDataCounter(Iridium_DMA_RX_Stream);
 8001f26:	480e      	ldr	r0, [pc, #56]	; (8001f60 <DMA1_Stream1_IRQHandler+0x4c>)
 8001f28:	f7fe fb0a 	bl	8000540 <DMA_GetCurrDataCounter>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <DMA1_Stream1_IRQHandler+0x50>)
 8001f36:	601a      	str	r2, [r3, #0]

			/* Clear DMA Stream Transfer Complete interrupt pending bit */
			DMA_ClearITPendingBit(Iridium_DMA_RX_Stream, DMA_IT_TCIF1);
 8001f38:	490b      	ldr	r1, [pc, #44]	; (8001f68 <DMA1_Stream1_IRQHandler+0x54>)
 8001f3a:	4809      	ldr	r0, [pc, #36]	; (8001f60 <DMA1_Stream1_IRQHandler+0x4c>)
 8001f3c:	f7fe fb9c 	bl	8000678 <DMA_ClearITPendingBit>

			/* Enable DMA transfer */
			#ifdef IRIDIUM_MEM_Use_DMA
			DMA_Cmd(Iridium_DMA_MEM_Stream, ENABLE);
 8001f40:	2101      	movs	r1, #1
 8001f42:	480a      	ldr	r0, [pc, #40]	; (8001f6c <DMA1_Stream1_IRQHandler+0x58>)
 8001f44:	f7fe fae0 	bl	8000508 <DMA_Cmd>
			while (DMA_GetCmdStatus(Iridium_DMA_MEM_Stream ) != ENABLE) { ; }
 8001f48:	bf00      	nop
 8001f4a:	4808      	ldr	r0, [pc, #32]	; (8001f6c <DMA1_Stream1_IRQHandler+0x58>)
 8001f4c:	f7fe fb06 	bl	800055c <DMA_GetCmdStatus>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d1f9      	bne.n	8001f4a <DMA1_Stream1_IRQHandler+0x36>
			#else
			DMA_Cmd(Iridium_DMA_RX_Stream, ENABLE);
			while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != ENABLE) { ; }
			#endif
		}
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	10000800 	.word	0x10000800
 8001f60:	40026028 	.word	0x40026028
 8001f64:	20000c88 	.word	0x20000c88
 8001f68:	10008800 	.word	0x10008800
 8001f6c:	40026410 	.word	0x40026410

08001f70 <DMA2_Stream0_IRQHandler>:
#endif

#ifdef IRIDIUM_MEM_Use_DMA
void DMA_USART_MEM_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	if (DMA_GetFlagStatus(Iridium_DMA_MEM_Stream, DMA_FLAG_TCIF0) != RESET)
 8001f74:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <DMA2_Stream0_IRQHandler+0x60>)
 8001f76:	4817      	ldr	r0, [pc, #92]	; (8001fd4 <DMA2_Stream0_IRQHandler+0x64>)
 8001f78:	f7fe fb08 	bl	800058c <DMA_GetFlagStatus>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d023      	beq.n	8001fca <DMA2_Stream0_IRQHandler+0x5a>
		{

			//set flag

			if(session_flag)
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <DMA2_Stream0_IRQHandler+0x68>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <DMA2_Stream0_IRQHandler+0x32>
			{
				if(strlen((char*)Iridium_Rx_Buff)> 9)
 8001f8a:	4814      	ldr	r0, [pc, #80]	; (8001fdc <DMA2_Stream0_IRQHandler+0x6c>)
 8001f8c:	f7fe f926 	bl	80001dc <strlen>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d90a      	bls.n	8001fac <DMA2_Stream0_IRQHandler+0x3c>
				{
					IR_Rx_done = 1;
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <DMA2_Stream0_IRQHandler+0x70>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
					//Get Message
					get_AT_response();
 8001f9c:	f7ff fe28 	bl	8001bf0 <get_AT_response>
 8001fa0:	e004      	b.n	8001fac <DMA2_Stream0_IRQHandler+0x3c>
				}
			}else
			{
				IR_Rx_done = 1;
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <DMA2_Stream0_IRQHandler+0x70>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
				//Get Message
				get_AT_response();
 8001fa8:	f7ff fe22 	bl	8001bf0 <get_AT_response>
			}
			/* Enable DMA transfer */
			DMA_Cmd(Iridium_DMA_RX_Stream, ENABLE);
 8001fac:	2101      	movs	r1, #1
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <DMA2_Stream0_IRQHandler+0x74>)
 8001fb0:	f7fe faaa 	bl	8000508 <DMA_Cmd>
			while (DMA_GetCmdStatus(Iridium_DMA_RX_Stream) != ENABLE) { ; }
 8001fb4:	bf00      	nop
 8001fb6:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <DMA2_Stream0_IRQHandler+0x74>)
 8001fb8:	f7fe fad0 	bl	800055c <DMA_GetCmdStatus>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d1f9      	bne.n	8001fb6 <DMA2_Stream0_IRQHandler+0x46>
			/* Clear DMA Stream Transfer Complete interrupt pending bit */
			DMA_ClearITPendingBit(Iridium_DMA_MEM_Stream, DMA_IT_TCIF0);
 8001fc2:	4909      	ldr	r1, [pc, #36]	; (8001fe8 <DMA2_Stream0_IRQHandler+0x78>)
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <DMA2_Stream0_IRQHandler+0x64>)
 8001fc6:	f7fe fb57 	bl	8000678 <DMA_ClearITPendingBit>
		}
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	10000020 	.word	0x10000020
 8001fd4:	40026410 	.word	0x40026410
 8001fd8:	20000c84 	.word	0x20000c84
 8001fdc:	2000089c 	.word	0x2000089c
 8001fe0:	200004b2 	.word	0x200004b2
 8001fe4:	40026028 	.word	0x40026028
 8001fe8:	10008020 	.word	0x10008020

08001fec <EXTI0_IRQHandler>:
#endif

void   EXTI0_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7fe fbe0 	bl	80007b8 <EXTI_GetITStatus>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d014      	beq.n	8002028 <EXTI0_IRQHandler+0x3c>
	{
		//check flag
		if(Wait_for_network)
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <EXTI0_IRQHandler+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <EXTI0_IRQHandler+0x36>
		{
			int8_t flag = create_SBD_Session();
 8002006:	f7ff fd29 	bl	8001a5c <create_SBD_Session>
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
			if(flag == 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <EXTI0_IRQHandler+0x36>
			{
				STM_EVAL_LEDOn(LED3);
 8002016:	2001      	movs	r0, #1
 8002018:	f7ff f9f4 	bl	8001404 <STM_EVAL_LEDOn>
				NVIC_DisableIRQ(EXTI0_IRQn);
 800201c:	2006      	movs	r0, #6
 800201e:	f7ff fab9 	bl	8001594 <NVIC_DisableIRQ>
			}

		}
		EXTI_ClearITPendingBit(EXTI_Line0);
 8002022:	2001      	movs	r0, #1
 8002024:	f7fe fbec 	bl	8000800 <EXTI_ClearITPendingBit>
	}
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200004b0 	.word	0x200004b0

08002034 <main>:
**
**===========================================================================
*/

int main(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */

	STM_EVAL_LEDInit(LED3);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff f9b4 	bl	80013a8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff f9b1 	bl	80013a8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 8002046:	2002      	movs	r0, #2
 8002048:	f7ff f9ae 	bl	80013a8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 800204c:	2003      	movs	r0, #3
 800204e:	f7ff f9ab 	bl	80013a8 <STM_EVAL_LEDInit>

	init_Delay();
 8002052:	f7ff fa0d 	bl	8001470 <init_Delay>
	test3();
 8002056:	f000 f81d 	bl	8002094 <test3>

	while(1)
	{
		if(Wait_for_network)
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <main+0x58>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0fb      	beq.n	800205a <main+0x26>
		{
			uint8_t flag = GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0);
 8002062:	2101      	movs	r1, #1
 8002064:	480a      	ldr	r0, [pc, #40]	; (8002090 <main+0x5c>)
 8002066:	f7fe fc69 	bl	800093c <GPIO_ReadInputDataBit>
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
			if(flag == 1)
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d1f2      	bne.n	800205a <main+0x26>
			{
				if(create_SBD_Session() == 0)
 8002074:	f7ff fcf2 	bl	8001a5c <create_SBD_Session>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1ed      	bne.n	800205a <main+0x26>
				{
					STM_EVAL_LEDOn(LED3);
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff f9c0 	bl	8001404 <STM_EVAL_LEDOn>
					Wait_for_network = 0;
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <main+0x58>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
 800208a:	e7e6      	b.n	800205a <main+0x26>
 800208c:	200004b0 	.word	0x200004b0
 8002090:	40020400 	.word	0x40020400

08002094 <test3>:
									}
								}
}

void test3(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
	int flag;
	int i = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
	for (; i < 256; ++i)
 800209e:	e01f      	b.n	80020e0 <test3+0x4c>
		{
			flag = init_Iridium_Module();
 80020a0:	f7ff fc14 	bl	80018cc <init_Iridium_Module>
 80020a4:	4603      	mov	r3, r0
 80020a6:	60bb      	str	r3, [r7, #8]
			if(flag == 0)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <test3+0x22>
			{
				STM_EVAL_LEDOn(LED6);
 80020ae:	2003      	movs	r0, #3
 80020b0:	f7ff f9a8 	bl	8001404 <STM_EVAL_LEDOn>
				break;
 80020b4:	e017      	b.n	80020e6 <test3+0x52>
			}
			if(flag == -1)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d104      	bne.n	80020c8 <test3+0x34>
			{
				STM_EVAL_LEDToggle(LED5);
 80020be:	2002      	movs	r0, #2
 80020c0:	f7ff f9b8 	bl	8001434 <STM_EVAL_LEDToggle>
				deinit_Iridium_Module();
 80020c4:	f7ff fc28 	bl	8001918 <deinit_Iridium_Module>
			}
				//10 seconds delay
			Delay_begin_Timeout(10000);
 80020c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80020cc:	f7ff f9fe 	bl	80014cc <Delay_begin_Timeout>
			while(!timeout);
 80020d0:	bf00      	nop
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <test3+0xa4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0fb      	beq.n	80020d2 <test3+0x3e>

void test3(void)
{
	int flag;
	int i = 0;
	for (; i < 256; ++i)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3301      	adds	r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2bff      	cmp	r3, #255	; 0xff
 80020e4:	dddc      	ble.n	80020a0 <test3+0xc>
				//10 seconds delay
			Delay_begin_Timeout(10000);
			while(!timeout);

		}
		uint8_t message[] = {25,16,23,53};
 80020e6:	4a15      	ldr	r2, [pc, #84]	; (800213c <test3+0xa8>)
 80020e8:	463b      	mov	r3, r7
 80020ea:	6810      	ldr	r0, [r2, #0]
 80020ec:	6018      	str	r0, [r3, #0]
		if(send_Binary_Message(message,length(message))== 0)
 80020ee:	463b      	mov	r3, r7
 80020f0:	2104      	movs	r1, #4
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe22 	bl	8001d3c <send_Binary_Message>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d117      	bne.n	800212e <test3+0x9a>
		{
			Delay_begin_Timeout(3000);
 80020fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002102:	f7ff f9e3 	bl	80014cc <Delay_begin_Timeout>
			while(!timeout);
 8002106:	bf00      	nop
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <test3+0xa4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0fb      	beq.n	8002108 <test3+0x74>
			STM_EVAL_LEDOn(LED4);
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff f977 	bl	8001404 <STM_EVAL_LEDOn>
			int8_t flag = create_SBD_Session();
 8002116:	f7ff fca1 	bl	8001a5c <create_SBD_Session>
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
			if(flag == -2)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	f113 0f02 	cmn.w	r3, #2
 8002126:	d102      	bne.n	800212e <test3+0x9a>
			{
				Wait_for_network = 1;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <test3+0xac>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
			}
		}
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200000b0 	.word	0x200000b0
 800213c:	08002874 	.word	0x08002874
 8002140:	200004b0 	.word	0x200004b0

08002144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800217c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002148:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800214a:	e003      	b.n	8002154 <LoopCopyDataInit>

0800214c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800214e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002150:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002152:	3104      	adds	r1, #4

08002154 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002154:	480b      	ldr	r0, [pc, #44]	; (8002184 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002158:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800215a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800215c:	d3f6      	bcc.n	800214c <CopyDataInit>
  ldr  r2, =_sbss
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002160:	e002      	b.n	8002168 <LoopFillZerobss>

08002162 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002162:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002164:	f842 3b04 	str.w	r3, [r2], #4

08002168 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800216a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800216c:	d3f9      	bcc.n	8002162 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800216e:	f000 f84b 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002172:	f000 f9f3 	bl	800255c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002176:	f7ff ff5d 	bl	8002034 <main>
  bx  lr    
 800217a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800217c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002180:	0800289c 	.word	0x0800289c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002184:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002188:	20000084 	.word	0x20000084
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800218c:	20000084 	.word	0x20000084
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002190:	20000c90 	.word	0x20000c90

08002194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002194:	e7fe      	b.n	8002194 <ADC_IRQHandler>
	...

08002198 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop

080021a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80021ac:	e7fe      	b.n	80021ac <HardFault_Handler+0x4>
 80021ae:	bf00      	nop

080021b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80021b4:	e7fe      	b.n	80021b4 <MemManage_Handler+0x4>
 80021b6:	bf00      	nop

080021b8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80021bc:	e7fe      	b.n	80021bc <BusFault_Handler+0x4>
 80021be:	bf00      	nop

080021c0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler+0x4>
 80021c6:	bf00      	nop

080021c8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop

080021d8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop

080021f8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800220c:	4a16      	ldr	r2, [pc, #88]	; (8002268 <SystemInit+0x60>)
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <SystemInit+0x60>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800221c:	4a13      	ldr	r2, [pc, #76]	; (800226c <SystemInit+0x64>)
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <SystemInit+0x64>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <SystemInit+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800222e:	4a0f      	ldr	r2, [pc, #60]	; (800226c <SystemInit+0x64>)
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <SystemInit+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <SystemInit+0x64>)
 8002240:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <SystemInit+0x68>)
 8002242:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002244:	4a09      	ldr	r2, [pc, #36]	; (800226c <SystemInit+0x64>)
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <SystemInit+0x64>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <SystemInit+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002256:	f000 f80d 	bl	8002274 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800225a:	4b03      	ldr	r3, [pc, #12]	; (8002268 <SystemInit+0x60>)
 800225c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002260:	609a      	str	r2, [r3, #8]
#endif
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00
 800226c:	40023800 	.word	0x40023800
 8002270:	24003010 	.word	0x24003010

08002274 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002282:	4a36      	ldr	r2, [pc, #216]	; (800235c <SetSysClock+0xe8>)
 8002284:	4b35      	ldr	r3, [pc, #212]	; (800235c <SetSysClock+0xe8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <SetSysClock+0xe8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <SetSysClock+0x38>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80022aa:	d1f0      	bne.n	800228e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <SetSysClock+0xe8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80022b8:	2301      	movs	r3, #1
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	e001      	b.n	80022c2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d142      	bne.n	800234e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80022c8:	4a24      	ldr	r2, [pc, #144]	; (800235c <SetSysClock+0xe8>)
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <SetSysClock+0xe8>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80022d4:	4a22      	ldr	r2, [pc, #136]	; (8002360 <SetSysClock+0xec>)
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <SetSysClock+0xec>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022de:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80022e0:	4a1e      	ldr	r2, [pc, #120]	; (800235c <SetSysClock+0xe8>)
 80022e2:	4b1e      	ldr	r3, [pc, #120]	; (800235c <SetSysClock+0xe8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80022e8:	4a1c      	ldr	r2, [pc, #112]	; (800235c <SetSysClock+0xe8>)
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <SetSysClock+0xe8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <SetSysClock+0xe8>)
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <SetSysClock+0xe8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80022fe:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <SetSysClock+0xe8>)
 8002302:	4a18      	ldr	r2, [pc, #96]	; (8002364 <SetSysClock+0xf0>)
 8002304:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002306:	4a15      	ldr	r2, [pc, #84]	; (800235c <SetSysClock+0xe8>)
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <SetSysClock+0xe8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002310:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002312:	bf00      	nop
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <SetSysClock+0xe8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f9      	beq.n	8002314 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <SetSysClock+0xf4>)
 8002322:	f240 6205 	movw	r2, #1541	; 0x605
 8002326:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002328:	4a0c      	ldr	r2, [pc, #48]	; (800235c <SetSysClock+0xe8>)
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <SetSysClock+0xe8>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002334:	4a09      	ldr	r2, [pc, #36]	; (800235c <SetSysClock+0xe8>)
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <SetSysClock+0xe8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f043 0302 	orr.w	r3, r3, #2
 800233e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002340:	bf00      	nop
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <SetSysClock+0xe8>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d1f9      	bne.n	8002342 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000
 8002364:	07405408 	.word	0x07405408
 8002368:	40023c00 	.word	0x40023c00

0800236c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
	int div = 1;
 8002378:	2301      	movs	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800237c:	e004      	b.n	8002388 <ts_itoa+0x1c>
		div *= base;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d2f3      	bcs.n	800237e <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 8002396:	e029      	b.n	80023ec <ts_itoa+0x80>
	{
		int num = d/div;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80023aa:	fb02 f201 	mul.w	r2, r2, r1
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b09      	cmp	r3, #9
 80023c0:	dd0a      	ble.n	80023d8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1c59      	adds	r1, r3, #1
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	6011      	str	r1, [r2, #0]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	3237      	adds	r2, #55	; 0x37
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e009      	b.n	80023ec <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1c59      	adds	r1, r3, #1
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	6011      	str	r1, [r2, #0]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	3230      	adds	r2, #48	; 0x30
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1d2      	bne.n	8002398 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop

08002400 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8002410:	e07d      	b.n	800250e <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b25      	cmp	r3, #37	; 0x25
 8002418:	d171      	bne.n	80024fe <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3301      	adds	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b64      	cmp	r3, #100	; 0x64
 8002426:	d01e      	beq.n	8002466 <ts_formatstring+0x66>
 8002428:	2b64      	cmp	r3, #100	; 0x64
 800242a:	dc06      	bgt.n	800243a <ts_formatstring+0x3a>
 800242c:	2b58      	cmp	r3, #88	; 0x58
 800242e:	d050      	beq.n	80024d2 <ts_formatstring+0xd2>
 8002430:	2b63      	cmp	r3, #99	; 0x63
 8002432:	d00e      	beq.n	8002452 <ts_formatstring+0x52>
 8002434:	2b25      	cmp	r3, #37	; 0x25
 8002436:	d058      	beq.n	80024ea <ts_formatstring+0xea>
 8002438:	e05d      	b.n	80024f6 <ts_formatstring+0xf6>
 800243a:	2b73      	cmp	r3, #115	; 0x73
 800243c:	d02b      	beq.n	8002496 <ts_formatstring+0x96>
 800243e:	2b73      	cmp	r3, #115	; 0x73
 8002440:	dc02      	bgt.n	8002448 <ts_formatstring+0x48>
 8002442:	2b69      	cmp	r3, #105	; 0x69
 8002444:	d00f      	beq.n	8002466 <ts_formatstring+0x66>
 8002446:	e056      	b.n	80024f6 <ts_formatstring+0xf6>
 8002448:	2b75      	cmp	r3, #117	; 0x75
 800244a:	d037      	beq.n	80024bc <ts_formatstring+0xbc>
 800244c:	2b78      	cmp	r3, #120	; 0x78
 800244e:	d040      	beq.n	80024d2 <ts_formatstring+0xd2>
 8002450:	e051      	b.n	80024f6 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	60fa      	str	r2, [r7, #12]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	1d11      	adds	r1, r2, #4
 800245c:	6079      	str	r1, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]
				break;
 8002464:	e047      	b.n	80024f6 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	1d1a      	adds	r2, r3, #4
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	da07      	bge.n	8002486 <ts_formatstring+0x86>
					{
						val *= -1;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	425b      	negs	r3, r3
 800247a:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	60fa      	str	r2, [r7, #12]
 8002482:	222d      	movs	r2, #45	; 0x2d
 8002484:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8002486:	69f9      	ldr	r1, [r7, #28]
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	220a      	movs	r2, #10
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff6c 	bl	800236c <ts_itoa>
				}
				break;
 8002494:	e02f      	b.n	80024f6 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	1d1a      	adds	r2, r3, #4
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80024a0:	e007      	b.n	80024b2 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	60fa      	str	r2, [r7, #12]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	1c51      	adds	r1, r2, #1
 80024ac:	61b9      	str	r1, [r7, #24]
 80024ae:	7812      	ldrb	r2, [r2, #0]
 80024b0:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f3      	bne.n	80024a2 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 80024ba:	e01c      	b.n	80024f6 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1d1a      	adds	r2, r3, #4
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	6819      	ldr	r1, [r3, #0]
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	220a      	movs	r2, #10
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff4e 	bl	800236c <ts_itoa>
				break;
 80024d0:	e011      	b.n	80024f6 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1d1a      	adds	r2, r3, #4
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	2210      	movs	r2, #16
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff42 	bl	800236c <ts_itoa>
				break;
 80024e8:	e005      	b.n	80024f6 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	60fa      	str	r2, [r7, #12]
 80024f0:	2225      	movs	r2, #37	; 0x25
 80024f2:	701a      	strb	r2, [r3, #0]
				  break;
 80024f4:	bf00      	nop
			}
			fmt++;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3301      	adds	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	e007      	b.n	800250e <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	60fa      	str	r2, [r7, #12]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	1c51      	adds	r1, r2, #1
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f47f af7d 	bne.w	8002412 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	461a      	mov	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	1ad3      	subs	r3, r2, r3
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop

08002530 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8002530:	b40e      	push	{r1, r2, r3}
 8002532:	b580      	push	{r7, lr}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800253a:	f107 0320 	add.w	r3, r7, #32
 800253e:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	69f9      	ldr	r1, [r7, #28]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff5b 	bl	8002400 <ts_formatstring>
 800254a:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800254c:	68fb      	ldr	r3, [r7, #12]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002558:	b003      	add	sp, #12
 800255a:	4770      	bx	lr

0800255c <__libc_init_array>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <__libc_init_array+0x3c>)
 8002560:	4c0e      	ldr	r4, [pc, #56]	; (800259c <__libc_init_array+0x40>)
 8002562:	1ae4      	subs	r4, r4, r3
 8002564:	10a4      	asrs	r4, r4, #2
 8002566:	2500      	movs	r5, #0
 8002568:	461e      	mov	r6, r3
 800256a:	42a5      	cmp	r5, r4
 800256c:	d004      	beq.n	8002578 <__libc_init_array+0x1c>
 800256e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002572:	4798      	blx	r3
 8002574:	3501      	adds	r5, #1
 8002576:	e7f8      	b.n	800256a <__libc_init_array+0xe>
 8002578:	f000 f906 	bl	8002788 <_init>
 800257c:	4c08      	ldr	r4, [pc, #32]	; (80025a0 <__libc_init_array+0x44>)
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <__libc_init_array+0x48>)
 8002580:	1ae4      	subs	r4, r4, r3
 8002582:	10a4      	asrs	r4, r4, #2
 8002584:	2500      	movs	r5, #0
 8002586:	461e      	mov	r6, r3
 8002588:	42a5      	cmp	r5, r4
 800258a:	d004      	beq.n	8002596 <__libc_init_array+0x3a>
 800258c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002590:	4798      	blx	r3
 8002592:	3501      	adds	r5, #1
 8002594:	e7f8      	b.n	8002588 <__libc_init_array+0x2c>
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	08002894 	.word	0x08002894
 800259c:	08002894 	.word	0x08002894
 80025a0:	08002898 	.word	0x08002898
 80025a4:	08002894 	.word	0x08002894

080025a8 <malloc>:
 80025a8:	4b02      	ldr	r3, [pc, #8]	; (80025b4 <malloc+0xc>)
 80025aa:	4601      	mov	r1, r0
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	f000 b80f 	b.w	80025d0 <_malloc_r>
 80025b2:	bf00      	nop
 80025b4:	20000080 	.word	0x20000080

080025b8 <memcpy>:
 80025b8:	b510      	push	{r4, lr}
 80025ba:	1e43      	subs	r3, r0, #1
 80025bc:	440a      	add	r2, r1
 80025be:	4291      	cmp	r1, r2
 80025c0:	d004      	beq.n	80025cc <memcpy+0x14>
 80025c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025ca:	e7f8      	b.n	80025be <memcpy+0x6>
 80025cc:	bd10      	pop	{r4, pc}
	...

080025d0 <_malloc_r>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	1ccd      	adds	r5, r1, #3
 80025d4:	f025 0503 	bic.w	r5, r5, #3
 80025d8:	3508      	adds	r5, #8
 80025da:	2d0c      	cmp	r5, #12
 80025dc:	bf38      	it	cc
 80025de:	250c      	movcc	r5, #12
 80025e0:	2d00      	cmp	r5, #0
 80025e2:	4606      	mov	r6, r0
 80025e4:	db01      	blt.n	80025ea <_malloc_r+0x1a>
 80025e6:	42a9      	cmp	r1, r5
 80025e8:	d902      	bls.n	80025f0 <_malloc_r+0x20>
 80025ea:	230c      	movs	r3, #12
 80025ec:	6033      	str	r3, [r6, #0]
 80025ee:	e046      	b.n	800267e <_malloc_r+0xae>
 80025f0:	f000 f8b9 	bl	8002766 <__malloc_lock>
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <_malloc_r+0xb4>)
 80025f6:	681c      	ldr	r4, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4621      	mov	r1, r4
 80025fc:	b1a1      	cbz	r1, 8002628 <_malloc_r+0x58>
 80025fe:	680b      	ldr	r3, [r1, #0]
 8002600:	1b5b      	subs	r3, r3, r5
 8002602:	d40e      	bmi.n	8002622 <_malloc_r+0x52>
 8002604:	2b0b      	cmp	r3, #11
 8002606:	d903      	bls.n	8002610 <_malloc_r+0x40>
 8002608:	600b      	str	r3, [r1, #0]
 800260a:	18cc      	adds	r4, r1, r3
 800260c:	50cd      	str	r5, [r1, r3]
 800260e:	e01e      	b.n	800264e <_malloc_r+0x7e>
 8002610:	428c      	cmp	r4, r1
 8002612:	bf0d      	iteet	eq
 8002614:	6863      	ldreq	r3, [r4, #4]
 8002616:	684b      	ldrne	r3, [r1, #4]
 8002618:	6063      	strne	r3, [r4, #4]
 800261a:	6013      	streq	r3, [r2, #0]
 800261c:	bf18      	it	ne
 800261e:	460c      	movne	r4, r1
 8002620:	e015      	b.n	800264e <_malloc_r+0x7e>
 8002622:	460c      	mov	r4, r1
 8002624:	6849      	ldr	r1, [r1, #4]
 8002626:	e7e9      	b.n	80025fc <_malloc_r+0x2c>
 8002628:	4c17      	ldr	r4, [pc, #92]	; (8002688 <_malloc_r+0xb8>)
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	b91b      	cbnz	r3, 8002636 <_malloc_r+0x66>
 800262e:	4630      	mov	r0, r6
 8002630:	f000 f82c 	bl	800268c <_sbrk_r>
 8002634:	6020      	str	r0, [r4, #0]
 8002636:	4629      	mov	r1, r5
 8002638:	4630      	mov	r0, r6
 800263a:	f000 f827 	bl	800268c <_sbrk_r>
 800263e:	1c43      	adds	r3, r0, #1
 8002640:	d018      	beq.n	8002674 <_malloc_r+0xa4>
 8002642:	1cc4      	adds	r4, r0, #3
 8002644:	f024 0403 	bic.w	r4, r4, #3
 8002648:	42a0      	cmp	r0, r4
 800264a:	d10d      	bne.n	8002668 <_malloc_r+0x98>
 800264c:	6025      	str	r5, [r4, #0]
 800264e:	4630      	mov	r0, r6
 8002650:	f000 f88a 	bl	8002768 <__malloc_unlock>
 8002654:	f104 000b 	add.w	r0, r4, #11
 8002658:	1d23      	adds	r3, r4, #4
 800265a:	f020 0007 	bic.w	r0, r0, #7
 800265e:	1ac3      	subs	r3, r0, r3
 8002660:	d00e      	beq.n	8002680 <_malloc_r+0xb0>
 8002662:	425a      	negs	r2, r3
 8002664:	50e2      	str	r2, [r4, r3]
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	1a21      	subs	r1, r4, r0
 800266a:	4630      	mov	r0, r6
 800266c:	f000 f80e 	bl	800268c <_sbrk_r>
 8002670:	3001      	adds	r0, #1
 8002672:	d1eb      	bne.n	800264c <_malloc_r+0x7c>
 8002674:	230c      	movs	r3, #12
 8002676:	6033      	str	r3, [r6, #0]
 8002678:	4630      	mov	r0, r6
 800267a:	f000 f875 	bl	8002768 <__malloc_unlock>
 800267e:	2000      	movs	r0, #0
 8002680:	bd70      	pop	{r4, r5, r6, pc}
 8002682:	bf00      	nop
 8002684:	200000a4 	.word	0x200000a4
 8002688:	200000a0 	.word	0x200000a0

0800268c <_sbrk_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	4c06      	ldr	r4, [pc, #24]	; (80026a8 <_sbrk_r+0x1c>)
 8002690:	2300      	movs	r3, #0
 8002692:	4605      	mov	r5, r0
 8002694:	4608      	mov	r0, r1
 8002696:	6023      	str	r3, [r4, #0]
 8002698:	f000 f868 	bl	800276c <_sbrk>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <_sbrk_r+0x1a>
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	b103      	cbz	r3, 80026a6 <_sbrk_r+0x1a>
 80026a4:	602b      	str	r3, [r5, #0]
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	20000c8c 	.word	0x20000c8c

080026ac <strtok>:
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <strtok+0x60>)
 80026ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b2:	681d      	ldr	r5, [r3, #0]
 80026b4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80026b6:	4606      	mov	r6, r0
 80026b8:	460f      	mov	r7, r1
 80026ba:	b9fc      	cbnz	r4, 80026fc <strtok+0x50>
 80026bc:	2050      	movs	r0, #80	; 0x50
 80026be:	f7ff ff73 	bl	80025a8 <malloc>
 80026c2:	65a8      	str	r0, [r5, #88]	; 0x58
 80026c4:	6084      	str	r4, [r0, #8]
 80026c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80026c8:	6004      	str	r4, [r0, #0]
 80026ca:	6044      	str	r4, [r0, #4]
 80026cc:	611c      	str	r4, [r3, #16]
 80026ce:	60dc      	str	r4, [r3, #12]
 80026d0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80026d2:	619c      	str	r4, [r3, #24]
 80026d4:	615c      	str	r4, [r3, #20]
 80026d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80026d8:	62dc      	str	r4, [r3, #44]	; 0x2c
 80026da:	629c      	str	r4, [r3, #40]	; 0x28
 80026dc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80026de:	635c      	str	r4, [r3, #52]	; 0x34
 80026e0:	631c      	str	r4, [r3, #48]	; 0x30
 80026e2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80026e4:	63dc      	str	r4, [r3, #60]	; 0x3c
 80026e6:	639c      	str	r4, [r3, #56]	; 0x38
 80026e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80026ea:	645c      	str	r4, [r3, #68]	; 0x44
 80026ec:	641c      	str	r4, [r3, #64]	; 0x40
 80026ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80026f0:	64dc      	str	r4, [r3, #76]	; 0x4c
 80026f2:	649c      	str	r4, [r3, #72]	; 0x48
 80026f4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80026f6:	771c      	strb	r4, [r3, #28]
 80026f8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80026fa:	625c      	str	r4, [r3, #36]	; 0x24
 80026fc:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80026fe:	4639      	mov	r1, r7
 8002700:	4630      	mov	r0, r6
 8002702:	2301      	movs	r3, #1
 8002704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002708:	f000 b802 	b.w	8002710 <__strtok_r>
 800270c:	20000080 	.word	0x20000080

08002710 <__strtok_r>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	b948      	cbnz	r0, 8002728 <__strtok_r+0x18>
 8002714:	6810      	ldr	r0, [r2, #0]
 8002716:	b938      	cbnz	r0, 8002728 <__strtok_r+0x18>
 8002718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800271a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800271e:	b15e      	cbz	r6, 8002738 <__strtok_r+0x28>
 8002720:	42b5      	cmp	r5, r6
 8002722:	d1fa      	bne.n	800271a <__strtok_r+0xa>
 8002724:	b12b      	cbz	r3, 8002732 <__strtok_r+0x22>
 8002726:	4620      	mov	r0, r4
 8002728:	4604      	mov	r4, r0
 800272a:	460f      	mov	r7, r1
 800272c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002730:	e7f3      	b.n	800271a <__strtok_r+0xa>
 8002732:	6014      	str	r4, [r2, #0]
 8002734:	7003      	strb	r3, [r0, #0]
 8002736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002738:	b94d      	cbnz	r5, 800274e <__strtok_r+0x3e>
 800273a:	6015      	str	r5, [r2, #0]
 800273c:	4628      	mov	r0, r5
 800273e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002740:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002744:	42b5      	cmp	r5, r6
 8002746:	d007      	beq.n	8002758 <__strtok_r+0x48>
 8002748:	2e00      	cmp	r6, #0
 800274a:	d1f9      	bne.n	8002740 <__strtok_r+0x30>
 800274c:	461c      	mov	r4, r3
 800274e:	4623      	mov	r3, r4
 8002750:	460f      	mov	r7, r1
 8002752:	f813 5b01 	ldrb.w	r5, [r3], #1
 8002756:	e7f3      	b.n	8002740 <__strtok_r+0x30>
 8002758:	b115      	cbz	r5, 8002760 <__strtok_r+0x50>
 800275a:	2100      	movs	r1, #0
 800275c:	7021      	strb	r1, [r4, #0]
 800275e:	e000      	b.n	8002762 <__strtok_r+0x52>
 8002760:	462b      	mov	r3, r5
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002766 <__malloc_lock>:
 8002766:	4770      	bx	lr

08002768 <__malloc_unlock>:
 8002768:	4770      	bx	lr
	...

0800276c <_sbrk>:
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <_sbrk+0x14>)
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	4602      	mov	r2, r0
 8002772:	b909      	cbnz	r1, 8002778 <_sbrk+0xc>
 8002774:	4903      	ldr	r1, [pc, #12]	; (8002784 <_sbrk+0x18>)
 8002776:	6019      	str	r1, [r3, #0]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	4402      	add	r2, r0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	4770      	bx	lr
 8002780:	200000a8 	.word	0x200000a8
 8002784:	20000c90 	.word	0x20000c90

08002788 <_init>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	bf00      	nop
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr

08002794 <_fini>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	bf00      	nop
 8002798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279a:	bc08      	pop	{r3}
 800279c:	469e      	mov	lr, r3
 800279e:	4770      	bx	lr
