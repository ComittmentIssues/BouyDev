
C:\Users\user\Documents\GitHub\BouyDev\Firmware\New folder\Test_IMU_F4\Debug\Test_IMU_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000135c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080014e4  080014e4  000114e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080014fc  080014fc  000114fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001500  08001500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  08001504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
  7 .bss          00000038  2000002c  2000002c  0002002c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000064  20000064  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004c0f  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000d9c  00000000  00000000  00024c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005f0  00000000  00000000  00025a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000548  00000000  00000000  00025ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000020d5  00000000  00000000  00026540  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002105  00000000  00000000  00028615  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002a71a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000017e0  00000000  00000000  0002a798  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002bf78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080014cc 	.word	0x080014cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	080014cc 	.word	0x080014cc

080001c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e076      	b.n	80002d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d165      	bne.n	80002cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2103      	movs	r1, #3
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <GPIO_Init+0x76>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d12e      	bne.n	800029c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2103      	movs	r1, #3
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	401a      	ands	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	4619      	mov	r1, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	b29b      	uxth	r3, r3
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685a      	ldr	r2, [r3, #4]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	799b      	ldrb	r3, [r3, #6]
 800028a:	4619      	mov	r1, r3
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	b29b      	uxth	r3, r3
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	b29b      	uxth	r3, r3
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	79db      	ldrb	r3, [r3, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d985      	bls.n	80001e4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08a      	sub	sp, #40	; 0x28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80002f2:	2300      	movs	r3, #0
 80002f4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80002f6:	2304      	movs	r3, #4
 80002f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80002fa:	4b57      	ldr	r3, [pc, #348]	; (8000458 <I2C_Init+0x174>)
 80002fc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	889b      	ldrh	r3, [r3, #4]
 8000302:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000304:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000306:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800030a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800030c:	f107 030c 	add.w	r3, r7, #12
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f8d9 	bl	80004c8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	4a4f      	ldr	r2, [pc, #316]	; (800045c <I2C_Init+0x178>)
 800031e:	fba2 2303 	umull	r2, r3, r2, r3
 8000322:	0c9b      	lsrs	r3, r3, #18
 8000324:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000326:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000328:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800032a:	4313      	orrs	r3, r2
 800032c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000332:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b29b      	uxth	r3, r3
 800033a:	f023 0301 	bic.w	r3, r3, #1
 800033e:	b29a      	uxth	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a44      	ldr	r2, [pc, #272]	; (8000460 <I2C_Init+0x17c>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d815      	bhi.n	800037e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	69fa      	ldr	r2, [r7, #28]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000362:	2b03      	cmp	r3, #3
 8000364:	d801      	bhi.n	800036a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000366:	2304      	movs	r3, #4
 8000368:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800036a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800036c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800036e:	4313      	orrs	r3, r2
 8000370:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000374:	3301      	adds	r3, #1
 8000376:	b29a      	uxth	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	841a      	strh	r2, [r3, #32]
 800037c:	e040      	b.n	8000400 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	88db      	ldrh	r3, [r3, #6]
 8000382:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000386:	4293      	cmp	r3, r2
 8000388:	d109      	bne.n	800039e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	4613      	mov	r3, r2
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	4413      	add	r3, r2
 8000394:	69fa      	ldr	r2, [r7, #28]
 8000396:	fbb2 f3f3 	udiv	r3, r2, r3
 800039a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800039c:	e00e      	b.n	80003bc <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4613      	mov	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4413      	add	r3, r2
 80003a8:	009a      	lsls	r2, r3, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	69fa      	ldr	r2, [r7, #28]
 80003ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b2:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80003b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ba:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80003bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d103      	bne.n	80003ce <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80003c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80003ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80003d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80003d2:	4313      	orrs	r3, r2
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80003da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80003de:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80003e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80003e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e6:	fb02 f303 	mul.w	r3, r2, r3
 80003ea:	4a1e      	ldr	r2, [pc, #120]	; (8000464 <I2C_Init+0x180>)
 80003ec:	fb82 1203 	smull	r1, r2, r2, r3
 80003f0:	1192      	asrs	r2, r2, #6
 80003f2:	17db      	asrs	r3, r3, #31
 80003f4:	1ad3      	subs	r3, r2, r3
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	3301      	adds	r3, #1
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000404:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b29b      	uxth	r3, r3
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	b29a      	uxth	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800041c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800041e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000422:	f023 0302 	bic.w	r3, r3, #2
 8000426:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	889a      	ldrh	r2, [r3, #4]
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	895b      	ldrh	r3, [r3, #10]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000436:	4313      	orrs	r3, r2
 8000438:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800043e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	899a      	ldrh	r2, [r3, #12]
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	891b      	ldrh	r3, [r3, #8]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29a      	uxth	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	811a      	strh	r2, [r3, #8]
}
 8000450:	bf00      	nop
 8000452:	3728      	adds	r7, #40	; 0x28
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	007a1200 	.word	0x007a1200
 800045c:	431bde83 	.word	0x431bde83
 8000460:	000186a0 	.word	0x000186a0
 8000464:	10624dd3 	.word	0x10624dd3

08000468 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000468:	b480      	push	{r7}
 800046a:	b087      	sub	sp, #28
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800047e:	2300      	movs	r3, #0
 8000480:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	8a9b      	ldrh	r3, [r3, #20]
 8000486:	b29b      	uxth	r3, r3
 8000488:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	8b1b      	ldrh	r3, [r3, #24]
 800048e:	b29b      	uxth	r3, r3
 8000490:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	4313      	orrs	r3, r2
 800049e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004a2:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80004a4:	693a      	ldr	r2, [r7, #16]
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	401a      	ands	r2, r3
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d102      	bne.n	80004b6 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80004b0:	2301      	movs	r3, #1
 80004b2:	75fb      	strb	r3, [r7, #23]
 80004b4:	e001      	b.n	80004ba <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80004b6:	2300      	movs	r3, #0
 80004b8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80004ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	371c      	adds	r7, #28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b089      	sub	sp, #36	; 0x24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
 80004dc:	2302      	movs	r3, #2
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	2302      	movs	r3, #2
 80004e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004e8:	4b48      	ldr	r3, [pc, #288]	; (800060c <RCC_GetClocksFreq+0x144>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	f003 030c 	and.w	r3, r3, #12
 80004f0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	d007      	beq.n	8000508 <RCC_GetClocksFreq+0x40>
 80004f8:	2b08      	cmp	r3, #8
 80004fa:	d009      	beq.n	8000510 <RCC_GetClocksFreq+0x48>
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d13f      	bne.n	8000580 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a43      	ldr	r2, [pc, #268]	; (8000610 <RCC_GetClocksFreq+0x148>)
 8000504:	601a      	str	r2, [r3, #0]
      break;
 8000506:	e03f      	b.n	8000588 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a42      	ldr	r2, [pc, #264]	; (8000614 <RCC_GetClocksFreq+0x14c>)
 800050c:	601a      	str	r2, [r3, #0]
      break;
 800050e:	e03b      	b.n	8000588 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000510:	4b3e      	ldr	r3, [pc, #248]	; (800060c <RCC_GetClocksFreq+0x144>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000518:	0d9b      	lsrs	r3, r3, #22
 800051a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800051c:	4b3b      	ldr	r3, [pc, #236]	; (800060c <RCC_GetClocksFreq+0x144>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000524:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00d      	beq.n	8000548 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800052c:	4a39      	ldr	r2, [pc, #228]	; (8000614 <RCC_GetClocksFreq+0x14c>)
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	fbb2 f2f3 	udiv	r2, r2, r3
 8000534:	4b35      	ldr	r3, [pc, #212]	; (800060c <RCC_GetClocksFreq+0x144>)
 8000536:	6859      	ldr	r1, [r3, #4]
 8000538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800053c:	400b      	ands	r3, r1
 800053e:	099b      	lsrs	r3, r3, #6
 8000540:	fb03 f302 	mul.w	r3, r3, r2
 8000544:	61fb      	str	r3, [r7, #28]
 8000546:	e00c      	b.n	8000562 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000548:	4a31      	ldr	r2, [pc, #196]	; (8000610 <RCC_GetClocksFreq+0x148>)
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <RCC_GetClocksFreq+0x144>)
 8000552:	6859      	ldr	r1, [r3, #4]
 8000554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000558:	400b      	ands	r3, r1
 800055a:	099b      	lsrs	r3, r3, #6
 800055c:	fb03 f302 	mul.w	r3, r3, r2
 8000560:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <RCC_GetClocksFreq+0x144>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	3301      	adds	r3, #1
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000572:	69fa      	ldr	r2, [r7, #28]
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	fbb2 f2f3 	udiv	r2, r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
      break;
 800057e:	e003      	b.n	8000588 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a23      	ldr	r2, [pc, #140]	; (8000610 <RCC_GetClocksFreq+0x148>)
 8000584:	601a      	str	r2, [r3, #0]
      break;
 8000586:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <RCC_GetClocksFreq+0x144>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000590:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	091b      	lsrs	r3, r3, #4
 8000596:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000598:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <RCC_GetClocksFreq+0x150>)
 800059a:	69bb      	ldr	r3, [r7, #24]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	40da      	lsrs	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <RCC_GetClocksFreq+0x144>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80005b8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	0a9b      	lsrs	r3, r3, #10
 80005be:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005c0:	4a15      	ldr	r2, [pc, #84]	; (8000618 <RCC_GetClocksFreq+0x150>)
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	40da      	lsrs	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <RCC_GetClocksFreq+0x144>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005e0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	0b5b      	lsrs	r3, r3, #13
 80005e6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <RCC_GetClocksFreq+0x150>)
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	4413      	add	r3, r2
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	40da      	lsrs	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	60da      	str	r2, [r3, #12]
}
 8000600:	bf00      	nop
 8000602:	3724      	adds	r7, #36	; 0x24
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40023800 	.word	0x40023800
 8000610:	00f42400 	.word	0x00f42400
 8000614:	007a1200 	.word	0x007a1200
 8000618:	20000000 	.word	0x20000000

0800061c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d006      	beq.n	800063c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800062e:	490a      	ldr	r1, [pc, #40]	; (8000658 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4313      	orrs	r3, r2
 8000638:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800063a:	e006      	b.n	800064a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800063c:	4906      	ldr	r1, [pc, #24]	; (8000658 <RCC_AHB1PeriphClockCmd+0x3c>)
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	43db      	mvns	r3, r3
 8000646:	4013      	ands	r3, r2
 8000648:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4a10      	ldr	r2, [pc, #64]	; (80006ac <STM_EVAL_LEDInit+0x50>)
 800066a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffd3 	bl	800061c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <STM_EVAL_LEDInit+0x54>)
 800067a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800067e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000680:	2301      	movs	r3, #1
 8000682:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000684:	2300      	movs	r3, #0
 8000686:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000688:	2301      	movs	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800068c:	2302      	movs	r3, #2
 800068e:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <STM_EVAL_LEDInit+0x58>)
 8000694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000698:	f107 0208 	add.w	r2, r7, #8
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fd92 	bl	80001c8 <GPIO_Init>
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	080014ec 	.word	0x080014ec
 80006b0:	080014e4 	.word	0x080014e4
 80006b4:	20000010 	.word	0x20000010

080006b8 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <STM_EVAL_LEDOn+0x28>)
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	79fa      	ldrb	r2, [r7, #7]
 80006cc:	4905      	ldr	r1, [pc, #20]	; (80006e4 <STM_EVAL_LEDOn+0x2c>)
 80006ce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80006d2:	831a      	strh	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	20000010 	.word	0x20000010
 80006e4:	080014e4 	.word	0x080014e4

080006e8 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <STM_EVAL_LEDOff+0x28>)
 80006f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	4905      	ldr	r1, [pc, #20]	; (8000714 <STM_EVAL_LEDOff+0x2c>)
 80006fe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000702:	835a      	strh	r2, [r3, #26]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	20000010 	.word	0x20000010
 8000714:	080014e4 	.word	0x080014e4

08000718 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
	TM_MPU6050_t MPU6050_Data0;
	STM_EVAL_LEDInit(LED3);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff ff9c 	bl	800065c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff99 	bl	800065c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff ff96 	bl	800065c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8000730:	2003      	movs	r0, #3
 8000732:	f7ff ff93 	bl	800065c <STM_EVAL_LEDInit>
	 if (TM_MPU6050_Init(&MPU6050_Data0, TM_MPU6050_Device_0, TM_MPU6050_Accelerometer_8G, TM_MPU6050_Gyroscope_250s) == TM_MPU6050_Result_Ok)
 8000736:	1d38      	adds	r0, r7, #4
 8000738:	2300      	movs	r3, #0
 800073a:	2202      	movs	r2, #2
 800073c:	2100      	movs	r1, #0
 800073e:	f000 fd79 	bl	8001234 <TM_MPU6050_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d106      	bne.n	8000756 <main+0x3e>
	 {
		 STM_EVAL_LEDOn(LED3);
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff ffb5 	bl	80006b8 <STM_EVAL_LEDOn>
		 STM_EVAL_LEDOff(LED4);
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff ffca 	bl	80006e8 <STM_EVAL_LEDOff>
 8000754:	e005      	b.n	8000762 <main+0x4a>
	 }else
	 {
		 STM_EVAL_LEDOn(LED4);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ffae 	bl	80006b8 <STM_EVAL_LEDOn>
		 STM_EVAL_LEDOff(LED3);
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff ffc3 	bl	80006e8 <STM_EVAL_LEDOff>
	 }

  while (1)
  {
	  TM_MPU6050_ReadAll(&MPU6050_Data0);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fe23 	bl	80013b0 <TM_MPU6050_ReadAll>
  }
 800076a:	e7fa      	b.n	8000762 <main+0x4a>

0800076c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000770:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000772:	e003      	b.n	800077c <LoopCopyDataInit>

08000774 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000776:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000778:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800077a:	3104      	adds	r1, #4

0800077c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000780:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000782:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000784:	d3f6      	bcc.n	8000774 <CopyDataInit>
  ldr  r2, =_sbss
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000788:	e002      	b.n	8000790 <LoopFillZerobss>

0800078a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800078a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800078c:	f842 3b04 	str.w	r3, [r2], #4

08000790 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000792:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000794:	d3f9      	bcc.n	800078a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000796:	f000 f84b 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f000 fe71 	bl	8001480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079e:	f7ff ffbb 	bl	8000718 <main>
  bx  lr    
 80007a2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80007a8:	08001504 	.word	0x08001504
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007b0:	2000002c 	.word	0x2000002c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80007b4:	2000002c 	.word	0x2000002c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007b8:	20000064 	.word	0x20000064

080007bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC_IRQHandler>
	...

080007c0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80007d4:	e7fe      	b.n	80007d4 <HardFault_Handler+0x4>
 80007d6:	bf00      	nop

080007d8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x4>
 80007de:	bf00      	nop

080007e0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80007e4:	e7fe      	b.n	80007e4 <BusFault_Handler+0x4>
 80007e6:	bf00      	nop

080007e8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80007ec:	e7fe      	b.n	80007ec <UsageFault_Handler+0x4>
 80007ee:	bf00      	nop

080007f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop

08000810 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000834:	4a16      	ldr	r2, [pc, #88]	; (8000890 <SystemInit+0x60>)
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <SystemInit+0x60>)
 8000838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <SystemInit+0x64>)
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <SystemInit+0x64>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <SystemInit+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <SystemInit+0x64>)
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <SystemInit+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000864:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <SystemInit+0x64>)
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <SystemInit+0x68>)
 800086a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800086c:	4a09      	ldr	r2, [pc, #36]	; (8000894 <SystemInit+0x64>)
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <SystemInit+0x64>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000876:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <SystemInit+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800087e:	f000 f80d 	bl	800089c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000882:	4b03      	ldr	r3, [pc, #12]	; (8000890 <SystemInit+0x60>)
 8000884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000888:	609a      	str	r2, [r3, #8]
#endif
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00
 8000894:	40023800 	.word	0x40023800
 8000898:	24003010 	.word	0x24003010

0800089c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80008aa:	4a36      	ldr	r2, [pc, #216]	; (8000984 <SetSysClock+0xe8>)
 80008ac:	4b35      	ldr	r3, [pc, #212]	; (8000984 <SetSysClock+0xe8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80008b6:	4b33      	ldr	r3, [pc, #204]	; (8000984 <SetSysClock+0xe8>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d103      	bne.n	80008d4 <SetSysClock+0x38>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80008d2:	d1f0      	bne.n	80008b6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80008d4:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <SetSysClock+0xe8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80008e0:	2301      	movs	r3, #1
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	e001      	b.n	80008ea <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d142      	bne.n	8000976 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008f0:	4a24      	ldr	r2, [pc, #144]	; (8000984 <SetSysClock+0xe8>)
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <SetSysClock+0xe8>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80008fc:	4a22      	ldr	r2, [pc, #136]	; (8000988 <SetSysClock+0xec>)
 80008fe:	4b22      	ldr	r3, [pc, #136]	; (8000988 <SetSysClock+0xec>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000906:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000908:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <SetSysClock+0xe8>)
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <SetSysClock+0xe8>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000910:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <SetSysClock+0xe8>)
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <SetSysClock+0xe8>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800091a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <SetSysClock+0xe8>)
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <SetSysClock+0xe8>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000926:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <SetSysClock+0xe8>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <SetSysClock+0xf0>)
 800092c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <SetSysClock+0xe8>)
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <SetSysClock+0xe8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000938:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800093a:	bf00      	nop
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <SetSysClock+0xe8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f9      	beq.n	800093c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <SetSysClock+0xf4>)
 800094a:	f240 6205 	movw	r2, #1541	; 0x605
 800094e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <SetSysClock+0xe8>)
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <SetSysClock+0xe8>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	f023 0303 	bic.w	r3, r3, #3
 800095a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800095c:	4a09      	ldr	r2, [pc, #36]	; (8000984 <SetSysClock+0xe8>)
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <SetSysClock+0xe8>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000968:	bf00      	nop
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SetSysClock+0xe8>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	f003 030c 	and.w	r3, r3, #12
 8000972:	2b08      	cmp	r3, #8
 8000974:	d1f9      	bne.n	800096a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000
 800098c:	07405408 	.word	0x07405408
 8000990:	40023c00 	.word	0x40023c00

08000994 <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	4608      	mov	r0, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	4603      	mov	r3, r0
 80009a4:	807b      	strh	r3, [r7, #2]
 80009a6:	460b      	mov	r3, r1
 80009a8:	707b      	strb	r3, [r7, #1]
 80009aa:	4613      	mov	r3, r2
 80009ac:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80009ae:	887b      	ldrh	r3, [r7, #2]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d03e      	beq.n	8000a32 <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f853 	bl	8000a60 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e029      	b.n	8000a14 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80009c0:	887a      	ldrh	r2, [r7, #2]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	fa42 f303 	asr.w	r3, r2, r3
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d01d      	beq.n	8000a0c <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	08da      	lsrs	r2, r3, #3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	08d9      	lsrs	r1, r3, #3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3108      	adds	r1, #8
 80009dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009e0:	68f9      	ldr	r1, [r7, #12]
 80009e2:	f001 0107 	and.w	r1, r1, #7
 80009e6:	0089      	lsls	r1, r1, #2
 80009e8:	200f      	movs	r0, #15
 80009ea:	fa00 f101 	lsl.w	r1, r0, r1
 80009ee:	43c9      	mvns	r1, r1
 80009f0:	400b      	ands	r3, r1
 80009f2:	7f38      	ldrb	r0, [r7, #28]
 80009f4:	68f9      	ldr	r1, [r7, #12]
 80009f6:	f001 0107 	and.w	r1, r1, #7
 80009fa:	0089      	lsls	r1, r1, #2
 80009fc:	fa00 f101 	lsl.w	r1, r0, r1
 8000a00:	4319      	orrs	r1, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3208      	adds	r2, #8
 8000a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000a0a:	e000      	b.n	8000a0e <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8000a0c:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d9d2      	bls.n	80009c0 <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000a1a:	787a      	ldrb	r2, [r7, #1]
 8000a1c:	8879      	ldrh	r1, [r7, #2]
 8000a1e:	7e3b      	ldrb	r3, [r7, #24]
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	783b      	ldrb	r3, [r7, #0]
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	4613      	mov	r3, r2
 8000a28:	2202      	movs	r2, #2
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f830 	bl	8000a90 <TM_GPIO_INT_Init>
 8000a30:	e000      	b.n	8000a34 <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8000a32:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop

08000a3c <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000a4a:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000a4e:	0a9b      	lsrs	r3, r3, #10
 8000a50:	b29b      	uxth	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ffe7 	bl	8000a3c <TM_GPIO_GetPortSource>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	2301      	movs	r3, #1
 8000a74:	fa03 f102 	lsl.w	r1, r3, r2
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <TM_GPIO_INT_EnableClock+0x2c>)
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <TM_GPIO_INT_EnableClock+0x2c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	4608      	mov	r0, r1
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	807b      	strh	r3, [r7, #2]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	707b      	strb	r3, [r7, #1]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffc6 	bl	8000a3c <TM_GPIO_GetPortSource>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e067      	b.n	8000b8a <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8000aba:	887a      	ldrh	r2, [r7, #2]
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	fa42 f303 	asr.w	r3, r2, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d05b      	beq.n	8000b82 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	7bba      	ldrb	r2, [r7, #14]
 8000ace:	4932      	ldr	r1, [pc, #200]	; (8000b98 <TM_GPIO_INT_Init+0x108>)
 8000ad0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000ad4:	b211      	sxth	r1, r2
 8000ad6:	7bfa      	ldrb	r2, [r7, #15]
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	b212      	sxth	r2, r2
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	b212      	sxth	r2, r2
 8000ae4:	b291      	uxth	r1, r2
 8000ae6:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <TM_GPIO_INT_Init+0x108>)
 8000ae8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	7bfa      	ldrb	r2, [r7, #15]
 8000af2:	0052      	lsls	r2, r2, #1
 8000af4:	2103      	movs	r1, #3
 8000af6:	fa01 f202 	lsl.w	r2, r1, r2
 8000afa:	43d2      	mvns	r2, r2
 8000afc:	4013      	ands	r3, r2
 8000afe:	7e39      	ldrb	r1, [r7, #24]
 8000b00:	7bfa      	ldrb	r2, [r7, #15]
 8000b02:	0052      	lsls	r2, r2, #1
 8000b04:	fa01 f202 	lsl.w	r2, r1, r2
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2103      	movs	r1, #3
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4013      	ands	r3, r2
 8000b20:	7879      	ldrb	r1, [r7, #1]
 8000b22:	7bfa      	ldrb	r2, [r7, #15]
 8000b24:	0052      	lsls	r2, r2, #1
 8000b26:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d002      	beq.n	8000b3c <TM_GPIO_INT_Init+0xac>
 8000b36:	787b      	ldrb	r3, [r7, #1]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d123      	bne.n	8000b84 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	7bfa      	ldrb	r2, [r7, #15]
 8000b42:	2101      	movs	r1, #1
 8000b44:	fa01 f202 	lsl.w	r2, r1, r2
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	43d2      	mvns	r2, r2
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	7839      	ldrb	r1, [r7, #0]
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2103      	movs	r1, #3
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	4013      	ands	r3, r2
 8000b70:	7f39      	ldrb	r1, [r7, #28]
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	0052      	lsls	r2, r2, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	e000      	b.n	8000b84 <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 8000b82:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	3301      	adds	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d994      	bls.n	8000aba <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000048 	.word	0x20000048

08000b9c <TM_I2C_Init>:
/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack);

void TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	72fb      	strb	r3, [r7, #11]
	I2C_InitTypeDef I2C_InitStruct;
	
	if (I2Cx == I2C1) {
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4a44      	ldr	r2, [pc, #272]	; (8000cc0 <TM_I2C_Init+0x124>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d121      	bne.n	8000bf6 <TM_I2C_Init+0x5a>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000bb2:	4a44      	ldr	r2, [pc, #272]	; (8000cc4 <TM_I2C_Init+0x128>)
 8000bb4:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <TM_I2C_Init+0x128>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 8000bbe:	7afb      	ldrb	r3, [r7, #11]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fa79 	bl	80010b8 <TM_I2C1_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[0]) {
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <TM_I2C_Init+0x12c>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d902      	bls.n	8000bd6 <TM_I2C_Init+0x3a>
			TM_I2C_INT_Clocks[0] = clockSpeed;
 8000bd0:	4a3d      	ldr	r2, [pc, #244]	; (8000cc8 <TM_I2C_Init+0x12c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[0];
 8000bd6:	4b3c      	ldr	r3, [pc, #240]	; (8000cc8 <TM_I2C_Init+0x12c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C1_ACKNOWLEDGED_ADDRESS;
 8000bdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000be0:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C1_MODE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C1_OWN_ADDRESS;
 8000be6:	2300      	movs	r3, #0
 8000be8:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C1_ACK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C1_DUTY_CYCLE;
 8000bee:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000bf2:	82fb      	strh	r3, [r7, #22]
 8000bf4:	e04a      	b.n	8000c8c <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C2) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4a34      	ldr	r2, [pc, #208]	; (8000ccc <TM_I2C_Init+0x130>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d121      	bne.n	8000c42 <TM_I2C_Init+0xa6>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000bfe:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <TM_I2C_Init+0x128>)
 8000c00:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <TM_I2C_Init+0x128>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 8000c0a:	7afb      	ldrb	r3, [r7, #11]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fa91 	bl	8001134 <TM_I2C2_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[1]) {
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <TM_I2C_Init+0x12c>)
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d902      	bls.n	8000c22 <TM_I2C_Init+0x86>
			TM_I2C_INT_Clocks[1] = clockSpeed;
 8000c1c:	4a2a      	ldr	r2, [pc, #168]	; (8000cc8 <TM_I2C_Init+0x12c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6053      	str	r3, [r2, #4]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[1];
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <TM_I2C_Init+0x12c>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C2_ACKNOWLEDGED_ADDRESS;
 8000c28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c2c:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C2_MODE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C2_OWN_ADDRESS;
 8000c32:	2300      	movs	r3, #0
 8000c34:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C2_ACK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C2_DUTY_CYCLE;
 8000c3a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000c3e:	82fb      	strh	r3, [r7, #22]
 8000c40:	e024      	b.n	8000c8c <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C3) {
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <TM_I2C_Init+0x134>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d120      	bne.n	8000c8c <TM_I2C_Init+0xf0>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <TM_I2C_Init+0x128>)
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <TM_I2C_Init+0x128>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 faab 	bl	80011b4 <TM_I2C3_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[2]) {
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <TM_I2C_Init+0x12c>)
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d902      	bls.n	8000c6e <TM_I2C_Init+0xd2>
			TM_I2C_INT_Clocks[2] = clockSpeed;
 8000c68:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <TM_I2C_Init+0x12c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6093      	str	r3, [r2, #8]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[2];
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <TM_I2C_Init+0x12c>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C3_ACKNOWLEDGED_ADDRESS;
 8000c74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c78:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C3_MODE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C3_OWN_ADDRESS;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C3_ACK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C3_DUTY_CYCLE;
 8000c86:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000c8a:	82fb      	strh	r3, [r7, #22]
	}
	
	/* Disable I2C first */
	I2Cx->CR1 &= ~I2C_CR1_PE;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	f023 0301 	bic.w	r3, r3, #1
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	801a      	strh	r2, [r3, #0]
	
	/* Initialize I2C */
	I2C_Init(I2Cx, &I2C_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff fb1e 	bl	80002e4 <I2C_Init>
	
	/* Enable I2C */
	I2Cx->CR1 |= I2C_CR1_PE;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	801a      	strh	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	20000020 	.word	0x20000020
 8000ccc:	40005800 	.word	0x40005800
 8000cd0:	40005c00 	.word	0x40005c00

08000cd4 <TM_I2C_Read>:

uint8_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	70bb      	strb	r3, [r7, #2]
	uint8_t received_data;
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8000ce4:	78f9      	ldrb	r1, [r7, #3]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 f89c 	bl	8000e28 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8000cf0:	78bb      	ldrb	r3, [r7, #2]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 f91b 	bl	8000f30 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f9a8 	bl	8001050 <TM_I2C_Stop>
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
 8000d00:	78f9      	ldrb	r1, [r7, #3]
 8000d02:	2300      	movs	r3, #0
 8000d04:	2201      	movs	r2, #1
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 f88e 	bl	8000e28 <TM_I2C_Start>
	received_data = TM_I2C_ReadNack(I2Cx);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f967 	bl	8000fe0 <TM_I2C_ReadNack>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
	return received_data;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <TM_I2C_ReadMulti>:

void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	72fb      	strb	r3, [r7, #11]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	72bb      	strb	r3, [r7, #10]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
 8000d32:	7af9      	ldrb	r1, [r7, #11]
 8000d34:	2301      	movs	r3, #1
 8000d36:	2200      	movs	r2, #0
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f000 f875 	bl	8000e28 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8000d3e:	7abb      	ldrb	r3, [r7, #10]
 8000d40:	4619      	mov	r1, r3
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 f8f4 	bl	8000f30 <TM_I2C_WriteData>
	//TM_I2C_Stop(I2Cx);
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
 8000d48:	7af9      	ldrb	r1, [r7, #11]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f000 f86a 	bl	8000e28 <TM_I2C_Start>
	while (count--) {
 8000d54:	e013      	b.n	8000d7e <TM_I2C_ReadMulti+0x5e>
		if (!count) {
 8000d56:	8c3b      	ldrh	r3, [r7, #32]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d108      	bne.n	8000d6e <TM_I2C_ReadMulti+0x4e>
			/* Last byte */
			*data++ = TM_I2C_ReadNack(I2Cx);
 8000d5c:	687c      	ldr	r4, [r7, #4]
 8000d5e:	1c63      	adds	r3, r4, #1
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f000 f93c 	bl	8000fe0 <TM_I2C_ReadNack>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	7023      	strb	r3, [r4, #0]
 8000d6c:	e007      	b.n	8000d7e <TM_I2C_ReadMulti+0x5e>
		} else {
			*data++ = TM_I2C_ReadAck(I2Cx);
 8000d6e:	687c      	ldr	r4, [r7, #4]
 8000d70:	1c63      	adds	r3, r4, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f000 f903 	bl	8000f80 <TM_I2C_ReadAck>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	7023      	strb	r3, [r4, #0]
void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
	TM_I2C_WriteData(I2Cx, reg);
	//TM_I2C_Stop(I2Cx);
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
	while (count--) {
 8000d7e:	8c3b      	ldrh	r3, [r7, #32]
 8000d80:	1e5a      	subs	r2, r3, #1
 8000d82:	843a      	strh	r2, [r7, #32]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1e6      	bne.n	8000d56 <TM_I2C_ReadMulti+0x36>
			*data++ = TM_I2C_ReadNack(I2Cx);
		} else {
			*data++ = TM_I2C_ReadAck(I2Cx);
		}
	}
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}

08000d90 <TM_I2C_Write>:
			*data = TM_I2C_ReadAck(I2Cx);
		}
	}
}

void TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	4608      	mov	r0, r1
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4603      	mov	r3, r0
 8000da0:	70fb      	strb	r3, [r7, #3]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70bb      	strb	r3, [r7, #2]
 8000da6:	4613      	mov	r3, r2
 8000da8:	707b      	strb	r3, [r7, #1]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8000daa:	78f9      	ldrb	r1, [r7, #3]
 8000dac:	2300      	movs	r3, #0
 8000dae:	2200      	movs	r2, #0
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f839 	bl	8000e28 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8000db6:	78bb      	ldrb	r3, [r7, #2]
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f8b8 	bl	8000f30 <TM_I2C_WriteData>
	TM_I2C_WriteData(I2Cx, data);
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 f8b3 	bl	8000f30 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f940 	bl	8001050 <TM_I2C_Stop>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <TM_I2C_IsDeviceConnected>:
	}
	TM_I2C_Stop(I2Cx);
}


uint8_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 8000de8:	78f9      	ldrb	r1, [r7, #3]
 8000dea:	2301      	movs	r3, #1
 8000dec:	2200      	movs	r2, #0
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f81a 	bl	8000e28 <TM_I2C_Start>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <TM_I2C_IsDeviceConnected+0x26>
		connected = 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
	}
	
	/* STOP I2C */
	TM_I2C_Stop(I2Cx);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f926 	bl	8001050 <TM_I2C_Stop>
	
	/* Return status */
	return connected;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop

08000e10 <TM_I2C_InitCustomPinsCallback>:

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <TM_I2C_Start>:

/* Private functions */
int16_t TM_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4603      	mov	r3, r0
 8000e38:	70fb      	strb	r3, [r7, #3]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70bb      	strb	r3, [r7, #2]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	801a      	strh	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <TM_I2C_Start+0x100>)
 8000e54:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e58:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8000e5a:	e00a      	b.n	8000e72 <TM_I2C_Start+0x4a>
		if (--TM_I2C_Timeout == 0x00) {
 8000e5c:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <TM_I2C_Start+0x100>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	4a31      	ldr	r2, [pc, #196]	; (8000f28 <TM_I2C_Start+0x100>)
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <TM_I2C_Start+0x100>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <TM_I2C_Start+0x4a>
			return 1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e056      	b.n	8000f20 <TM_I2C_Start+0xf8>
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	8a9b      	ldrh	r3, [r3, #20]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0ed      	beq.n	8000e5c <TM_I2C_Start+0x34>
			return 1;
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <TM_I2C_Start+0x6e>
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 8000e96:	78bb      	ldrb	r3, [r7, #2]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d11d      	bne.n	8000ed8 <TM_I2C_Start+0xb0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <TM_I2C_Start+0x100>)
 8000eac:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000eb0:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8000eb2:	e00a      	b.n	8000eca <TM_I2C_Start+0xa2>
			if (--TM_I2C_Timeout == 0x00) {
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <TM_I2C_Start+0x100>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <TM_I2C_Start+0x100>)
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <TM_I2C_Start+0x100>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <TM_I2C_Start+0xa2>
				return 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e02a      	b.n	8000f20 <TM_I2C_Start+0xf8>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	8a9b      	ldrh	r3, [r3, #20]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0ed      	beq.n	8000eb4 <TM_I2C_Start+0x8c>
			if (--TM_I2C_Timeout == 0x00) {
				return 1;
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 8000ed8:	78bb      	ldrb	r3, [r7, #2]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d11d      	bne.n	8000f1a <TM_I2C_Start+0xf2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <TM_I2C_Start+0x100>)
 8000eee:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ef2:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8000ef4:	e00a      	b.n	8000f0c <TM_I2C_Start+0xe4>
			if (--TM_I2C_Timeout == 0x00) {
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <TM_I2C_Start+0x100>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <TM_I2C_Start+0x100>)
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <TM_I2C_Start+0x100>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <TM_I2C_Start+0xe4>
				return 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e009      	b.n	8000f20 <TM_I2C_Start+0xf8>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <TM_I2C_Start+0x104>)
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff faaa 	bl	8000468 <I2C_CheckEvent>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0ed      	beq.n	8000ef6 <TM_I2C_Start+0xce>
			}
		}
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	8b1b      	ldrh	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000060 	.word	0x20000060
 8000f2c:	00030002 	.word	0x00030002

08000f30 <TM_I2C_WriteData>:

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <TM_I2C_WriteData+0x4c>)
 8000f3e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f42:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8000f44:	e004      	b.n	8000f50 <TM_I2C_WriteData+0x20>
		TM_I2C_Timeout--;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <TM_I2C_WriteData+0x4c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <TM_I2C_WriteData+0x4c>)
 8000f4e:	6013      	str	r3, [r2, #0]
}

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	8a9b      	ldrh	r3, [r3, #20]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d103      	bne.n	8000f66 <TM_I2C_WriteData+0x36>
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <TM_I2C_WriteData+0x4c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1ef      	bne.n	8000f46 <TM_I2C_WriteData+0x16>
		TM_I2C_Timeout--;
	}
	
	/* Send I2C data */
	I2Cx->DR = data;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	821a      	strh	r2, [r3, #16]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000060 	.word	0x20000060

08000f80 <TM_I2C_ReadAck>:

uint8_t TM_I2C_ReadAck(I2C_TypeDef* I2Cx) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	801a      	strh	r2, [r3, #0]
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <TM_I2C_ReadAck+0x58>)
 8000f9a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f9e:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8000fa0:	e00a      	b.n	8000fb8 <TM_I2C_ReadAck+0x38>
		if (--TM_I2C_Timeout == 0x00) {
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <TM_I2C_ReadAck+0x58>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <TM_I2C_ReadAck+0x58>)
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <TM_I2C_ReadAck+0x58>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <TM_I2C_ReadAck+0x38>
			return 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e00b      	b.n	8000fd0 <TM_I2C_ReadAck+0x50>
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8000fb8:	4908      	ldr	r1, [pc, #32]	; (8000fdc <TM_I2C_ReadAck+0x5c>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fa54 	bl	8000468 <I2C_CheckEvent>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0ed      	beq.n	8000fa2 <TM_I2C_ReadAck+0x22>
			return 1;
		}
	}
	
	/* Read data */
	data = I2Cx->DR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	8a1b      	ldrh	r3, [r3, #16]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000060 	.word	0x20000060
 8000fdc:	00030040 	.word	0x00030040

08000fe0 <TM_I2C_ReadNack>:

uint8_t TM_I2C_ReadNack(I2C_TypeDef* I2Cx) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Disable ACK */
	I2Cx->CR1 &= ~I2C_CR1_ACK;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	801a      	strh	r2, [r3, #0]
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	801a      	strh	r2, [r3, #0]
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <TM_I2C_ReadNack+0x68>)
 800100a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800100e:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001010:	e00a      	b.n	8001028 <TM_I2C_ReadNack+0x48>
		if (--TM_I2C_Timeout == 0x00) {
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <TM_I2C_ReadNack+0x68>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <TM_I2C_ReadNack+0x68>)
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <TM_I2C_ReadNack+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <TM_I2C_ReadNack+0x48>
			return 1;
 8001024:	2301      	movs	r3, #1
 8001026:	e00b      	b.n	8001040 <TM_I2C_ReadNack+0x60>
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001028:	4908      	ldr	r1, [pc, #32]	; (800104c <TM_I2C_ReadNack+0x6c>)
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fa1c 	bl	8000468 <I2C_CheckEvent>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0ed      	beq.n	8001012 <TM_I2C_ReadNack+0x32>
			return 1;
		}
	}

	/* Read data */
	data = I2Cx->DR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	8a1b      	ldrh	r3, [r3, #16]
 800103a:	b29b      	uxth	r3, r3
 800103c:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000060 	.word	0x20000060
 800104c:	00030040 	.word	0x00030040

08001050 <TM_I2C_Stop>:

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <TM_I2C_Stop+0x64>)
 800105a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800105e:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001060:	e00a      	b.n	8001078 <TM_I2C_Stop+0x28>
		if (--TM_I2C_Timeout == 0x00) {
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <TM_I2C_Stop+0x64>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3b01      	subs	r3, #1
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <TM_I2C_Stop+0x64>)
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <TM_I2C_Stop+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <TM_I2C_Stop+0x28>
			return 1;
 8001074:	2301      	movs	r3, #1
 8001076:	e016      	b.n	80010a6 <TM_I2C_Stop+0x56>
}

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	8a9b      	ldrh	r3, [r3, #20]
 800107c:	b29b      	uxth	r3, r3
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0ed      	beq.n	8001062 <TM_I2C_Stop+0x12>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	8a9b      	ldrh	r3, [r3, #20]
 800108a:	b29b      	uxth	r3, r3
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0e6      	beq.n	8001062 <TM_I2C_Stop+0x12>
			return 1;
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	801a      	strh	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000060 	.word	0x20000060

080010b8 <TM_I2C1_INT_InitPins>:




/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af02      	add	r7, sp, #8
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d109      	bne.n	80010dc <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 80010c8:	2304      	movs	r3, #4
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	2301      	movs	r3, #1
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	2201      	movs	r2, #1
 80010d4:	21c0      	movs	r1, #192	; 0xc0
 80010d6:	4815      	ldr	r0, [pc, #84]	; (800112c <TM_I2C1_INT_InitPins+0x74>)
 80010d8:	f7ff fc5c 	bl	8000994 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d10a      	bne.n	80010f8 <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 80010e2:	2304      	movs	r3, #4
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 7140 	mov.w	r1, #768	; 0x300
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <TM_I2C1_INT_InitPins+0x74>)
 80010f4:	f7ff fc4e 	bl	8000994 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d10a      	bne.n	8001114 <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 80010fe:	2304      	movs	r3, #4
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	2301      	movs	r3, #1
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <TM_I2C1_INT_InitPins+0x74>)
 8001110:	f7ff fc40 	bl	8000994 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d103      	bne.n	8001122 <TM_I2C1_INT_InitPins+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF_I2C1);
 800111a:	2104      	movs	r1, #4
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <TM_I2C1_INT_InitPins+0x78>)
 800111e:	f7ff fe77 	bl	8000e10 <TM_I2C_InitCustomPinsCallback>
	}
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020400 	.word	0x40020400
 8001130:	40005400 	.word	0x40005400

08001134 <TM_I2C2_INT_InitPins>:

static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af02      	add	r7, sp, #8
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10a      	bne.n	800115a <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8001144:	2304      	movs	r3, #4
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	2301      	movs	r3, #1
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <TM_I2C2_INT_InitPins+0x70>)
 8001156:	f7ff fc1d 	bl	8000994 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d109      	bne.n	8001174 <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8001160:	2304      	movs	r3, #4
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2301      	movs	r3, #1
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	2201      	movs	r2, #1
 800116c:	2103      	movs	r1, #3
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <TM_I2C2_INT_InitPins+0x74>)
 8001170:	f7ff fc10 	bl	8000994 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d109      	bne.n	800118e <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 800117a:	2304      	movs	r3, #4
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	2301      	movs	r3, #1
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	2201      	movs	r2, #1
 8001186:	2130      	movs	r1, #48	; 0x30
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <TM_I2C2_INT_InitPins+0x78>)
 800118a:	f7ff fc03 	bl	8000994 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d103      	bne.n	800119c <TM_I2C2_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF_I2C2);
 8001194:	2104      	movs	r1, #4
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <TM_I2C2_INT_InitPins+0x7c>)
 8001198:	f7ff fe3a 	bl	8000e10 <TM_I2C_InitCustomPinsCallback>
	}
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40021c00 	.word	0x40021c00
 80011b0:	40005800 	.word	0x40005800

080011b4 <TM_I2C3_INT_InitPins>:

static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d115      	bne.n	80011f0 <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80011c4:	2304      	movs	r3, #4
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	2301      	movs	r3, #1
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <TM_I2C3_INT_InitPins+0x70>)
 80011d6:	f7ff fbdd 	bl	8000994 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80011da:	2304      	movs	r3, #4
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	2301      	movs	r3, #1
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ea:	480f      	ldr	r0, [pc, #60]	; (8001228 <TM_I2C3_INT_InitPins+0x74>)
 80011ec:	f7ff fbd2 	bl	8000994 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10a      	bne.n	800120c <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80011f6:	2304      	movs	r3, #4
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	2301      	movs	r3, #1
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <TM_I2C3_INT_InitPins+0x78>)
 8001208:	f7ff fbc4 	bl	8000994 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d103      	bne.n	800121a <TM_I2C3_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF_I2C3);
 8001212:	2104      	movs	r1, #4
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <TM_I2C3_INT_InitPins+0x7c>)
 8001216:	f7ff fdfb 	bl	8000e10 <TM_I2C_InitCustomPinsCallback>
	}
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020000 	.word	0x40020000
 8001228:	40020800 	.word	0x40020800
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40005c00 	.word	0x40005c00

08001234 <TM_MPU6050_Init>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_mpu6050.h"

TM_MPU6050_Result_t TM_MPU6050_Init(TM_MPU6050_t* DataStruct, TM_MPU6050_Device_t DeviceNumber, TM_MPU6050_Accelerometer_t AccelerometerSensitivity, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	4608      	mov	r0, r1
 800123e:	4611      	mov	r1, r2
 8001240:	461a      	mov	r2, r3
 8001242:	4603      	mov	r3, r0
 8001244:	70fb      	strb	r3, [r7, #3]
 8001246:	460b      	mov	r3, r1
 8001248:	70bb      	strb	r3, [r7, #2]
 800124a:	4613      	mov	r3, r2
 800124c:	707b      	strb	r3, [r7, #1]
	uint8_t temp;
	
	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001254:	b2da      	uxtb	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	701a      	strb	r2, [r3, #0]
	
	/* Initialize I2C */
	TM_I2C_Init(MPU6050_I2C, MPU6050_I2C_PINSPACK, MPU6050_I2C_CLOCK);
 800125a:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <TM_MPU6050_Init+0x164>)
 800125c:	2100      	movs	r1, #0
 800125e:	484f      	ldr	r0, [pc, #316]	; (800139c <TM_MPU6050_Init+0x168>)
 8001260:	f7ff fc9c 	bl	8000b9c <TM_I2C_Init>
	
	/* Check if device is connected */
	if (!TM_I2C_IsDeviceConnected(MPU6050_I2C, DataStruct->Address)) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	484c      	ldr	r0, [pc, #304]	; (800139c <TM_MPU6050_Init+0x168>)
 800126c:	f7ff fdb4 	bl	8000dd8 <TM_I2C_IsDeviceConnected>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <TM_MPU6050_Init+0x46>
		/* Return error */
		return TM_MPU6050_Result_DeviceNotConnected;
 8001276:	2301      	movs	r3, #1
 8001278:	e089      	b.n	800138e <TM_MPU6050_Init+0x15a>
	}
	
	/* Check who I am */
	if (TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_WHO_AM_I) != MPU6050_I_AM) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2275      	movs	r2, #117	; 0x75
 8001280:	4619      	mov	r1, r3
 8001282:	4846      	ldr	r0, [pc, #280]	; (800139c <TM_MPU6050_Init+0x168>)
 8001284:	f7ff fd26 	bl	8000cd4 <TM_I2C_Read>
 8001288:	4603      	mov	r3, r0
 800128a:	2b68      	cmp	r3, #104	; 0x68
 800128c:	d001      	beq.n	8001292 <TM_MPU6050_Init+0x5e>
		/* Return error */
		return TM_MPU6050_Result_DeviceInvalid;
 800128e:	2302      	movs	r3, #2
 8001290:	e07d      	b.n	800138e <TM_MPU6050_Init+0x15a>
	}
	
	/* Wakeup MPU6050 */
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_PWR_MGMT_1, 0x00);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7819      	ldrb	r1, [r3, #0]
 8001296:	2300      	movs	r3, #0
 8001298:	226b      	movs	r2, #107	; 0x6b
 800129a:	4840      	ldr	r0, [pc, #256]	; (800139c <TM_MPU6050_Init+0x168>)
 800129c:	f7ff fd78 	bl	8000d90 <TM_I2C_Write>
	
	/* Config accelerometer */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	221c      	movs	r2, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	483c      	ldr	r0, [pc, #240]	; (800139c <TM_MPU6050_Init+0x168>)
 80012aa:	f7ff fd13 	bl	8000cd4 <TM_I2C_Read>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	f023 0318 	bic.w	r3, r3, #24
 80012ba:	b25a      	sxtb	r2, r3
 80012bc:	78bb      	ldrb	r3, [r7, #2]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, temp);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7819      	ldrb	r1, [r3, #0]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	221c      	movs	r2, #28
 80012d0:	4832      	ldr	r0, [pc, #200]	; (800139c <TM_MPU6050_Init+0x168>)
 80012d2:	f7ff fd5d 	bl	8000d90 <TM_I2C_Write>
	
	/* Config gyroscope */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	221b      	movs	r2, #27
 80012dc:	4619      	mov	r1, r3
 80012de:	482f      	ldr	r0, [pc, #188]	; (800139c <TM_MPU6050_Init+0x168>)
 80012e0:	f7ff fcf8 	bl	8000cd4 <TM_I2C_Read>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	f023 0318 	bic.w	r3, r3, #24
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	787b      	ldrb	r3, [r7, #1]
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, temp);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7819      	ldrb	r1, [r3, #0]
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	221b      	movs	r2, #27
 8001306:	4825      	ldr	r0, [pc, #148]	; (800139c <TM_MPU6050_Init+0x168>)
 8001308:	f7ff fd42 	bl	8000d90 <TM_I2C_Write>
	
	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800130c:	78bb      	ldrb	r3, [r7, #2]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d81d      	bhi.n	800134e <TM_MPU6050_Init+0x11a>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <TM_MPU6050_Init+0xe4>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001329 	.word	0x08001329
 800131c:	08001333 	.word	0x08001333
 8001320:	0800133d 	.word	0x0800133d
 8001324:	08001347 	.word	0x08001347
		case TM_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2; 
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800132e:	609a      	str	r2, [r3, #8]
			break;
 8001330:	e00e      	b.n	8001350 <TM_MPU6050_Init+0x11c>
		case TM_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4; 
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001338:	609a      	str	r2, [r3, #8]
			break;
 800133a:	e009      	b.n	8001350 <TM_MPU6050_Init+0x11c>
		case TM_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8; 
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001342:	609a      	str	r2, [r3, #8]
			break;
 8001344:	e004      	b.n	8001350 <TM_MPU6050_Init+0x11c>
		case TM_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16; 
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800134c:	609a      	str	r2, [r3, #8]
		default:
			break;
 800134e:	bf00      	nop
	}
	
	switch (GyroscopeSensitivity) {
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d819      	bhi.n	800138a <TM_MPU6050_Init+0x156>
 8001356:	a201      	add	r2, pc, #4	; (adr r2, 800135c <TM_MPU6050_Init+0x128>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	0800136d 	.word	0x0800136d
 8001360:	08001375 	.word	0x08001375
 8001364:	0800137d 	.word	0x0800137d
 8001368:	08001385 	.word	0x08001385
		case TM_MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250; 
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <TM_MPU6050_Init+0x16c>)
 8001370:	605a      	str	r2, [r3, #4]
			break;
 8001372:	e00b      	b.n	800138c <TM_MPU6050_Init+0x158>
		case TM_MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500; 
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <TM_MPU6050_Init+0x170>)
 8001378:	605a      	str	r2, [r3, #4]
			break;
 800137a:	e007      	b.n	800138c <TM_MPU6050_Init+0x158>
		case TM_MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000; 
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <TM_MPU6050_Init+0x174>)
 8001380:	605a      	str	r2, [r3, #4]
			break;
 8001382:	e003      	b.n	800138c <TM_MPU6050_Init+0x158>
		case TM_MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000; 
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <TM_MPU6050_Init+0x178>)
 8001388:	605a      	str	r2, [r3, #4]
		default:
			break;
 800138a:	bf00      	nop
	}
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	00061a80 	.word	0x00061a80
 800139c:	40005c00 	.word	0x40005c00
 80013a0:	3bfa232d 	.word	0x3bfa232d
 80013a4:	3c7a232d 	.word	0x3c7a232d
 80013a8:	3cf9c190 	.word	0x3cf9c190
 80013ac:	3d79c190 	.word	0x3d79c190

080013b0 <TM_MPU6050_ReadAll>:
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
}

TM_MPU6050_Result_t TM_MPU6050_ReadAll(TM_MPU6050_t* DataStruct) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	int16_t temp;
	
	/* Read full raw data, 14bytes */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_XOUT_H, data, 14);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7819      	ldrb	r1, [r3, #0]
 80013bc:	f107 0208 	add.w	r2, r7, #8
 80013c0:	230e      	movs	r3, #14
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	223b      	movs	r2, #59	; 0x3b
 80013c8:	482a      	ldr	r0, [pc, #168]	; (8001474 <TM_MPU6050_ReadAll+0xc4>)
 80013ca:	f7ff fca9 	bl	8000d20 <TM_I2C_ReadMulti>
	
	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);	
 80013ce:	7a3b      	ldrb	r3, [r7, #8]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	7a7b      	ldrb	r3, [r7, #9]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21a      	sxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 80013e0:	7abb      	ldrb	r3, [r7, #10]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	7afb      	ldrb	r3, [r7, #11]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 80013f2:	7b3b      	ldrb	r3, [r7, #12]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7b7b      	ldrb	r3, [r7, #13]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21a      	sxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	82fb      	strh	r3, [r7, #22]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001412:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001478 <TM_MPU6050_ReadAll+0xc8>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800147c <TM_MPU6050_ReadAll+0xcc>
 800142a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	edc3 7a06 	vstr	s15, [r3, #24]
	
	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8001434:	7c3b      	ldrb	r3, [r7, #16]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	7c7b      	ldrb	r3, [r7, #17]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 8001446:	7cbb      	ldrb	r3, [r7, #18]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	7cfb      	ldrb	r3, [r7, #19]
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21a      	sxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 8001458:	7d3b      	ldrb	r3, [r7, #20]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21a      	sxth	r2, r3
 800145e:	7d7b      	ldrb	r3, [r7, #21]
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40005c00 	.word	0x40005c00
 8001478:	43aa0000 	.word	0x43aa0000
 800147c:	42121eb8 	.word	0x42121eb8

08001480 <__libc_init_array>:
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <__libc_init_array+0x3c>)
 8001484:	4c0e      	ldr	r4, [pc, #56]	; (80014c0 <__libc_init_array+0x40>)
 8001486:	1ae4      	subs	r4, r4, r3
 8001488:	10a4      	asrs	r4, r4, #2
 800148a:	2500      	movs	r5, #0
 800148c:	461e      	mov	r6, r3
 800148e:	42a5      	cmp	r5, r4
 8001490:	d004      	beq.n	800149c <__libc_init_array+0x1c>
 8001492:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001496:	4798      	blx	r3
 8001498:	3501      	adds	r5, #1
 800149a:	e7f8      	b.n	800148e <__libc_init_array+0xe>
 800149c:	f000 f816 	bl	80014cc <_init>
 80014a0:	4c08      	ldr	r4, [pc, #32]	; (80014c4 <__libc_init_array+0x44>)
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <__libc_init_array+0x48>)
 80014a4:	1ae4      	subs	r4, r4, r3
 80014a6:	10a4      	asrs	r4, r4, #2
 80014a8:	2500      	movs	r5, #0
 80014aa:	461e      	mov	r6, r3
 80014ac:	42a5      	cmp	r5, r4
 80014ae:	d004      	beq.n	80014ba <__libc_init_array+0x3a>
 80014b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014b4:	4798      	blx	r3
 80014b6:	3501      	adds	r5, #1
 80014b8:	e7f8      	b.n	80014ac <__libc_init_array+0x2c>
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	080014fc 	.word	0x080014fc
 80014c0:	080014fc 	.word	0x080014fc
 80014c4:	08001500 	.word	0x08001500
 80014c8:	080014fc 	.word	0x080014fc

080014cc <_init>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	bf00      	nop
 80014d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d2:	bc08      	pop	{r3}
 80014d4:	469e      	mov	lr, r3
 80014d6:	4770      	bx	lr

080014d8 <_fini>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	bf00      	nop
 80014dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014de:	bc08      	pop	{r3}
 80014e0:	469e      	mov	lr, r3
 80014e2:	4770      	bx	lr
