
C:\Users\user\Documents\GitHub\BouyDev\Firmware\New folder\Test_IMU_F4\Debug\Test_IMU_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002364  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000048  20000000  0800250c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020048  2**0
                  CONTENTS
  7 .bss          00000168  20000048  20000048  00020048  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200001b0  200001b0  00020048  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008e16  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000174d  00000000  00000000  00028e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b88  00000000  00000000  0002a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a80  00000000  00000000  0002b168  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c0b  00000000  00000000  0002bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003762  00000000  00000000  0002f7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00032f55  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003054  00000000  00000000  00032fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00036028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024d4 	.word	0x080024d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	080024d4 	.word	0x080024d4

080001c8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_DisableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	3320      	adds	r3, #32
 80001e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ec:	bf00      	nop
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr
 80001f8:	e000e100 	.word	0xe000e100

080001fc <init_Timer>:

uint16_t VirtAddVarTab[6] = {0x01,0x0961,0x12C1,0x2581,0x2EE1,0x3841};

/* Private Function Definitions*/
void init_Timer(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af00      	add	r7, sp, #0

		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7,ENABLE);
 8000202:	2101      	movs	r1, #1
 8000204:	2020      	movs	r0, #32
 8000206:	f001 f8fb 	bl	8001400 <RCC_APB1PeriphClockCmd>

		TIM_TimeBaseInitTypeDef timerInitStructure; //create a 1ms delay
		RCC_ClocksTypeDef rcc;
		RCC_GetClocksFreq(&rcc);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f001 f82d 	bl	800126c <RCC_GetClocksFreq>

		timerInitStructure.TIM_Prescaler = Sample_PSC;
 8000212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000216:	82bb      	strh	r3, [r7, #20]
		timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000218:	2300      	movs	r3, #0
 800021a:	82fb      	strh	r3, [r7, #22]
		timerInitStructure.TIM_Period= rcc.HCLK_Frequency/(2*SAMPLE_RATE*Sample_PSC);
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <init_Timer+0x84>)
 8000220:	fba2 2303 	umull	r2, r3, r2, r3
 8000224:	0c5b      	lsrs	r3, r3, #17
 8000226:	61bb      	str	r3, [r7, #24]
		timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	83bb      	strh	r3, [r7, #28]
		timerInitStructure.TIM_RepetitionCounter = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	77bb      	strb	r3, [r7, #30]
		TIM_TimeBaseInit(Sample_Timer, &timerInitStructure);
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	4619      	mov	r1, r3
 8000236:	4813      	ldr	r0, [pc, #76]	; (8000284 <init_Timer+0x88>)
 8000238:	f001 fa22 	bl	8001680 <TIM_TimeBaseInit>

		/* Prevent interrupt from triggering*/
		TIM_ClearITPendingBit(Sample_Timer,TIM_IT_Update);
 800023c:	2101      	movs	r1, #1
 800023e:	4811      	ldr	r0, [pc, #68]	; (8000284 <init_Timer+0x88>)
 8000240:	f001 faee 	bl	8001820 <TIM_ClearITPendingBit>
		TIM_UpdateRequestConfig(TIM2,TIM_UpdateSource_Regular);
 8000244:	2101      	movs	r1, #1
 8000246:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800024a:	f001 fa85 	bl	8001758 <TIM_UpdateRequestConfig>
		TIM_ITConfig(Sample_Timer, TIM_IT_Update,ENABLE);
 800024e:	2201      	movs	r2, #1
 8000250:	2101      	movs	r1, #1
 8000252:	480c      	ldr	r0, [pc, #48]	; (8000284 <init_Timer+0x88>)
 8000254:	f001 fac0 	bl	80017d8 <TIM_ITConfig>

		NVIC_InitTypeDef nvicStructure;
	    nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8000258:	2337      	movs	r3, #55	; 0x37
 800025a:	703b      	strb	r3, [r7, #0]
		nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	707b      	strb	r3, [r7, #1]
		nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8000260:	2301      	movs	r3, #1
 8000262:	70bb      	strb	r3, [r7, #2]
		nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8000264:	2301      	movs	r3, #1
 8000266:	70fb      	strb	r3, [r7, #3]
		NVIC_Init(&nvicStructure);
 8000268:	463b      	mov	r3, r7
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fd22 	bl	8000cb4 <NVIC_Init>
		TIM_Cmd(Sample_Timer,ENABLE);
 8000270:	2101      	movs	r1, #1
 8000272:	4804      	ldr	r0, [pc, #16]	; (8000284 <init_Timer+0x88>)
 8000274:	f001 fa90 	bl	8001798 <TIM_Cmd>
		//enable interrupts

}
 8000278:	bf00      	nop
 800027a:	3720      	adds	r7, #32
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	80008001 	.word	0x80008001
 8000284:	40001400 	.word	0x40001400

08000288 <init_IMU>:

uint8_t init_IMU(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	71fb      	strb	r3, [r7, #7]
#ifdef USE_EXT_IMU
	flag = (TM_MPU6050_Init(&MPU6050_Data0, TM_MPU6050_Device_0, TM_MPU6050_Accelerometer_4G, TM_MPU6050_Gyroscope_250s) == TM_MPU6050_Result_Ok);
 8000292:	2300      	movs	r3, #0
 8000294:	2201      	movs	r2, #1
 8000296:	2100      	movs	r1, #0
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <init_IMU+0x44>)
 800029a:	f000 fbe9 	bl	8000a70 <TM_MPU6050_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	bf0c      	ite	eq
 80002a4:	2301      	moveq	r3, #1
 80002a6:	2300      	movne	r3, #0
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	71fb      	strb	r3, [r7, #7]
	if(flag)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <init_IMU+0x32>
	{
		STM_EVAL_LEDOn(LED3);
 80002b2:	2001      	movs	r0, #1
 80002b4:	f001 faf4 	bl	80018a0 <STM_EVAL_LEDOn>
 80002b8:	e002      	b.n	80002c0 <init_IMU+0x38>
	}else
	{
		STM_EVAL_LEDOn(LED4);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f001 faf0 	bl	80018a0 <STM_EVAL_LEDOn>
	{
		flag = 0;

	}
#endif
	return flag;
 80002c0:	79fb      	ldrb	r3, [r7, #7]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000154 	.word	0x20000154

080002d0 <read_IMU_Data>:

void read_IMU_Data(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
#ifdef USE_EXT_IMU
	TM_MPU6050_ReadAccelerometer(&MPU6050_Data0);
 80002d4:	4803      	ldr	r0, [pc, #12]	; (80002e4 <read_IMU_Data+0x14>)
 80002d6:	f000 fc89 	bl	8000bec <TM_MPU6050_ReadAccelerometer>
	TM_MPU6050_ReadGyroscope(&MPU6050_Data0);
 80002da:	4802      	ldr	r0, [pc, #8]	; (80002e4 <read_IMU_Data+0x14>)
 80002dc:	f000 fcb8 	bl	8000c50 <TM_MPU6050_ReadGyroscope>
#else
	TM_LIS302DL_LIS3DSH_ReadAxes(&LIS3DSH_Data0);
#endif

}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000154 	.word	0x20000154

080002e8 <deinit_Timer>:
void deinit_Timer(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	TIM_Cmd(Sample_Timer,DISABLE);
 80002ec:	2100      	movs	r1, #0
 80002ee:	480a      	ldr	r0, [pc, #40]	; (8000318 <deinit_Timer+0x30>)
 80002f0:	f001 fa52 	bl	8001798 <TIM_Cmd>
	TIM_ITConfig(Sample_Timer, TIM_IT_Update,DISABLE);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	4807      	ldr	r0, [pc, #28]	; (8000318 <deinit_Timer+0x30>)
 80002fa:	f001 fa6d 	bl	80017d8 <TIM_ITConfig>
	TIM_DeInit(TIM7);
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <deinit_Timer+0x30>)
 8000300:	f001 f8de 	bl	80014c0 <TIM_DeInit>
	NVIC_DisableIRQ(TIM7_IRQn);
 8000304:	2037      	movs	r0, #55	; 0x37
 8000306:	f7ff ff5f 	bl	80001c8 <NVIC_DisableIRQ>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7,DISABLE);
 800030a:	2100      	movs	r1, #0
 800030c:	2020      	movs	r0, #32
 800030e:	f001 f877 	bl	8001400 <RCC_APB1PeriphClockCmd>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40001400 	.word	0x40001400

0800031c <TIM7_IRQHandler>:
/****** IRQ HANDLER **************/
void TIM7_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	STM_EVAL_LEDToggle(LED6);
 8000320:	2003      	movs	r0, #3
 8000322:	f001 fad5 	bl	80018d0 <STM_EVAL_LEDToggle>
	read_IMU_Data();
 8000326:	f7ff ffd3 	bl	80002d0 <read_IMU_Data>
	/* Store Data in Flash */
#ifdef USE_EXT_IMU
	EE_WriteVariable(VirtAddVarTab[0],MPU6050_Data0.Accelerometer_X);
 800032a:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <TIM7_IRQHandler+0xa8>)
 800032c:	881a      	ldrh	r2, [r3, #0]
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <TIM7_IRQHandler+0xac>)
 8000330:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000334:	b29b      	uxth	r3, r3
 8000336:	4619      	mov	r1, r3
 8000338:	4610      	mov	r0, r2
 800033a:	f001 fc91 	bl	8001c60 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[1],MPU6050_Data0.Accelerometer_Y);
 800033e:	4b21      	ldr	r3, [pc, #132]	; (80003c4 <TIM7_IRQHandler+0xa8>)
 8000340:	885a      	ldrh	r2, [r3, #2]
 8000342:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <TIM7_IRQHandler+0xac>)
 8000344:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000348:	b29b      	uxth	r3, r3
 800034a:	4619      	mov	r1, r3
 800034c:	4610      	mov	r0, r2
 800034e:	f001 fc87 	bl	8001c60 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[2],MPU6050_Data0.Accelerometer_Z);
 8000352:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <TIM7_IRQHandler+0xa8>)
 8000354:	889a      	ldrh	r2, [r3, #4]
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <TIM7_IRQHandler+0xac>)
 8000358:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800035c:	b29b      	uxth	r3, r3
 800035e:	4619      	mov	r1, r3
 8000360:	4610      	mov	r0, r2
 8000362:	f001 fc7d 	bl	8001c60 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[3],MPU6050_Data0.Gyroscope_X);
 8000366:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <TIM7_IRQHandler+0xa8>)
 8000368:	88da      	ldrh	r2, [r3, #6]
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <TIM7_IRQHandler+0xac>)
 800036c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000370:	b29b      	uxth	r3, r3
 8000372:	4619      	mov	r1, r3
 8000374:	4610      	mov	r0, r2
 8000376:	f001 fc73 	bl	8001c60 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[4],MPU6050_Data0.Gyroscope_Y);
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <TIM7_IRQHandler+0xa8>)
 800037c:	891a      	ldrh	r2, [r3, #8]
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <TIM7_IRQHandler+0xac>)
 8000380:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000384:	b29b      	uxth	r3, r3
 8000386:	4619      	mov	r1, r3
 8000388:	4610      	mov	r0, r2
 800038a:	f001 fc69 	bl	8001c60 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[1],LIS3DSH_Data0.Y);
	EE_WriteVariable(VirtAddVarTab[2],LIS3DSH_Data0.Z);
#endif
	/* End */

	if(count == __numSamples())
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <TIM7_IRQHandler+0xb0>)
 8000390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000394:	2b78      	cmp	r3, #120	; 0x78
 8000396:	d105      	bne.n	80003a4 <TIM7_IRQHandler+0x88>
	{
		sample_finished = 1;
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <TIM7_IRQHandler+0xb4>)
 800039a:	2201      	movs	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
		deinit_Timer();
 800039e:	f7ff ffa3 	bl	80002e8 <deinit_Timer>
 80003a2:	e008      	b.n	80003b6 <TIM7_IRQHandler+0x9a>
	}else
	{
		count++;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <TIM7_IRQHandler+0xb0>)
 80003a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	3301      	adds	r3, #1
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	b21a      	sxth	r2, r3
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <TIM7_IRQHandler+0xb0>)
 80003b4:	801a      	strh	r2, [r3, #0]
	}
	TIM_ClearITPendingBit(Sample_Timer,TIM_IT_Update);
 80003b6:	2101      	movs	r1, #1
 80003b8:	4806      	ldr	r0, [pc, #24]	; (80003d4 <TIM7_IRQHandler+0xb8>)
 80003ba:	f001 fa31 	bl	8001820 <TIM_ClearITPendingBit>

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000154 	.word	0x20000154
 80003cc:	20000064 	.word	0x20000064
 80003d0:	20000150 	.word	0x20000150
 80003d4:	40001400 	.word	0x40001400

080003d8 <TM_I2C_Init>:
/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack);

void TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	460b      	mov	r3, r1
 80003e2:	607a      	str	r2, [r7, #4]
 80003e4:	72fb      	strb	r3, [r7, #11]
	I2C_InitTypeDef I2C_InitStruct;
	
	if (I2Cx == I2C1) {
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	4a44      	ldr	r2, [pc, #272]	; (80004fc <TM_I2C_Init+0x124>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d121      	bne.n	8000432 <TM_I2C_Init+0x5a>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80003ee:	4a44      	ldr	r2, [pc, #272]	; (8000500 <TM_I2C_Init+0x128>)
 80003f0:	4b43      	ldr	r3, [pc, #268]	; (8000500 <TM_I2C_Init+0x128>)
 80003f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003f8:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 80003fa:	7afb      	ldrb	r3, [r7, #11]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fa79 	bl	80008f4 <TM_I2C1_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[0]) {
 8000402:	4b40      	ldr	r3, [pc, #256]	; (8000504 <TM_I2C_Init+0x12c>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	429a      	cmp	r2, r3
 800040a:	d902      	bls.n	8000412 <TM_I2C_Init+0x3a>
			TM_I2C_INT_Clocks[0] = clockSpeed;
 800040c:	4a3d      	ldr	r2, [pc, #244]	; (8000504 <TM_I2C_Init+0x12c>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	6013      	str	r3, [r2, #0]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[0];
 8000412:	4b3c      	ldr	r3, [pc, #240]	; (8000504 <TM_I2C_Init+0x12c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C1_ACKNOWLEDGED_ADDRESS;
 8000418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800041c:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C1_MODE;
 800041e:	2300      	movs	r3, #0
 8000420:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C1_OWN_ADDRESS;
 8000422:	2300      	movs	r3, #0
 8000424:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C1_ACK;
 8000426:	2300      	movs	r3, #0
 8000428:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C1_DUTY_CYCLE;
 800042a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800042e:	82fb      	strh	r3, [r7, #22]
 8000430:	e04a      	b.n	80004c8 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C2) {
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	4a34      	ldr	r2, [pc, #208]	; (8000508 <TM_I2C_Init+0x130>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d121      	bne.n	800047e <TM_I2C_Init+0xa6>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800043a:	4a31      	ldr	r2, [pc, #196]	; (8000500 <TM_I2C_Init+0x128>)
 800043c:	4b30      	ldr	r3, [pc, #192]	; (8000500 <TM_I2C_Init+0x128>)
 800043e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000440:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000444:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	4618      	mov	r0, r3
 800044a:	f000 fa91 	bl	8000970 <TM_I2C2_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[1]) {
 800044e:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <TM_I2C_Init+0x12c>)
 8000450:	685a      	ldr	r2, [r3, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	429a      	cmp	r2, r3
 8000456:	d902      	bls.n	800045e <TM_I2C_Init+0x86>
			TM_I2C_INT_Clocks[1] = clockSpeed;
 8000458:	4a2a      	ldr	r2, [pc, #168]	; (8000504 <TM_I2C_Init+0x12c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6053      	str	r3, [r2, #4]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[1];
 800045e:	4b29      	ldr	r3, [pc, #164]	; (8000504 <TM_I2C_Init+0x12c>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C2_ACKNOWLEDGED_ADDRESS;
 8000464:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000468:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C2_MODE;
 800046a:	2300      	movs	r3, #0
 800046c:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C2_OWN_ADDRESS;
 800046e:	2300      	movs	r3, #0
 8000470:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C2_ACK;
 8000472:	2300      	movs	r3, #0
 8000474:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C2_DUTY_CYCLE;
 8000476:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800047a:	82fb      	strh	r3, [r7, #22]
 800047c:	e024      	b.n	80004c8 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C3) {
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	4a22      	ldr	r2, [pc, #136]	; (800050c <TM_I2C_Init+0x134>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d120      	bne.n	80004c8 <TM_I2C_Init+0xf0>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000486:	4a1e      	ldr	r2, [pc, #120]	; (8000500 <TM_I2C_Init+0x128>)
 8000488:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <TM_I2C_Init+0x128>)
 800048a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000490:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 faab 	bl	80009f0 <TM_I2C3_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[2]) {
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <TM_I2C_Init+0x12c>)
 800049c:	689a      	ldr	r2, [r3, #8]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d902      	bls.n	80004aa <TM_I2C_Init+0xd2>
			TM_I2C_INT_Clocks[2] = clockSpeed;
 80004a4:	4a17      	ldr	r2, [pc, #92]	; (8000504 <TM_I2C_Init+0x12c>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6093      	str	r3, [r2, #8]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[2];
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <TM_I2C_Init+0x12c>)
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C3_ACKNOWLEDGED_ADDRESS;
 80004b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004b4:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C3_MODE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C3_OWN_ADDRESS;
 80004ba:	2300      	movs	r3, #0
 80004bc:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C3_ACK;
 80004be:	2300      	movs	r3, #0
 80004c0:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C3_DUTY_CYCLE;
 80004c2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80004c6:	82fb      	strh	r3, [r7, #22]
	}
	
	/* Disable I2C first */
	I2Cx->CR1 &= ~I2C_CR1_PE;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	f023 0301 	bic.w	r3, r3, #1
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	801a      	strh	r2, [r3, #0]
	
	/* Initialize I2C */
	I2C_Init(I2Cx, &I2C_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	68f8      	ldr	r0, [r7, #12]
 80004e0:	f000 fdd2 	bl	8001088 <I2C_Init>
	
	/* Enable I2C */
	I2Cx->CR1 |= I2C_CR1_PE;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	801a      	strh	r2, [r3, #0]
}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40005400 	.word	0x40005400
 8000500:	40023800 	.word	0x40023800
 8000504:	2000000c 	.word	0x2000000c
 8000508:	40005800 	.word	0x40005800
 800050c:	40005c00 	.word	0x40005c00

08000510 <TM_I2C_Read>:

uint8_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
 800051c:	4613      	mov	r3, r2
 800051e:	70bb      	strb	r3, [r7, #2]
	uint8_t received_data;
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8000520:	78f9      	ldrb	r1, [r7, #3]
 8000522:	2300      	movs	r3, #0
 8000524:	2200      	movs	r2, #0
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 f89c 	bl	8000664 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 800052c:	78bb      	ldrb	r3, [r7, #2]
 800052e:	4619      	mov	r1, r3
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f91b 	bl	800076c <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f9a8 	bl	800088c <TM_I2C_Stop>
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
 800053c:	78f9      	ldrb	r1, [r7, #3]
 800053e:	2300      	movs	r3, #0
 8000540:	2201      	movs	r2, #1
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f88e 	bl	8000664 <TM_I2C_Start>
	received_data = TM_I2C_ReadNack(I2Cx);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f967 	bl	800081c <TM_I2C_ReadNack>
 800054e:	4603      	mov	r3, r0
 8000550:	73fb      	strb	r3, [r7, #15]
	return received_data;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <TM_I2C_ReadMulti>:

void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	460b      	mov	r3, r1
 8000568:	72fb      	strb	r3, [r7, #11]
 800056a:	4613      	mov	r3, r2
 800056c:	72bb      	strb	r3, [r7, #10]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
 800056e:	7af9      	ldrb	r1, [r7, #11]
 8000570:	2301      	movs	r3, #1
 8000572:	2200      	movs	r2, #0
 8000574:	68f8      	ldr	r0, [r7, #12]
 8000576:	f000 f875 	bl	8000664 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 800057a:	7abb      	ldrb	r3, [r7, #10]
 800057c:	4619      	mov	r1, r3
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f000 f8f4 	bl	800076c <TM_I2C_WriteData>
	//TM_I2C_Stop(I2Cx);
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
 8000584:	7af9      	ldrb	r1, [r7, #11]
 8000586:	2301      	movs	r3, #1
 8000588:	2201      	movs	r2, #1
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f000 f86a 	bl	8000664 <TM_I2C_Start>
	while (count--) {
 8000590:	e013      	b.n	80005ba <TM_I2C_ReadMulti+0x5e>
		if (!count) {
 8000592:	8c3b      	ldrh	r3, [r7, #32]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d108      	bne.n	80005aa <TM_I2C_ReadMulti+0x4e>
			/* Last byte */
			*data++ = TM_I2C_ReadNack(I2Cx);
 8000598:	687c      	ldr	r4, [r7, #4]
 800059a:	1c63      	adds	r3, r4, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f000 f93c 	bl	800081c <TM_I2C_ReadNack>
 80005a4:	4603      	mov	r3, r0
 80005a6:	7023      	strb	r3, [r4, #0]
 80005a8:	e007      	b.n	80005ba <TM_I2C_ReadMulti+0x5e>
		} else {
			*data++ = TM_I2C_ReadAck(I2Cx);
 80005aa:	687c      	ldr	r4, [r7, #4]
 80005ac:	1c63      	adds	r3, r4, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f000 f903 	bl	80007bc <TM_I2C_ReadAck>
 80005b6:	4603      	mov	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
	TM_I2C_WriteData(I2Cx, reg);
	//TM_I2C_Stop(I2Cx);
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
	while (count--) {
 80005ba:	8c3b      	ldrh	r3, [r7, #32]
 80005bc:	1e5a      	subs	r2, r3, #1
 80005be:	843a      	strh	r2, [r7, #32]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1e6      	bne.n	8000592 <TM_I2C_ReadMulti+0x36>
			*data++ = TM_I2C_ReadNack(I2Cx);
		} else {
			*data++ = TM_I2C_ReadAck(I2Cx);
		}
	}
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd90      	pop	{r4, r7, pc}

080005cc <TM_I2C_Write>:
			*data = TM_I2C_ReadAck(I2Cx);
		}
	}
}

void TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	4608      	mov	r0, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	461a      	mov	r2, r3
 80005da:	4603      	mov	r3, r0
 80005dc:	70fb      	strb	r3, [r7, #3]
 80005de:	460b      	mov	r3, r1
 80005e0:	70bb      	strb	r3, [r7, #2]
 80005e2:	4613      	mov	r3, r2
 80005e4:	707b      	strb	r3, [r7, #1]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 80005e6:	78f9      	ldrb	r1, [r7, #3]
 80005e8:	2300      	movs	r3, #0
 80005ea:	2200      	movs	r2, #0
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f839 	bl	8000664 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 80005f2:	78bb      	ldrb	r3, [r7, #2]
 80005f4:	4619      	mov	r1, r3
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f8b8 	bl	800076c <TM_I2C_WriteData>
	TM_I2C_WriteData(I2Cx, data);
 80005fc:	787b      	ldrb	r3, [r7, #1]
 80005fe:	4619      	mov	r1, r3
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 f8b3 	bl	800076c <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f940 	bl	800088c <TM_I2C_Stop>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <TM_I2C_IsDeviceConnected>:
	}
	TM_I2C_Stop(I2Cx);
}


uint8_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 8000624:	78f9      	ldrb	r1, [r7, #3]
 8000626:	2301      	movs	r3, #1
 8000628:	2200      	movs	r2, #0
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 f81a 	bl	8000664 <TM_I2C_Start>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <TM_I2C_IsDeviceConnected+0x26>
		connected = 1;
 8000636:	2301      	movs	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
	}
	
	/* STOP I2C */
	TM_I2C_Stop(I2Cx);
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f926 	bl	800088c <TM_I2C_Stop>
	
	/* Return status */
	return connected;
 8000640:	7bfb      	ldrb	r3, [r7, #15]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop

0800064c <TM_I2C_InitCustomPinsCallback>:

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <TM_I2C_Start>:

/* Private functions */
int16_t TM_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	4608      	mov	r0, r1
 800066e:	4611      	mov	r1, r2
 8000670:	461a      	mov	r2, r3
 8000672:	4603      	mov	r3, r0
 8000674:	70fb      	strb	r3, [r7, #3]
 8000676:	460b      	mov	r3, r1
 8000678:	70bb      	strb	r3, [r7, #2]
 800067a:	4613      	mov	r3, r2
 800067c:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	b29b      	uxth	r3, r3
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	b29a      	uxth	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	801a      	strh	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <TM_I2C_Start+0x100>)
 8000690:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000694:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8000696:	e00a      	b.n	80006ae <TM_I2C_Start+0x4a>
		if (--TM_I2C_Timeout == 0x00) {
 8000698:	4b32      	ldr	r3, [pc, #200]	; (8000764 <TM_I2C_Start+0x100>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a31      	ldr	r2, [pc, #196]	; (8000764 <TM_I2C_Start+0x100>)
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <TM_I2C_Start+0x100>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <TM_I2C_Start+0x4a>
			return 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e056      	b.n	800075c <TM_I2C_Start+0xf8>
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	8a9b      	ldrh	r3, [r3, #20]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0ed      	beq.n	8000698 <TM_I2C_Start+0x34>
			return 1;
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 80006bc:	787b      	ldrb	r3, [r7, #1]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d007      	beq.n	80006d2 <TM_I2C_Start+0x6e>
		I2Cx->CR1 |= I2C_CR1_ACK;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 80006d2:	78bb      	ldrb	r3, [r7, #2]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d11d      	bne.n	8000714 <TM_I2C_Start+0xb0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <TM_I2C_Start+0x100>)
 80006e8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80006ec:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 80006ee:	e00a      	b.n	8000706 <TM_I2C_Start+0xa2>
			if (--TM_I2C_Timeout == 0x00) {
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <TM_I2C_Start+0x100>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <TM_I2C_Start+0x100>)
 80006f8:	6013      	str	r3, [r2, #0]
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <TM_I2C_Start+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d101      	bne.n	8000706 <TM_I2C_Start+0xa2>
				return 1;
 8000702:	2301      	movs	r3, #1
 8000704:	e02a      	b.n	800075c <TM_I2C_Start+0xf8>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	8a9b      	ldrh	r3, [r3, #20]
 800070a:	b29b      	uxth	r3, r3
 800070c:	f003 0302 	and.w	r3, r3, #2
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0ed      	beq.n	80006f0 <TM_I2C_Start+0x8c>
			if (--TM_I2C_Timeout == 0x00) {
				return 1;
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 8000714:	78bb      	ldrb	r3, [r7, #2]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d11d      	bne.n	8000756 <TM_I2C_Start+0xf2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	b29a      	uxth	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <TM_I2C_Start+0x100>)
 800072a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800072e:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8000730:	e00a      	b.n	8000748 <TM_I2C_Start+0xe4>
			if (--TM_I2C_Timeout == 0x00) {
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <TM_I2C_Start+0x100>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3b01      	subs	r3, #1
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <TM_I2C_Start+0x100>)
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <TM_I2C_Start+0x100>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d101      	bne.n	8000748 <TM_I2C_Start+0xe4>
				return 1;
 8000744:	2301      	movs	r3, #1
 8000746:	e009      	b.n	800075c <TM_I2C_Start+0xf8>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8000748:	4907      	ldr	r1, [pc, #28]	; (8000768 <TM_I2C_Start+0x104>)
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 fd5e 	bl	800120c <I2C_CheckEvent>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0ed      	beq.n	8000732 <TM_I2C_Start+0xce>
			}
		}
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	8b1b      	ldrh	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000068 	.word	0x20000068
 8000768:	00030002 	.word	0x00030002

0800076c <TM_I2C_WriteData>:

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <TM_I2C_WriteData+0x4c>)
 800077a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800077e:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8000780:	e004      	b.n	800078c <TM_I2C_WriteData+0x20>
		TM_I2C_Timeout--;
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <TM_I2C_WriteData+0x4c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <TM_I2C_WriteData+0x4c>)
 800078a:	6013      	str	r3, [r2, #0]
}

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	8a9b      	ldrh	r3, [r3, #20]
 8000790:	b29b      	uxth	r3, r3
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	2b00      	cmp	r3, #0
 8000798:	d103      	bne.n	80007a2 <TM_I2C_WriteData+0x36>
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <TM_I2C_WriteData+0x4c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1ef      	bne.n	8000782 <TM_I2C_WriteData+0x16>
		TM_I2C_Timeout--;
	}
	
	/* Send I2C data */
	I2Cx->DR = data;
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	821a      	strh	r2, [r3, #16]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000068 	.word	0x20000068

080007bc <TM_I2C_ReadAck>:

uint8_t TM_I2C_ReadAck(I2C_TypeDef* I2Cx) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	801a      	strh	r2, [r3, #0]
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <TM_I2C_ReadAck+0x58>)
 80007d6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80007da:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 80007dc:	e00a      	b.n	80007f4 <TM_I2C_ReadAck+0x38>
		if (--TM_I2C_Timeout == 0x00) {
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <TM_I2C_ReadAck+0x58>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <TM_I2C_ReadAck+0x58>)
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <TM_I2C_ReadAck+0x58>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d101      	bne.n	80007f4 <TM_I2C_ReadAck+0x38>
			return 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	e00b      	b.n	800080c <TM_I2C_ReadAck+0x50>
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 80007f4:	4908      	ldr	r1, [pc, #32]	; (8000818 <TM_I2C_ReadAck+0x5c>)
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 fd08 	bl	800120c <I2C_CheckEvent>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0ed      	beq.n	80007de <TM_I2C_ReadAck+0x22>
			return 1;
		}
	}
	
	/* Read data */
	data = I2Cx->DR;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	8a1b      	ldrh	r3, [r3, #16]
 8000806:	b29b      	uxth	r3, r3
 8000808:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000068 	.word	0x20000068
 8000818:	00030040 	.word	0x00030040

0800081c <TM_I2C_ReadNack>:

uint8_t TM_I2C_ReadNack(I2C_TypeDef* I2Cx) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Disable ACK */
	I2Cx->CR1 &= ~I2C_CR1_ACK;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	b29b      	uxth	r3, r3
 800082a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800082e:	b29a      	uxth	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	801a      	strh	r2, [r3, #0]
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b29b      	uxth	r3, r3
 800083a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800083e:	b29a      	uxth	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	801a      	strh	r2, [r3, #0]
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <TM_I2C_ReadNack+0x68>)
 8000846:	f644 6220 	movw	r2, #20000	; 0x4e20
 800084a:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 800084c:	e00a      	b.n	8000864 <TM_I2C_ReadNack+0x48>
		if (--TM_I2C_Timeout == 0x00) {
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <TM_I2C_ReadNack+0x68>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3b01      	subs	r3, #1
 8000854:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <TM_I2C_ReadNack+0x68>)
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <TM_I2C_ReadNack+0x68>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <TM_I2C_ReadNack+0x48>
			return 1;
 8000860:	2301      	movs	r3, #1
 8000862:	e00b      	b.n	800087c <TM_I2C_ReadNack+0x60>
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8000864:	4908      	ldr	r1, [pc, #32]	; (8000888 <TM_I2C_ReadNack+0x6c>)
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 fcd0 	bl	800120c <I2C_CheckEvent>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0ed      	beq.n	800084e <TM_I2C_ReadNack+0x32>
			return 1;
		}
	}

	/* Read data */
	data = I2Cx->DR;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	8a1b      	ldrh	r3, [r3, #16]
 8000876:	b29b      	uxth	r3, r3
 8000878:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000068 	.word	0x20000068
 8000888:	00030040 	.word	0x00030040

0800088c <TM_I2C_Stop>:

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <TM_I2C_Stop+0x64>)
 8000896:	f644 6220 	movw	r2, #20000	; 0x4e20
 800089a:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 800089c:	e00a      	b.n	80008b4 <TM_I2C_Stop+0x28>
		if (--TM_I2C_Timeout == 0x00) {
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <TM_I2C_Stop+0x64>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <TM_I2C_Stop+0x64>)
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <TM_I2C_Stop+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <TM_I2C_Stop+0x28>
			return 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e016      	b.n	80008e2 <TM_I2C_Stop+0x56>
}

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	8a9b      	ldrh	r3, [r3, #20]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0ed      	beq.n	800089e <TM_I2C_Stop+0x12>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	8a9b      	ldrh	r3, [r3, #20]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0e6      	beq.n	800089e <TM_I2C_Stop+0x12>
			return 1;
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008da:	b29a      	uxth	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	801a      	strh	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000068 	.word	0x20000068

080008f4 <TM_I2C1_INT_InitPins>:




/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d109      	bne.n	8000918 <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8000904:	2304      	movs	r3, #4
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	2301      	movs	r3, #1
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2301      	movs	r3, #1
 800090e:	2201      	movs	r2, #1
 8000910:	21c0      	movs	r1, #192	; 0xc0
 8000912:	4815      	ldr	r0, [pc, #84]	; (8000968 <TM_I2C1_INT_InitPins+0x74>)
 8000914:	f001 fc6e 	bl	80021f4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d10a      	bne.n	8000934 <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 800091e:	2304      	movs	r3, #4
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	2301      	movs	r3, #1
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2301      	movs	r3, #1
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <TM_I2C1_INT_InitPins+0x74>)
 8000930:	f001 fc60 	bl	80021f4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d10a      	bne.n	8000950 <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 800093a:	2304      	movs	r3, #4
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	2301      	movs	r3, #1
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7110 	mov.w	r1, #576	; 0x240
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <TM_I2C1_INT_InitPins+0x74>)
 800094c:	f001 fc52 	bl	80021f4 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d103      	bne.n	800095e <TM_I2C1_INT_InitPins+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF_I2C1);
 8000956:	2104      	movs	r1, #4
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <TM_I2C1_INT_InitPins+0x78>)
 800095a:	f7ff fe77 	bl	800064c <TM_I2C_InitCustomPinsCallback>
	}
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40020400 	.word	0x40020400
 800096c:	40005400 	.word	0x40005400

08000970 <TM_I2C2_INT_InitPins>:

static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af02      	add	r7, sp, #8
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10a      	bne.n	8000996 <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8000980:	2304      	movs	r3, #4
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	2301      	movs	r3, #1
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <TM_I2C2_INT_InitPins+0x70>)
 8000992:	f001 fc2f 	bl	80021f4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d109      	bne.n	80009b0 <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 800099c:	2304      	movs	r3, #4
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2301      	movs	r3, #1
 80009a6:	2201      	movs	r2, #1
 80009a8:	2103      	movs	r1, #3
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <TM_I2C2_INT_InitPins+0x74>)
 80009ac:	f001 fc22 	bl	80021f4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d109      	bne.n	80009ca <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 80009b6:	2304      	movs	r3, #4
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	2301      	movs	r3, #1
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2301      	movs	r3, #1
 80009c0:	2201      	movs	r2, #1
 80009c2:	2130      	movs	r1, #48	; 0x30
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <TM_I2C2_INT_InitPins+0x78>)
 80009c6:	f001 fc15 	bl	80021f4 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d103      	bne.n	80009d8 <TM_I2C2_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF_I2C2);
 80009d0:	2104      	movs	r1, #4
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <TM_I2C2_INT_InitPins+0x7c>)
 80009d4:	f7ff fe3a 	bl	800064c <TM_I2C_InitCustomPinsCallback>
	}
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40020400 	.word	0x40020400
 80009e4:	40021400 	.word	0x40021400
 80009e8:	40021c00 	.word	0x40021c00
 80009ec:	40005800 	.word	0x40005800

080009f0 <TM_I2C3_INT_InitPins>:

static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d115      	bne.n	8000a2c <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8000a00:	2304      	movs	r3, #4
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	2301      	movs	r3, #1
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <TM_I2C3_INT_InitPins+0x70>)
 8000a12:	f001 fbef 	bl	80021f4 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8000a16:	2304      	movs	r3, #4
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <TM_I2C3_INT_InitPins+0x74>)
 8000a28:	f001 fbe4 	bl	80021f4 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d10a      	bne.n	8000a48 <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8000a32:	2304      	movs	r3, #4
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	2301      	movs	r3, #1
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <TM_I2C3_INT_InitPins+0x78>)
 8000a44:	f001 fbd6 	bl	80021f4 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	d103      	bne.n	8000a56 <TM_I2C3_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF_I2C3);
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <TM_I2C3_INT_InitPins+0x7c>)
 8000a52:	f7ff fdfb 	bl	800064c <TM_I2C_InitCustomPinsCallback>
	}
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40021c00 	.word	0x40021c00
 8000a6c:	40005c00 	.word	0x40005c00

08000a70 <TM_MPU6050_Init>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "../IMU/tm_stm32f4_mpu6050.h"

TM_MPU6050_Result_t TM_MPU6050_Init(TM_MPU6050_t* DataStruct, TM_MPU6050_Device_t DeviceNumber, TM_MPU6050_Accelerometer_t AccelerometerSensitivity, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4603      	mov	r3, r0
 8000a80:	70fb      	strb	r3, [r7, #3]
 8000a82:	460b      	mov	r3, r1
 8000a84:	70bb      	strb	r3, [r7, #2]
 8000a86:	4613      	mov	r3, r2
 8000a88:	707b      	strb	r3, [r7, #1]
	uint8_t temp;
	
	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	701a      	strb	r2, [r3, #0]
	
	/* Initialize I2C */
	TM_I2C_Init(MPU6050_I2C, MPU6050_I2C_PINSPACK, MPU6050_I2C_CLOCK);
 8000a96:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	484e      	ldr	r0, [pc, #312]	; (8000bd8 <TM_MPU6050_Init+0x168>)
 8000a9e:	f7ff fc9b 	bl	80003d8 <TM_I2C_Init>
	
	/* Check if device is connected */
	if (!TM_I2C_IsDeviceConnected(MPU6050_I2C, DataStruct->Address)) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	484b      	ldr	r0, [pc, #300]	; (8000bd8 <TM_MPU6050_Init+0x168>)
 8000aaa:	f7ff fdb3 	bl	8000614 <TM_I2C_IsDeviceConnected>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d101      	bne.n	8000ab8 <TM_MPU6050_Init+0x48>
		/* Return error */

		return TM_MPU6050_Result_DeviceNotConnected;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e08a      	b.n	8000bce <TM_MPU6050_Init+0x15e>
	}
	
	/* Check who I am */
	if (TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_WHO_AM_I) != MPU6050_I_AM) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2275      	movs	r2, #117	; 0x75
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4845      	ldr	r0, [pc, #276]	; (8000bd8 <TM_MPU6050_Init+0x168>)
 8000ac2:	f7ff fd25 	bl	8000510 <TM_I2C_Read>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b68      	cmp	r3, #104	; 0x68
 8000aca:	d001      	beq.n	8000ad0 <TM_MPU6050_Init+0x60>
		/* Return error */
		return TM_MPU6050_Result_DeviceInvalid;
 8000acc:	2302      	movs	r3, #2
 8000ace:	e07e      	b.n	8000bce <TM_MPU6050_Init+0x15e>
	}
	
	/* Wakeup MPU6050 */
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_PWR_MGMT_1, 0x00);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7819      	ldrb	r1, [r3, #0]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	226b      	movs	r2, #107	; 0x6b
 8000ad8:	483f      	ldr	r0, [pc, #252]	; (8000bd8 <TM_MPU6050_Init+0x168>)
 8000ada:	f7ff fd77 	bl	80005cc <TM_I2C_Write>
	
	/* Config accelerometer */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	221c      	movs	r2, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	483c      	ldr	r0, [pc, #240]	; (8000bd8 <TM_MPU6050_Init+0x168>)
 8000ae8:	f7ff fd12 	bl	8000510 <TM_I2C_Read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	f023 0318 	bic.w	r3, r3, #24
 8000af8:	b25a      	sxtb	r2, r3
 8000afa:	78bb      	ldrb	r3, [r7, #2]
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, temp);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7819      	ldrb	r1, [r3, #0]
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	221c      	movs	r2, #28
 8000b0e:	4832      	ldr	r0, [pc, #200]	; (8000bd8 <TM_MPU6050_Init+0x168>)
 8000b10:	f7ff fd5c 	bl	80005cc <TM_I2C_Write>
	
	/* Config gyroscope */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	221b      	movs	r2, #27
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	482e      	ldr	r0, [pc, #184]	; (8000bd8 <TM_MPU6050_Init+0x168>)
 8000b1e:	f7ff fcf7 	bl	8000510 <TM_I2C_Read>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	f023 0318 	bic.w	r3, r3, #24
 8000b2e:	b25a      	sxtb	r2, r3
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, temp);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7819      	ldrb	r1, [r3, #0]
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	221b      	movs	r2, #27
 8000b44:	4824      	ldr	r0, [pc, #144]	; (8000bd8 <TM_MPU6050_Init+0x168>)
 8000b46:	f7ff fd41 	bl	80005cc <TM_I2C_Write>
	
	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8000b4a:	78bb      	ldrb	r3, [r7, #2]
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d81e      	bhi.n	8000b8e <TM_MPU6050_Init+0x11e>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <TM_MPU6050_Init+0xe8>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b69 	.word	0x08000b69
 8000b5c:	08000b73 	.word	0x08000b73
 8000b60:	08000b7d 	.word	0x08000b7d
 8000b64:	08000b87 	.word	0x08000b87
		case TM_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2; 
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8000b6e:	609a      	str	r2, [r3, #8]
			break;
 8000b70:	e00e      	b.n	8000b90 <TM_MPU6050_Init+0x120>
		case TM_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4; 
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8000b78:	609a      	str	r2, [r3, #8]
			break;
 8000b7a:	e009      	b.n	8000b90 <TM_MPU6050_Init+0x120>
		case TM_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8; 
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8000b82:	609a      	str	r2, [r3, #8]
			break;
 8000b84:	e004      	b.n	8000b90 <TM_MPU6050_Init+0x120>
		case TM_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16; 
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8000b8c:	609a      	str	r2, [r3, #8]
		default:
			break;
 8000b8e:	bf00      	nop
	}
	
	switch (GyroscopeSensitivity) {
 8000b90:	787b      	ldrb	r3, [r7, #1]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d819      	bhi.n	8000bca <TM_MPU6050_Init+0x15a>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <TM_MPU6050_Init+0x12c>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bad 	.word	0x08000bad
 8000ba0:	08000bb5 	.word	0x08000bb5
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000bc5 	.word	0x08000bc5
		case TM_MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250; 
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <TM_MPU6050_Init+0x16c>)
 8000bb0:	605a      	str	r2, [r3, #4]
			break;
 8000bb2:	e00b      	b.n	8000bcc <TM_MPU6050_Init+0x15c>
		case TM_MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500; 
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <TM_MPU6050_Init+0x170>)
 8000bb8:	605a      	str	r2, [r3, #4]
			break;
 8000bba:	e007      	b.n	8000bcc <TM_MPU6050_Init+0x15c>
		case TM_MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000; 
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <TM_MPU6050_Init+0x174>)
 8000bc0:	605a      	str	r2, [r3, #4]
			break;
 8000bc2:	e003      	b.n	8000bcc <TM_MPU6050_Init+0x15c>
		case TM_MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000; 
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <TM_MPU6050_Init+0x178>)
 8000bc8:	605a      	str	r2, [r3, #4]
		default:
			break;
 8000bca:	bf00      	nop
	}
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40005c00 	.word	0x40005c00
 8000bdc:	3bfa232d 	.word	0x3bfa232d
 8000be0:	3c7a232d 	.word	0x3c7a232d
 8000be4:	3cf9c190 	.word	0x3cf9c190
 8000be8:	3d79c190 	.word	0x3d79c190

08000bec <TM_MPU6050_ReadAccelerometer>:

TM_MPU6050_Result_t TM_MPU6050_ReadAccelerometer(TM_MPU6050_t* DataStruct) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	
	/* Read accelerometer data */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_XOUT_H, data, 6);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7819      	ldrb	r1, [r3, #0]
 8000bf8:	f107 0208 	add.w	r2, r7, #8
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	4613      	mov	r3, r2
 8000c02:	223b      	movs	r2, #59	; 0x3b
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <TM_MPU6050_ReadAccelerometer+0x60>)
 8000c06:	f7ff fca9 	bl	800055c <TM_I2C_ReadMulti>
	
	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);	
 8000c0a:	7a3b      	ldrb	r3, [r7, #8]
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	7a7b      	ldrb	r3, [r7, #9]
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21a      	sxth	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	7afb      	ldrb	r3, [r7, #11]
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8000c2e:	7b3b      	ldrb	r3, [r7, #12]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	7b7b      	ldrb	r3, [r7, #13]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	821a      	strh	r2, [r3, #16]
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40005c00 	.word	0x40005c00

08000c50 <TM_MPU6050_ReadGyroscope>:

TM_MPU6050_Result_t TM_MPU6050_ReadGyroscope(TM_MPU6050_t* DataStruct) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	
	/* Read gyroscope data */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_XOUT_H, data, 6);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7819      	ldrb	r1, [r3, #0]
 8000c5c:	f107 0208 	add.w	r2, r7, #8
 8000c60:	2306      	movs	r3, #6
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	4613      	mov	r3, r2
 8000c66:	2243      	movs	r2, #67	; 0x43
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <TM_MPU6050_ReadGyroscope+0x60>)
 8000c6a:	f7ff fc77 	bl	800055c <TM_I2C_ReadMulti>
	
	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8000c6e:	7a3b      	ldrb	r3, [r7, #8]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	7a7b      	ldrb	r3, [r7, #9]
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8000c80:	7abb      	ldrb	r3, [r7, #10]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7afb      	ldrb	r3, [r7, #11]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8000c92:	7b3b      	ldrb	r3, [r7, #12]
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	7b7b      	ldrb	r3, [r7, #13]
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40005c00 	.word	0x40005c00

08000cb4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73bb      	strb	r3, [r7, #14]
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	78db      	ldrb	r3, [r3, #3]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d038      	beq.n	8000d42 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <NVIC_Init+0xbc>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	f1c3 0304 	rsb	r3, r3, #4
 8000ce4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ce6:	7b7a      	ldrb	r2, [r7, #13]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	fa42 f303 	asr.w	r3, r2, r3
 8000cee:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	789a      	ldrb	r2, [r3, #2]
 8000d02:	7b7b      	ldrb	r3, [r7, #13]
 8000d04:	4013      	ands	r3, r2
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <NVIC_Init+0xc0>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <NVIC_Init+0xc0>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	095b      	lsrs	r3, r3, #5
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	f003 031f 	and.w	r3, r3, #31
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d40:	e00f      	b.n	8000d62 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d42:	490c      	ldr	r1, [pc, #48]	; (8000d74 <NVIC_Init+0xc0>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	095b      	lsrs	r3, r3, #5
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	2201      	movs	r2, #1
 8000d58:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d5a:	f100 0320 	add.w	r3, r0, #32
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <FLASH_Unlock+0x24>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	da05      	bge.n	8000d90 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <FLASH_Unlock+0x24>)
 8000d86:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <FLASH_Unlock+0x28>)
 8000d88:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <FLASH_Unlock+0x24>)
 8000d8c:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <FLASH_Unlock+0x2c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  }  
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00
 8000da0:	45670123 	.word	0x45670123
 8000da4:	cdef89ab 	.word	0xcdef89ab

08000da8 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8000db8:	2308      	movs	r3, #8
 8000dba:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	e010      	b.n	8000dea <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d103      	bne.n	8000dd6 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e009      	b.n	8000dea <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d103      	bne.n	8000de4 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8000ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	e002      	b.n	8000dea <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000de4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de8:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8000dea:	f000 f8a7 	bl	8000f3c <FLASH_WaitForLastOperation>
 8000dee:	4603      	mov	r3, r0
 8000df0:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 8000df2:	7afb      	ldrb	r3, [r7, #11]
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d12f      	bne.n	8000e58 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8000df8:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e02:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8000e04:	4917      	ldr	r1, [pc, #92]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e08:	691a      	ldr	r2, [r3, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e1a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8000e1c:	4911      	ldr	r1, [pc, #68]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e36:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8000e38:	f000 f880 	bl	8000f3c <FLASH_WaitForLastOperation>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8000e40:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	f023 0302 	bic.w	r3, r3, #2
 8000e4a:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8000e4c:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <FLASH_EraseSector+0xbc>)
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e56:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8000e58:	7afb      	ldrb	r3, [r7, #11]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8000e74:	2308      	movs	r3, #8
 8000e76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8000e78:	f000 f860 	bl	8000f3c <FLASH_WaitForLastOperation>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d11e      	bne.n	8000ec4 <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <FLASH_ProgramHalfWord+0x68>)
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <FLASH_ProgramHalfWord+0x68>)
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e90:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <FLASH_ProgramHalfWord+0x68>)
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <FLASH_ProgramHalfWord+0x68>)
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <FLASH_ProgramHalfWord+0x68>)
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <FLASH_ProgramHalfWord+0x68>)
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8000eb0:	f000 f844 	bl	8000f3c <FLASH_WaitForLastOperation>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000eb8:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <FLASH_ProgramHalfWord+0x68>)
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <FLASH_ProgramHalfWord+0x68>)
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	f023 0301 	bic.w	r3, r3, #1
 8000ec2:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8000eda:	2308      	movs	r3, #8
 8000edc:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <FLASH_GetStatus+0x64>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 8000eea:	2301      	movs	r3, #1
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e01c      	b.n	8000f2a <FLASH_GetStatus+0x56>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <FLASH_GetStatus+0x64>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	f003 0310 	and.w	r3, r3, #16
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8000efc:	2305      	movs	r3, #5
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	e013      	b.n	8000f2a <FLASH_GetStatus+0x56>
    }
    else
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <FLASH_GetStatus+0x64>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <FLASH_GetStatus+0x40>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8000f0e:	2306      	movs	r3, #6
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	e00a      	b.n	8000f2a <FLASH_GetStatus+0x56>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <FLASH_GetStatus+0x64>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <FLASH_GetStatus+0x52>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8000f20:	2307      	movs	r3, #7
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	e001      	b.n	8000f2a <FLASH_GetStatus+0x56>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 8000f26:	2308      	movs	r3, #8
 8000f28:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8000f42:	2308      	movs	r3, #8
 8000f44:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8000f46:	f7ff ffc5 	bl	8000ed4 <FLASH_GetStatus>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8000f4e:	e003      	b.n	8000f58 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8000f50:	f7ff ffc0 	bl	8000ed4 <FLASH_GetStatus>
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d0f7      	beq.n	8000f50 <FLASH_WaitForLastOperation+0x14>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	b2db      	uxtb	r3, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e076      	b.n	8001076 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d165      	bne.n	8001070 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2103      	movs	r1, #3
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	791b      	ldrb	r3, [r3, #4]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	791b      	ldrb	r3, [r3, #4]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d003      	beq.n	8000fe2 <GPIO_Init+0x76>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	791b      	ldrb	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d12e      	bne.n	8001040 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2103      	movs	r1, #3
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	795b      	ldrb	r3, [r3, #5]
 8001000:	4619      	mov	r1, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	b29b      	uxth	r3, r3
 8001018:	2101      	movs	r1, #1
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	401a      	ands	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	799b      	ldrb	r3, [r3, #6]
 800102e:	4619      	mov	r1, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	b29b      	uxth	r3, r3
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	b29b      	uxth	r3, r3
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	b29b      	uxth	r3, r3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2103      	movs	r1, #3
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	401a      	ands	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	79db      	ldrb	r3, [r3, #7]
 8001060:	4619      	mov	r1, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3301      	adds	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d985      	bls.n	8000f88 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800107c:	bf00      	nop
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001096:	2300      	movs	r3, #0
 8001098:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800109a:	2304      	movs	r3, #4
 800109c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800109e:	4b57      	ldr	r3, [pc, #348]	; (80011fc <I2C_Init+0x174>)
 80010a0:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	889b      	ldrh	r3, [r3, #4]
 80010a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80010a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f8d9 	bl	800126c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <I2C_Init+0x178>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80010ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010ce:	4313      	orrs	r3, r2
 80010d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010d6:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a44      	ldr	r2, [pc, #272]	; (8001204 <I2C_Init+0x17c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d815      	bhi.n	8001122 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001106:	2b03      	cmp	r3, #3
 8001108:	d801      	bhi.n	800110e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800110a:	2304      	movs	r3, #4
 800110c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800110e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001112:	4313      	orrs	r3, r2
 8001114:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001118:	3301      	adds	r3, #1
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	841a      	strh	r2, [r3, #32]
 8001120:	e040      	b.n	80011a4 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	88db      	ldrh	r3, [r3, #6]
 8001126:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800112a:	4293      	cmp	r3, r2
 800112c:	d109      	bne.n	8001142 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001140:	e00e      	b.n	8001160 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009a      	lsls	r2, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800116a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001174:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001176:	4313      	orrs	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800117e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001182:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001186:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <I2C_Init+0x180>)
 8001190:	fb82 1203 	smull	r1, r2, r2, r3
 8001194:	1192      	asrs	r2, r2, #6
 8001196:	17db      	asrs	r3, r3, #31
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011a8:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80011c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011c2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80011c6:	f023 0302 	bic.w	r3, r3, #2
 80011ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	889a      	ldrh	r2, [r3, #4]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	895b      	ldrh	r3, [r3, #10]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011da:	4313      	orrs	r3, r2
 80011dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011e2:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	899a      	ldrh	r2, [r3, #12]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	891b      	ldrh	r3, [r3, #8]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	811a      	strh	r2, [r3, #8]
}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	007a1200 	.word	0x007a1200
 8001200:	431bde83 	.word	0x431bde83
 8001204:	000186a0 	.word	0x000186a0
 8001208:	10624dd3 	.word	0x10624dd3

0800120c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	8a9b      	ldrh	r3, [r3, #20]
 800122a:	b29b      	uxth	r3, r3
 800122c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	8b1b      	ldrh	r3, [r3, #24]
 8001232:	b29b      	uxth	r3, r3
 8001234:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4313      	orrs	r3, r2
 8001242:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001246:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	401a      	ands	r2, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d102      	bne.n	800125a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001254:	2301      	movs	r3, #1
 8001256:	75fb      	strb	r3, [r7, #23]
 8001258:	e001      	b.n	800125e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800125e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001260:	4618      	mov	r0, r3
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	2302      	movs	r3, #2
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	2302      	movs	r3, #2
 800128a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800128c:	4b48      	ldr	r3, [pc, #288]	; (80013b0 <RCC_GetClocksFreq+0x144>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b04      	cmp	r3, #4
 800129a:	d007      	beq.n	80012ac <RCC_GetClocksFreq+0x40>
 800129c:	2b08      	cmp	r3, #8
 800129e:	d009      	beq.n	80012b4 <RCC_GetClocksFreq+0x48>
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d13f      	bne.n	8001324 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a43      	ldr	r2, [pc, #268]	; (80013b4 <RCC_GetClocksFreq+0x148>)
 80012a8:	601a      	str	r2, [r3, #0]
      break;
 80012aa:	e03f      	b.n	800132c <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a42      	ldr	r2, [pc, #264]	; (80013b8 <RCC_GetClocksFreq+0x14c>)
 80012b0:	601a      	str	r2, [r3, #0]
      break;
 80012b2:	e03b      	b.n	800132c <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80012b4:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <RCC_GetClocksFreq+0x144>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012bc:	0d9b      	lsrs	r3, r3, #22
 80012be:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c0:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <RCC_GetClocksFreq+0x144>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012c8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00d      	beq.n	80012ec <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80012d0:	4a39      	ldr	r2, [pc, #228]	; (80013b8 <RCC_GetClocksFreq+0x14c>)
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012d8:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <RCC_GetClocksFreq+0x144>)
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012e0:	400b      	ands	r3, r1
 80012e2:	099b      	lsrs	r3, r3, #6
 80012e4:	fb03 f302 	mul.w	r3, r3, r2
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	e00c      	b.n	8001306 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80012ec:	4a31      	ldr	r2, [pc, #196]	; (80013b4 <RCC_GetClocksFreq+0x148>)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80012f4:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <RCC_GetClocksFreq+0x144>)
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012fc:	400b      	ands	r3, r1
 80012fe:	099b      	lsrs	r3, r3, #6
 8001300:	fb03 f302 	mul.w	r3, r3, r2
 8001304:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <RCC_GetClocksFreq+0x144>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130e:	0c1b      	lsrs	r3, r3, #16
 8001310:	3301      	adds	r3, #1
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	fbb2 f2f3 	udiv	r2, r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
      break;
 8001322:	e003      	b.n	800132c <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a23      	ldr	r2, [pc, #140]	; (80013b4 <RCC_GetClocksFreq+0x148>)
 8001328:	601a      	str	r2, [r3, #0]
      break;
 800132a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <RCC_GetClocksFreq+0x144>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001334:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800133c:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <RCC_GetClocksFreq+0x150>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	40da      	lsrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <RCC_GetClocksFreq+0x144>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800135c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	0a9b      	lsrs	r3, r3, #10
 8001362:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <RCC_GetClocksFreq+0x150>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	40da      	lsrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <RCC_GetClocksFreq+0x144>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001384:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	0b5b      	lsrs	r3, r3, #13
 800138a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <RCC_GetClocksFreq+0x150>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	40da      	lsrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	60da      	str	r2, [r3, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3724      	adds	r7, #36	; 0x24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40023800 	.word	0x40023800
 80013b4:	00f42400 	.word	0x00f42400
 80013b8:	007a1200 	.word	0x007a1200
 80013bc:	20000018 	.word	0x20000018

080013c0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80013d2:	490a      	ldr	r1, [pc, #40]	; (80013fc <RCC_AHB1PeriphClockCmd+0x3c>)
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <RCC_AHB1PeriphClockCmd+0x3c>)
 80013d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4313      	orrs	r3, r2
 80013dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80013de:	e006      	b.n	80013ee <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80013e0:	4906      	ldr	r1, [pc, #24]	; (80013fc <RCC_AHB1PeriphClockCmd+0x3c>)
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <RCC_AHB1PeriphClockCmd+0x3c>)
 80013e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4013      	ands	r3, r2
 80013ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001412:	490a      	ldr	r1, [pc, #40]	; (800143c <RCC_APB1PeriphClockCmd+0x3c>)
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <RCC_APB1PeriphClockCmd+0x3c>)
 8001416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4313      	orrs	r3, r2
 800141c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800141e:	e006      	b.n	800142e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001420:	4906      	ldr	r1, [pc, #24]	; (800143c <RCC_APB1PeriphClockCmd+0x3c>)
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <RCC_APB1PeriphClockCmd+0x3c>)
 8001424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	43db      	mvns	r3, r3
 800142a:	4013      	ands	r3, r2
 800142c:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001452:	490a      	ldr	r1, [pc, #40]	; (800147c <RCC_APB1PeriphResetCmd+0x3c>)
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <RCC_APB1PeriphResetCmd+0x3c>)
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4313      	orrs	r3, r2
 800145c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800145e:	e006      	b.n	800146e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001460:	4906      	ldr	r1, [pc, #24]	; (800147c <RCC_APB1PeriphResetCmd+0x3c>)
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <RCC_APB1PeriphResetCmd+0x3c>)
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	43db      	mvns	r3, r3
 800146a:	4013      	ands	r3, r2
 800146c:	620b      	str	r3, [r1, #32]
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <RCC_APB2PeriphResetCmd+0x3c>)
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <RCC_APB2PeriphResetCmd+0x3c>)
 8001496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4313      	orrs	r3, r2
 800149c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800149e:	e006      	b.n	80014ae <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80014a0:	4906      	ldr	r1, [pc, #24]	; (80014bc <RCC_APB2PeriphResetCmd+0x3c>)
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <RCC_APB2PeriphResetCmd+0x3c>)
 80014a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a60      	ldr	r2, [pc, #384]	; (800164c <TIM_DeInit+0x18c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d108      	bne.n	80014e2 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80014d0:	2101      	movs	r1, #1
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff ffd4 	bl	8001480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80014d8:	2100      	movs	r1, #0
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff ffd0 	bl	8001480 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80014e0:	e0af      	b.n	8001642 <TIM_DeInit+0x182>
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e8:	d108      	bne.n	80014fc <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80014ea:	2101      	movs	r1, #1
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff ffa7 	bl	8001440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80014f2:	2100      	movs	r1, #0
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff ffa3 	bl	8001440 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80014fa:	e0a2      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a54      	ldr	r2, [pc, #336]	; (8001650 <TIM_DeInit+0x190>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d108      	bne.n	8001516 <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001504:	2101      	movs	r1, #1
 8001506:	2002      	movs	r0, #2
 8001508:	f7ff ff9a 	bl	8001440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800150c:	2100      	movs	r1, #0
 800150e:	2002      	movs	r0, #2
 8001510:	f7ff ff96 	bl	8001440 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001514:	e095      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <TIM_DeInit+0x194>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d108      	bne.n	8001530 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800151e:	2101      	movs	r1, #1
 8001520:	2004      	movs	r0, #4
 8001522:	f7ff ff8d 	bl	8001440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001526:	2100      	movs	r1, #0
 8001528:	2004      	movs	r0, #4
 800152a:	f7ff ff89 	bl	8001440 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800152e:	e088      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a49      	ldr	r2, [pc, #292]	; (8001658 <TIM_DeInit+0x198>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d108      	bne.n	800154a <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001538:	2101      	movs	r1, #1
 800153a:	2008      	movs	r0, #8
 800153c:	f7ff ff80 	bl	8001440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001540:	2100      	movs	r1, #0
 8001542:	2008      	movs	r0, #8
 8001544:	f7ff ff7c 	bl	8001440 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001548:	e07b      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a43      	ldr	r2, [pc, #268]	; (800165c <TIM_DeInit+0x19c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d108      	bne.n	8001564 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001552:	2101      	movs	r1, #1
 8001554:	2010      	movs	r0, #16
 8001556:	f7ff ff73 	bl	8001440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800155a:	2100      	movs	r1, #0
 800155c:	2010      	movs	r0, #16
 800155e:	f7ff ff6f 	bl	8001440 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001562:	e06e      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a3e      	ldr	r2, [pc, #248]	; (8001660 <TIM_DeInit+0x1a0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d108      	bne.n	800157e <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800156c:	2101      	movs	r1, #1
 800156e:	2020      	movs	r0, #32
 8001570:	f7ff ff66 	bl	8001440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001574:	2100      	movs	r1, #0
 8001576:	2020      	movs	r0, #32
 8001578:	f7ff ff62 	bl	8001440 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800157c:	e061      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <TIM_DeInit+0x1a4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d108      	bne.n	8001598 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001586:	2101      	movs	r1, #1
 8001588:	2002      	movs	r0, #2
 800158a:	f7ff ff79 	bl	8001480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800158e:	2100      	movs	r1, #0
 8001590:	2002      	movs	r0, #2
 8001592:	f7ff ff75 	bl	8001480 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001596:	e054      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a33      	ldr	r2, [pc, #204]	; (8001668 <TIM_DeInit+0x1a8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d10a      	bne.n	80015b6 <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80015a0:	2101      	movs	r1, #1
 80015a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015a6:	f7ff ff6b 	bl	8001480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80015aa:	2100      	movs	r1, #0
 80015ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80015b0:	f7ff ff66 	bl	8001480 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80015b4:	e045      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a2c      	ldr	r2, [pc, #176]	; (800166c <TIM_DeInit+0x1ac>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d10a      	bne.n	80015d4 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80015be:	2101      	movs	r1, #1
 80015c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015c4:	f7ff ff5c 	bl	8001480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80015c8:	2100      	movs	r1, #0
 80015ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015ce:	f7ff ff57 	bl	8001480 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80015d2:	e036      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a26      	ldr	r2, [pc, #152]	; (8001670 <TIM_DeInit+0x1b0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10a      	bne.n	80015f2 <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80015dc:	2101      	movs	r1, #1
 80015de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80015e2:	f7ff ff4d 	bl	8001480 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80015e6:	2100      	movs	r1, #0
 80015e8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80015ec:	f7ff ff48 	bl	8001480 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80015f0:	e027      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <TIM_DeInit+0x1b4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d108      	bne.n	800160c <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80015fa:	2101      	movs	r1, #1
 80015fc:	2040      	movs	r0, #64	; 0x40
 80015fe:	f7ff ff1f 	bl	8001440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001602:	2100      	movs	r1, #0
 8001604:	2040      	movs	r0, #64	; 0x40
 8001606:	f7ff ff1b 	bl	8001440 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800160a:	e01a      	b.n	8001642 <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <TIM_DeInit+0x1b8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d108      	bne.n	8001626 <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001614:	2101      	movs	r1, #1
 8001616:	2080      	movs	r0, #128	; 0x80
 8001618:	f7ff ff12 	bl	8001440 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800161c:	2100      	movs	r1, #0
 800161e:	2080      	movs	r0, #128	; 0x80
 8001620:	f7ff ff0e 	bl	8001440 <RCC_APB1PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001624:	e00d      	b.n	8001642 <TIM_DeInit+0x182>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <TIM_DeInit+0x1bc>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d109      	bne.n	8001642 <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800162e:	2101      	movs	r1, #1
 8001630:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001634:	f7ff ff04 	bl	8001440 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001638:	2100      	movs	r1, #0
 800163a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800163e:	f7ff feff 	bl	8001440 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40010000 	.word	0x40010000
 8001650:	40000400 	.word	0x40000400
 8001654:	40000800 	.word	0x40000800
 8001658:	40000c00 	.word	0x40000c00
 800165c:	40001000 	.word	0x40001000
 8001660:	40001400 	.word	0x40001400
 8001664:	40010400 	.word	0x40010400
 8001668:	40014000 	.word	0x40014000
 800166c:	40014400 	.word	0x40014400
 8001670:	40014800 	.word	0x40014800
 8001674:	40001800 	.word	0x40001800
 8001678:	40001c00 	.word	0x40001c00
 800167c:	40002000 	.word	0x40002000

08001680 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <TIM_TimeBaseInit+0xbc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d013      	beq.n	80016c4 <TIM_TimeBaseInit+0x44>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a28      	ldr	r2, [pc, #160]	; (8001740 <TIM_TimeBaseInit+0xc0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00f      	beq.n	80016c4 <TIM_TimeBaseInit+0x44>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016aa:	d00b      	beq.n	80016c4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a25      	ldr	r2, [pc, #148]	; (8001744 <TIM_TimeBaseInit+0xc4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <TIM_TimeBaseInit+0x44>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a24      	ldr	r2, [pc, #144]	; (8001748 <TIM_TimeBaseInit+0xc8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d003      	beq.n	80016c4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a23      	ldr	r2, [pc, #140]	; (800174c <TIM_TimeBaseInit+0xcc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d108      	bne.n	80016d6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ca:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	885a      	ldrh	r2, [r3, #2]
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <TIM_TimeBaseInit+0xd0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00c      	beq.n	80016f8 <TIM_TimeBaseInit+0x78>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <TIM_TimeBaseInit+0xd4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d008      	beq.n	80016f8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ec:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	891a      	ldrh	r2, [r3, #8]
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	89fa      	ldrh	r2, [r7, #14]
 80016fc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	881a      	ldrh	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <TIM_TimeBaseInit+0xbc>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d003      	beq.n	800171e <TIM_TimeBaseInit+0x9e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a09      	ldr	r2, [pc, #36]	; (8001740 <TIM_TimeBaseInit+0xc0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d104      	bne.n	8001728 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	7a9b      	ldrb	r3, [r3, #10]
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	829a      	strh	r2, [r3, #20]
}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40010000 	.word	0x40010000
 8001740:	40010400 	.word	0x40010400
 8001744:	40000400 	.word	0x40000400
 8001748:	40000800 	.word	0x40000800
 800174c:	40000c00 	.word	0x40000c00
 8001750:	40001000 	.word	0x40001000
 8001754:	40001400 	.word	0x40001400

08001758 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
 800177a:	e007      	b.n	800178c <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	b29a      	uxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	801a      	strh	r2, [r3, #0]
  }
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80017ba:	e007      	b.n	80017cc <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	801a      	strh	r2, [r3, #0]
  }
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	899b      	ldrh	r3, [r3, #12]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80017fe:	e009      	b.n	8001814 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	899b      	ldrh	r3, [r3, #12]
 8001804:	b29a      	uxth	r2, r3
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	43db      	mvns	r3, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	4013      	ands	r3, r2
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	819a      	strh	r2, [r3, #12]
  }
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	43db      	mvns	r3, r3
 8001830:	b29a      	uxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	821a      	strh	r2, [r3, #16]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop

08001844 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4a10      	ldr	r2, [pc, #64]	; (8001894 <STM_EVAL_LEDInit+0x50>)
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	2101      	movs	r1, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fdb1 	bl	80013c0 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <STM_EVAL_LEDInit+0x54>)
 8001862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001868:	2301      	movs	r3, #1
 800186a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800186c:	2300      	movs	r3, #0
 800186e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001874:	2302      	movs	r3, #2
 8001876:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <STM_EVAL_LEDInit+0x58>)
 800187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001880:	f107 0208 	add.w	r2, r7, #8
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fb70 	bl	8000f6c <GPIO_Init>
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	080024f4 	.word	0x080024f4
 8001898:	080024ec 	.word	0x080024ec
 800189c:	20000028 	.word	0x20000028

080018a0 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <STM_EVAL_LEDOn+0x28>)
 80018ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b2:	79fa      	ldrb	r2, [r7, #7]
 80018b4:	4905      	ldr	r1, [pc, #20]	; (80018cc <STM_EVAL_LEDOn+0x2c>)
 80018b6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80018ba:	831a      	strh	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	20000028 	.word	0x20000028
 80018cc:	080024ec 	.word	0x080024ec

080018d0 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4a09      	ldr	r2, [pc, #36]	; (8001904 <STM_EVAL_LEDToggle+0x34>)
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	79fa      	ldrb	r2, [r7, #7]
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <STM_EVAL_LEDToggle+0x34>)
 80018e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018ea:	6952      	ldr	r2, [r2, #20]
 80018ec:	79f9      	ldrb	r1, [r7, #7]
 80018ee:	4806      	ldr	r0, [pc, #24]	; (8001908 <STM_EVAL_LEDToggle+0x38>)
 80018f0:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80018f4:	404a      	eors	r2, r1
 80018f6:	615a      	str	r2, [r3, #20]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	20000028 	.word	0x20000028
 8001908:	080024ec 	.word	0x080024ec

0800190c <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001912:	2306      	movs	r3, #6
 8001914:	817b      	strh	r3, [r7, #10]
 8001916:	2306      	movs	r3, #6
 8001918:	813b      	strh	r3, [r7, #8]
  uint16_t VarIdx = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	81fb      	strh	r3, [r7, #14]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	80fb      	strh	r3, [r7, #6]
 8001922:	2300      	movs	r3, #0
 8001924:	80bb      	strh	r3, [r7, #4]
  int16_t x = -1;
 8001926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192a:	81bb      	strh	r3, [r7, #12]
  uint16_t  FlashStatus;

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800192c:	4b9d      	ldr	r3, [pc, #628]	; (8001ba4 <EE_Init+0x298>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	817b      	strh	r3, [r7, #10]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001932:	4b9d      	ldr	r3, [pc, #628]	; (8001ba8 <EE_Init+0x29c>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	813b      	strh	r3, [r7, #8]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8001938:	897b      	ldrh	r3, [r7, #10]
 800193a:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800193e:	4293      	cmp	r3, r2
 8001940:	d03c      	beq.n	80019bc <EE_Init+0xb0>
 8001942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001946:	4293      	cmp	r3, r2
 8001948:	d003      	beq.n	8001952 <EE_Init+0x46>
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80ab 	beq.w	8001aa6 <EE_Init+0x19a>
 8001950:	e112      	b.n	8001b78 <EE_Init+0x26c>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8001952:	893b      	ldrh	r3, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10b      	bne.n	8001970 <EE_Init+0x64>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_EraseSector(PAGE0_ID,VOLTAGE_RANGE);
 8001958:	2102      	movs	r1, #2
 800195a:	2028      	movs	r0, #40	; 0x28
 800195c:	f7ff fa24 	bl	8000da8 <FLASH_EraseSector>
 8001960:	4603      	mov	r3, r0
 8001962:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	2b08      	cmp	r3, #8
 8001968:	f000 810f 	beq.w	8001b8a <EE_Init+0x27e>
        {
          return FlashStatus;
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	e114      	b.n	8001b9a <EE_Init+0x28e>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001976:	4293      	cmp	r3, r2
 8001978:	d116      	bne.n	80019a8 <EE_Init+0x9c>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_EraseSector(PAGE0_ID, VOLTAGE_RANGE);
 800197a:	2102      	movs	r1, #2
 800197c:	2028      	movs	r0, #40	; 0x28
 800197e:	f7ff fa13 	bl	8000da8 <FLASH_EraseSector>
 8001982:	4603      	mov	r3, r0
 8001984:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001986:	887b      	ldrh	r3, [r7, #2]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d001      	beq.n	8001990 <EE_Init+0x84>
        {
          return FlashStatus;
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	e104      	b.n	8001b9a <EE_Init+0x28e>
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001990:	2100      	movs	r1, #0
 8001992:	4885      	ldr	r0, [pc, #532]	; (8001ba8 <EE_Init+0x29c>)
 8001994:	f7ff fa68 	bl	8000e68 <FLASH_ProgramHalfWord>
 8001998:	4603      	mov	r3, r0
 800199a:	807b      	strh	r3, [r7, #2]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	f000 80f3 	beq.w	8001b8a <EE_Init+0x27e>
        {
          return FlashStatus;
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	e0f8      	b.n	8001b9a <EE_Init+0x28e>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80019a8:	f000 f97c 	bl	8001ca4 <EE_Format>
 80019ac:	4603      	mov	r3, r0
 80019ae:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	f000 80e9 	beq.w	8001b8a <EE_Init+0x27e>
        {
          return FlashStatus;
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	e0ee      	b.n	8001b9a <EE_Init+0x28e>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80019bc:	893b      	ldrh	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d14d      	bne.n	8001a5e <EE_Init+0x152>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	81fb      	strh	r3, [r7, #14]
 80019c6:	e030      	b.n	8001a2a <EE_Init+0x11e>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80019c8:	4b78      	ldr	r3, [pc, #480]	; (8001bac <EE_Init+0x2a0>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	89fb      	ldrh	r3, [r7, #14]
 80019d0:	4977      	ldr	r1, [pc, #476]	; (8001bb0 <EE_Init+0x2a4>)
 80019d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d101      	bne.n	80019de <EE_Init+0xd2>
          {
            x = VarIdx;
 80019da:	89fb      	ldrh	r3, [r7, #14]
 80019dc:	81bb      	strh	r3, [r7, #12]
          }
          if (VarIdx != x)
 80019de:	89fa      	ldrh	r2, [r7, #14]
 80019e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d01d      	beq.n	8001a24 <EE_Init+0x118>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80019e8:	89fb      	ldrh	r3, [r7, #14]
 80019ea:	4a71      	ldr	r2, [pc, #452]	; (8001bb0 <EE_Init+0x2a4>)
 80019ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019f0:	4970      	ldr	r1, [pc, #448]	; (8001bb4 <EE_Init+0x2a8>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f8e2 	bl	8001bbc <EE_ReadVariable>
 80019f8:	4603      	mov	r3, r0
 80019fa:	80bb      	strh	r3, [r7, #4]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d010      	beq.n	8001a24 <EE_Init+0x118>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	4a6a      	ldr	r2, [pc, #424]	; (8001bb0 <EE_Init+0x2a4>)
 8001a06:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a0a:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <EE_Init+0x2a8>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f000 f9b5 	bl	8001d80 <EE_VerifyPageFullWriteVariable>
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d001      	beq.n	8001a24 <EE_Init+0x118>
              {
                return EepromStatus;
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	e0ba      	b.n	8001b9a <EE_Init+0x28e>

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	3301      	adds	r3, #1
 8001a28:	81fb      	strh	r3, [r7, #14]
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d9cb      	bls.n	80019c8 <EE_Init+0xbc>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001a30:	2100      	movs	r1, #0
 8001a32:	485c      	ldr	r0, [pc, #368]	; (8001ba4 <EE_Init+0x298>)
 8001a34:	f7ff fa18 	bl	8000e68 <FLASH_ProgramHalfWord>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	807b      	strh	r3, [r7, #2]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d001      	beq.n	8001a46 <EE_Init+0x13a>
        {
          return FlashStatus;
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	e0a9      	b.n	8001b9a <EE_Init+0x28e>
        }
        /* Erase Page1 */
        FlashStatus = FLASH_EraseSector(PAGE1_ID, VOLTAGE_RANGE);
 8001a46:	2102      	movs	r1, #2
 8001a48:	2030      	movs	r0, #48	; 0x30
 8001a4a:	f7ff f9ad 	bl	8000da8 <FLASH_EraseSector>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	f000 809a 	beq.w	8001b8e <EE_Init+0x282>
        {
          return FlashStatus;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	e09d      	b.n	8001b9a <EE_Init+0x28e>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001a5e:	893b      	ldrh	r3, [r7, #8]
 8001a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d115      	bne.n	8001a94 <EE_Init+0x188>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_EraseSector(PAGE1_ID, VOLTAGE_RANGE);
 8001a68:	2102      	movs	r1, #2
 8001a6a:	2030      	movs	r0, #48	; 0x30
 8001a6c:	f7ff f99c 	bl	8000da8 <FLASH_EraseSector>
 8001a70:	4603      	mov	r3, r0
 8001a72:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d001      	beq.n	8001a7e <EE_Init+0x172>
        {
          return FlashStatus;
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	e08d      	b.n	8001b9a <EE_Init+0x28e>
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4848      	ldr	r0, [pc, #288]	; (8001ba4 <EE_Init+0x298>)
 8001a82:	f7ff f9f1 	bl	8000e68 <FLASH_ProgramHalfWord>
 8001a86:	4603      	mov	r3, r0
 8001a88:	807b      	strh	r3, [r7, #2]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d07e      	beq.n	8001b8e <EE_Init+0x282>
        {
          return FlashStatus;
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	e082      	b.n	8001b9a <EE_Init+0x28e>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001a94:	f000 f906 	bl	8001ca4 <EE_Format>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d075      	beq.n	8001b8e <EE_Init+0x282>
        {
          return FlashStatus;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	e079      	b.n	8001b9a <EE_Init+0x28e>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8001aa6:	893b      	ldrh	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d108      	bne.n	8001abe <EE_Init+0x1b2>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001aac:	f000 f8fa 	bl	8001ca4 <EE_Format>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d06b      	beq.n	8001b92 <EE_Init+0x286>
        {
          return FlashStatus;
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	e06d      	b.n	8001b9a <EE_Init+0x28e>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8001abe:	893b      	ldrh	r3, [r7, #8]
 8001ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d10a      	bne.n	8001ade <EE_Init+0x1d2>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_EraseSector(PAGE1_ID, VOLTAGE_RANGE);
 8001ac8:	2102      	movs	r1, #2
 8001aca:	2030      	movs	r0, #48	; 0x30
 8001acc:	f7ff f96c 	bl	8000da8 <FLASH_EraseSector>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d05b      	beq.n	8001b92 <EE_Init+0x286>
        {
          return FlashStatus;
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	e05d      	b.n	8001b9a <EE_Init+0x28e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	81fb      	strh	r3, [r7, #14]
 8001ae2:	e030      	b.n	8001b46 <EE_Init+0x23a>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001ae4:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <EE_Init+0x2ac>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	4930      	ldr	r1, [pc, #192]	; (8001bb0 <EE_Init+0x2a4>)
 8001aee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d101      	bne.n	8001afa <EE_Init+0x1ee>
          {
            x = VarIdx;
 8001af6:	89fb      	ldrh	r3, [r7, #14]
 8001af8:	81bb      	strh	r3, [r7, #12]
          }
          if (VarIdx != x)
 8001afa:	89fa      	ldrh	r2, [r7, #14]
 8001afc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d01d      	beq.n	8001b40 <EE_Init+0x234>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001b04:	89fb      	ldrh	r3, [r7, #14]
 8001b06:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <EE_Init+0x2a4>)
 8001b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b0c:	4929      	ldr	r1, [pc, #164]	; (8001bb4 <EE_Init+0x2a8>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f854 	bl	8001bbc <EE_ReadVariable>
 8001b14:	4603      	mov	r3, r0
 8001b16:	80bb      	strh	r3, [r7, #4]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d010      	beq.n	8001b40 <EE_Init+0x234>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001b1e:	89fb      	ldrh	r3, [r7, #14]
 8001b20:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <EE_Init+0x2a4>)
 8001b22:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <EE_Init+0x2a8>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	f000 f927 	bl	8001d80 <EE_VerifyPageFullWriteVariable>
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d001      	beq.n	8001b40 <EE_Init+0x234>
              {
                return EepromStatus;
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	e02c      	b.n	8001b9a <EE_Init+0x28e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001b40:	89fb      	ldrh	r3, [r7, #14]
 8001b42:	3301      	adds	r3, #1
 8001b44:	81fb      	strh	r3, [r7, #14]
 8001b46:	89fb      	ldrh	r3, [r7, #14]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d9cb      	bls.n	8001ae4 <EE_Init+0x1d8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4816      	ldr	r0, [pc, #88]	; (8001ba8 <EE_Init+0x29c>)
 8001b50:	f7ff f98a 	bl	8000e68 <FLASH_ProgramHalfWord>
 8001b54:	4603      	mov	r3, r0
 8001b56:	807b      	strh	r3, [r7, #2]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d001      	beq.n	8001b62 <EE_Init+0x256>
        {
          return FlashStatus;
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	e01b      	b.n	8001b9a <EE_Init+0x28e>
        }
        /* Erase Page0 */
        FlashStatus = FLASH_EraseSector(PAGE0_ID, VOLTAGE_RANGE);
 8001b62:	2102      	movs	r1, #2
 8001b64:	2028      	movs	r0, #40	; 0x28
 8001b66:	f7ff f91f 	bl	8000da8 <FLASH_EraseSector>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d00e      	beq.n	8001b92 <EE_Init+0x286>
        {
          return FlashStatus;
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	e010      	b.n	8001b9a <EE_Init+0x28e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001b78:	f000 f894 	bl	8001ca4 <EE_Format>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	807b      	strh	r3, [r7, #2]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d007      	beq.n	8001b96 <EE_Init+0x28a>
      {
        return FlashStatus;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	e007      	b.n	8001b9a <EE_Init+0x28e>
        if (FlashStatus != FLASH_COMPLETE)
        {
          return FlashStatus;
        }
      }
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e004      	b.n	8001b98 <EE_Init+0x28c>
        if (FlashStatus != FLASH_COMPLETE)
        {
          return FlashStatus;
        }
      }
      break;
 8001b8e:	bf00      	nop
 8001b90:	e002      	b.n	8001b98 <EE_Init+0x28c>
        if (FlashStatus != FLASH_COMPLETE)
        {
          return FlashStatus;
        }
      }
      break;
 8001b92:	bf00      	nop
 8001b94:	e000      	b.n	8001b98 <EE_Init+0x28c>
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
      {
        return FlashStatus;
      }
      break;
 8001b96:	bf00      	nop
  }

  return FLASH_COMPLETE;
 8001b98:	2308      	movs	r3, #8
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	08020000 	.word	0x08020000
 8001ba8:	08024000 	.word	0x08024000
 8001bac:	08020006 	.word	0x08020006
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	2000006c 	.word	0x2000006c
 8001bb8:	08024006 	.word	0x08024006

08001bbc <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001bcc:	f245 5355 	movw	r3, #21845	; 0x5555
 8001bd0:	81bb      	strh	r3, [r7, #12]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <EE_ReadVariable+0x9c>)
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <EE_ReadVariable+0x9c>)
 8001bdc:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f888 	bl	8001cf4 <EE_FindValidPage>
 8001be4:	4603      	mov	r3, r0
 8001be6:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	2bab      	cmp	r3, #171	; 0xab
 8001bec:	d101      	bne.n	8001bf2 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8001bee:	23ab      	movs	r3, #171	; 0xab
 8001bf0:	e02d      	b.n	8001c4e <EE_ReadVariable+0x92>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001c00:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001c06:	89fb      	ldrh	r3, [r7, #14]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 8001c10:	fb03 f202 	mul.w	r2, r3, r2
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <EE_ReadVariable+0xa0>)
 8001c16:	4413      	add	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8001c1a:	e012      	b.n	8001c42 <EE_ReadVariable+0x86>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8001c22:	89ba      	ldrh	r2, [r7, #12]
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d108      	bne.n	8001c3c <EE_ReadVariable+0x80>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	3b02      	subs	r3, #2
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	82fb      	strh	r3, [r7, #22]

      break;
 8001c3a:	e007      	b.n	8001c4c <EE_ReadVariable+0x90>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	613b      	str	r3, [r7, #16]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1c9a      	adds	r2, r3, #2
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3e7      	bcc.n	8001c1c <EE_ReadVariable+0x60>
      /* Next address location */
      Address = Address - 4;
    }
  }
  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001c4c:	8afb      	ldrh	r3, [r7, #22]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08020000 	.word	0x08020000
 8001c5c:	0801fffe 	.word	0x0801fffe

08001c60 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	460a      	mov	r2, r1
 8001c6a:	80fb      	strh	r3, [r7, #6]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001c74:	88ba      	ldrh	r2, [r7, #4]
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f880 	bl	8001d80 <EE_VerifyPageFullWriteVariable>
 8001c80:	4603      	mov	r3, r0
 8001c82:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001c84:	89fb      	ldrh	r3, [r7, #14]
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d107      	bne.n	8001c9a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8001c8a:	88ba      	ldrh	r2, [r7, #4]
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f8d5 	bl	8001e40 <EE_PageTransfer>
 8001c96:	4603      	mov	r3, r0
 8001c98:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8001c9a:	89fb      	ldrh	r3, [r7, #14]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static FLASH_Status EE_Format(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 8001caa:	2308      	movs	r3, #8
 8001cac:	71fb      	strb	r3, [r7, #7]

  /* Erase Page0 */
  FlashStatus = FLASH_EraseSector(PAGE0_ID, VOLTAGE_RANGE);
 8001cae:	2102      	movs	r1, #2
 8001cb0:	2028      	movs	r0, #40	; 0x28
 8001cb2:	f7ff f879 	bl	8000da8 <FLASH_EraseSector>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d001      	beq.n	8001cc4 <EE_Format+0x20>
  {
    return FlashStatus;
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	e011      	b.n	8001ce8 <EE_Format+0x44>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	480a      	ldr	r0, [pc, #40]	; (8001cf0 <EE_Format+0x4c>)
 8001cc8:	f7ff f8ce 	bl	8000e68 <FLASH_ProgramHalfWord>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d001      	beq.n	8001cda <EE_Format+0x36>
  {
    return FlashStatus;
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	e006      	b.n	8001ce8 <EE_Format+0x44>
  }

  /* Erase Page1 */
  FlashStatus = FLASH_EraseSector(PAGE1_ID, VOLTAGE_RANGE);
 8001cda:	2102      	movs	r1, #2
 8001cdc:	2030      	movs	r0, #48	; 0x30
 8001cde:	f7ff f863 	bl	8000da8 <FLASH_EraseSector>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]

  /* Return Page1 erase operation status */
  return FlashStatus;
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	08020000 	.word	0x08020000

08001cf4 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001cfe:	2306      	movs	r3, #6
 8001d00:	81fb      	strh	r3, [r7, #14]
 8001d02:	2306      	movs	r3, #6
 8001d04:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <EE_FindValidPage+0x84>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <EE_FindValidPage+0x88>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <EE_FindValidPage+0x5c>
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d125      	bne.n	8001d68 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001d1c:	89bb      	ldrh	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d108      	bne.n	8001d34 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e01c      	b.n	8001d6a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001d30:	2301      	movs	r3, #1
 8001d32:	e01a      	b.n	8001d6a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001d34:	89fb      	ldrh	r3, [r7, #14]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001d3a:	89bb      	ldrh	r3, [r7, #12]
 8001d3c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001d44:	2301      	movs	r3, #1
 8001d46:	e010      	b.n	8001d6a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e00e      	b.n	8001d6a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001d4c:	23ab      	movs	r3, #171	; 0xab
 8001d4e:	e00c      	b.n	8001d6a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001d50:	89fb      	ldrh	r3, [r7, #14]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001d56:	2300      	movs	r3, #0
 8001d58:	e007      	b.n	8001d6a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001d5a:	89bb      	ldrh	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001d60:	2301      	movs	r3, #1
 8001d62:	e002      	b.n	8001d6a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001d64:	23ab      	movs	r3, #171	; 0xab
 8001d66:	e000      	b.n	8001d6a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001d68:	2300      	movs	r3, #0
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	08020000 	.word	0x08020000
 8001d7c:	08024000 	.word	0x08024000

08001d80 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	460a      	mov	r2, r1
 8001d8a:	80fb      	strh	r3, [r7, #6]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 8001d90:	2308      	movs	r3, #8
 8001d92:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <EE_VerifyPageFullWriteVariable+0xb4>)
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <EE_VerifyPageFullWriteVariable+0xb8>)
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff ffa7 	bl	8001cf4 <EE_FindValidPage>
 8001da6:	4603      	mov	r3, r0
 8001da8:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001daa:	8a3b      	ldrh	r3, [r7, #16]
 8001dac:	2bab      	cmp	r3, #171	; 0xab
 8001dae:	d101      	bne.n	8001db4 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8001db0:	23ab      	movs	r3, #171	; 0xab
 8001db2:	e03a      	b.n	8001e2a <EE_VerifyPageFullWriteVariable+0xaa>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001db4:	8a3b      	ldrh	r3, [r7, #16]
 8001db6:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001dc2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001dc8:	8a3b      	ldrh	r3, [r7, #16]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <EE_VerifyPageFullWriteVariable+0xbc>)
 8001dd8:	4413      	add	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8001ddc:	e020      	b.n	8001e20 <EE_VerifyPageFullWriteVariable+0xa0>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de6:	d118      	bne.n	8001e1a <EE_VerifyPageFullWriteVariable+0x9a>
    {
      /* Set variable data */
      FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 8001de8:	88bb      	ldrh	r3, [r7, #4]
 8001dea:	4619      	mov	r1, r3
 8001dec:	6978      	ldr	r0, [r7, #20]
 8001dee:	f7ff f83b 	bl	8000e68 <FLASH_ProgramHalfWord>
 8001df2:	4603      	mov	r3, r0
 8001df4:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 8001df6:	7cfb      	ldrb	r3, [r7, #19]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d002      	beq.n	8001e02 <EE_VerifyPageFullWriteVariable+0x82>
      {
        return FlashStatus;
 8001dfc:	7cfb      	ldrb	r3, [r7, #19]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	e013      	b.n	8001e2a <EE_VerifyPageFullWriteVariable+0xaa>
      }
      /* Set variable virtual address */
      FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3302      	adds	r3, #2
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f82c 	bl	8000e68 <FLASH_ProgramHalfWord>
 8001e10:	4603      	mov	r3, r0
 8001e12:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	e007      	b.n	8001e2a <EE_VerifyPageFullWriteVariable+0xaa>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3da      	bcc.n	8001dde <EE_VerifyPageFullWriteVariable+0x5e>
      Address = Address + 4;
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001e28:	2380      	movs	r3, #128	; 0x80
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	08020000 	.word	0x08020000
 8001e38:	0803f400 	.word	0x0803f400
 8001e3c:	0801fffe 	.word	0x0801fffe

08001e40 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	460a      	mov	r2, r1
 8001e4a:	80fb      	strh	r3, [r7, #6]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 8001e50:	2308      	movs	r3, #8
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001e54:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <EE_PageTransfer+0x128>)
 8001e56:	617b      	str	r3, [r7, #20]
  uint16_t OldPageId=0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	827b      	strh	r3, [r7, #18]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	81bb      	strh	r3, [r7, #12]
 8001e60:	2300      	movs	r3, #0
 8001e62:	823b      	strh	r3, [r7, #16]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	817b      	strh	r3, [r7, #10]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	813b      	strh	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff ff41 	bl	8001cf4 <EE_FindValidPage>
 8001e72:	4603      	mov	r3, r0
 8001e74:	81bb      	strh	r3, [r7, #12]

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001e76:	89bb      	ldrh	r3, [r7, #12]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d104      	bne.n	8001e86 <EE_PageTransfer+0x46>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001e7c:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <EE_PageTransfer+0x128>)
 8001e7e:	617b      	str	r3, [r7, #20]

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001e80:	2330      	movs	r3, #48	; 0x30
 8001e82:	827b      	strh	r3, [r7, #18]
 8001e84:	e009      	b.n	8001e9a <EE_PageTransfer+0x5a>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001e86:	89bb      	ldrh	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d104      	bne.n	8001e96 <EE_PageTransfer+0x56>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001e8c:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <EE_PageTransfer+0x12c>)
 8001e8e:	617b      	str	r3, [r7, #20]

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001e90:	2328      	movs	r3, #40	; 0x28
 8001e92:	827b      	strh	r3, [r7, #18]
 8001e94:	e001      	b.n	8001e9a <EE_PageTransfer+0x5a>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001e96:	23ab      	movs	r3, #171	; 0xab
 8001e98:	e062      	b.n	8001f60 <EE_PageTransfer+0x120>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 8001e9a:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7fe ffe2 	bl	8000e68 <FLASH_ProgramHalfWord>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d002      	beq.n	8001eb4 <EE_PageTransfer+0x74>
  {
    return FlashStatus;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	e055      	b.n	8001f60 <EE_PageTransfer+0x120>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001eb4:	88ba      	ldrh	r2, [r7, #4]
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff60 	bl	8001d80 <EE_VerifyPageFullWriteVariable>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	817b      	strh	r3, [r7, #10]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 8001ec4:	897b      	ldrh	r3, [r7, #10]
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d001      	beq.n	8001ece <EE_PageTransfer+0x8e>
  {
    return EepromStatus;
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	e048      	b.n	8001f60 <EE_PageTransfer+0x120>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	823b      	strh	r3, [r7, #16]
 8001ed2:	e027      	b.n	8001f24 <EE_PageTransfer+0xe4>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001ed4:	8a3b      	ldrh	r3, [r7, #16]
 8001ed6:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <EE_PageTransfer+0x130>)
 8001ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001edc:	88fa      	ldrh	r2, [r7, #6]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d01d      	beq.n	8001f1e <EE_PageTransfer+0xde>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001ee2:	8a3b      	ldrh	r3, [r7, #16]
 8001ee4:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <EE_PageTransfer+0x130>)
 8001ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eea:	4922      	ldr	r1, [pc, #136]	; (8001f74 <EE_PageTransfer+0x134>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fe65 	bl	8001bbc <EE_ReadVariable>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	813b      	strh	r3, [r7, #8]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001ef6:	893b      	ldrh	r3, [r7, #8]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d010      	beq.n	8001f1e <EE_PageTransfer+0xde>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001efc:	8a3b      	ldrh	r3, [r7, #16]
 8001efe:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <EE_PageTransfer+0x130>)
 8001f00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <EE_PageTransfer+0x134>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f7ff ff38 	bl	8001d80 <EE_VerifyPageFullWriteVariable>
 8001f10:	4603      	mov	r3, r0
 8001f12:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 8001f14:	897b      	ldrh	r3, [r7, #10]
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d001      	beq.n	8001f1e <EE_PageTransfer+0xde>
        {
          return EepromStatus;
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	e020      	b.n	8001f60 <EE_PageTransfer+0x120>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001f1e:	8a3b      	ldrh	r3, [r7, #16]
 8001f20:	3301      	adds	r3, #1
 8001f22:	823b      	strh	r3, [r7, #16]
 8001f24:	8a3b      	ldrh	r3, [r7, #16]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d9d4      	bls.n	8001ed4 <EE_PageTransfer+0x94>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = FLASH_EraseSector(OldPageId, VOLTAGE_RANGE);
 8001f2a:	8a7b      	ldrh	r3, [r7, #18]
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ff3a 	bl	8000da8 <FLASH_EraseSector>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d002      	beq.n	8001f44 <EE_PageTransfer+0x104>
  {
    return FlashStatus;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	e00d      	b.n	8001f60 <EE_PageTransfer+0x120>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 8001f44:	2100      	movs	r1, #0
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f7fe ff8e 	bl	8000e68 <FLASH_ProgramHalfWord>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	73fb      	strb	r3, [r7, #15]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d002      	beq.n	8001f5c <EE_PageTransfer+0x11c>
  {
    return FlashStatus;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	e001      	b.n	8001f60 <EE_PageTransfer+0x120>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	b29b      	uxth	r3, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	08020000 	.word	0x08020000
 8001f6c:	08024000 	.word	0x08024000
 8001f70:	20000000 	.word	0x20000000
 8001f74:	2000006c 	.word	0x2000006c

08001f78 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	STM_EVAL_LEDInit(LED3);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff fc61 	bl	8001844 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff fc5e 	bl	8001844 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f7ff fc5b 	bl	8001844 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8001f8e:	2003      	movs	r0, #3
 8001f90:	f7ff fc58 	bl	8001844 <STM_EVAL_LEDInit>

	FLASH_Unlock();
 8001f94:	f7fe fef0 	bl	8000d78 <FLASH_Unlock>
	EE_Init();
 8001f98:	f7ff fcb8 	bl	800190c <EE_Init>

	init_IMU();
 8001f9c:	f7fe f974 	bl	8000288 <init_IMU>
	init_Timer();
 8001fa0:	f7fe f92c 	bl	80001fc <init_Timer>

  while(1)
  {
	  if(sample_finished == 1)
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <main+0x50>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d1fb      	bne.n	8001fa4 <main+0x2c>
	  {
		STM_EVAL_LEDOn(LED3);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7ff fc77 	bl	80018a0 <STM_EVAL_LEDOn>
		STM_EVAL_LEDOn(LED4);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f7ff fc74 	bl	80018a0 <STM_EVAL_LEDOn>
		STM_EVAL_LEDOn(LED5);
 8001fb8:	2002      	movs	r0, #2
 8001fba:	f7ff fc71 	bl	80018a0 <STM_EVAL_LEDOn>
		STM_EVAL_LEDOn(LED6);
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f7ff fc6e 	bl	80018a0 <STM_EVAL_LEDOn>
		while(1);
 8001fc4:	e7fe      	b.n	8001fc4 <main+0x4c>
 8001fc6:	bf00      	nop
 8001fc8:	20000150 	.word	0x20000150

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002004 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fd2:	e003      	b.n	8001fdc <LoopCopyDataInit>

08001fd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fda:	3104      	adds	r1, #4

08001fdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fdc:	480b      	ldr	r0, [pc, #44]	; (800200c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fe0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fe2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fe4:	d3f6      	bcc.n	8001fd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fe8:	e002      	b.n	8001ff0 <LoopFillZerobss>

08001fea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fec:	f842 3b04 	str.w	r3, [r2], #4

08001ff0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ff2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ff4:	d3f9      	bcc.n	8001fea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ff6:	f000 f84b 	bl	8002090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f000 fa45 	bl	8002488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7ff ffbb 	bl	8001f78 <main>
  bx  lr    
 8002002:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002004:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002008:	0800250c 	.word	0x0800250c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002010:	20000048 	.word	0x20000048
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002014:	20000048 	.word	0x20000048
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002018:	200001b0 	.word	0x200001b0

0800201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>
	...

08002020 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8002034:	e7fe      	b.n	8002034 <HardFault_Handler+0x4>
 8002036:	bf00      	nop

08002038 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>
 800203e:	bf00      	nop

08002040 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8002044:	e7fe      	b.n	8002044 <BusFault_Handler+0x4>
 8002046:	bf00      	nop

08002048 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>
 800204e:	bf00      	nop

08002050 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop

08002060 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop

08002080 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002094:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <SystemInit+0x60>)
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <SystemInit+0x60>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80020a4:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <SystemInit+0x64>)
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <SystemInit+0x64>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <SystemInit+0x64>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80020b6:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <SystemInit+0x64>)
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <SystemInit+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80020c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <SystemInit+0x64>)
 80020c8:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <SystemInit+0x68>)
 80020ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020cc:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <SystemInit+0x64>)
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <SystemInit+0x64>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <SystemInit+0x64>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80020de:	f000 f80d 	bl	80020fc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020e2:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <SystemInit+0x60>)
 80020e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020e8:	609a      	str	r2, [r3, #8]
#endif
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00
 80020f4:	40023800 	.word	0x40023800
 80020f8:	24003010 	.word	0x24003010

080020fc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	2300      	movs	r3, #0
 8002108:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800210a:	4a36      	ldr	r2, [pc, #216]	; (80021e4 <SetSysClock+0xe8>)
 800210c:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <SetSysClock+0xe8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002116:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <SetSysClock+0xe8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3301      	adds	r3, #1
 8002124:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d103      	bne.n	8002134 <SetSysClock+0x38>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002132:	d1f0      	bne.n	8002116 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <SetSysClock+0xe8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002140:	2301      	movs	r3, #1
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	e001      	b.n	800214a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d142      	bne.n	80021d6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <SetSysClock+0xe8>)
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <SetSysClock+0xe8>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <SetSysClock+0xec>)
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <SetSysClock+0xec>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002166:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002168:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <SetSysClock+0xe8>)
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <SetSysClock+0xe8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <SetSysClock+0xe8>)
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <SetSysClock+0xe8>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <SetSysClock+0xe8>)
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <SetSysClock+0xe8>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002186:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <SetSysClock+0xe8>)
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <SetSysClock+0xf0>)
 800218c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <SetSysClock+0xe8>)
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <SetSysClock+0xe8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002198:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800219a:	bf00      	nop
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <SetSysClock+0xe8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f9      	beq.n	800219c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <SetSysClock+0xf4>)
 80021aa:	f240 6205 	movw	r2, #1541	; 0x605
 80021ae:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <SetSysClock+0xe8>)
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <SetSysClock+0xe8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80021bc:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <SetSysClock+0xe8>)
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <SetSysClock+0xe8>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80021c8:	bf00      	nop
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <SetSysClock+0xe8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d1f9      	bne.n	80021ca <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40007000 	.word	0x40007000
 80021ec:	07405408 	.word	0x07405408
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4603      	mov	r3, r0
 8002204:	807b      	strh	r3, [r7, #2]
 8002206:	460b      	mov	r3, r1
 8002208:	707b      	strb	r3, [r7, #1]
 800220a:	4613      	mov	r3, r2
 800220c:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d03e      	beq.n	8002292 <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f853 	bl	80022c0 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e029      	b.n	8002274 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	fa42 f303 	asr.w	r3, r2, r3
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01d      	beq.n	800226c <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	08d9      	lsrs	r1, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3108      	adds	r1, #8
 800223c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002240:	68f9      	ldr	r1, [r7, #12]
 8002242:	f001 0107 	and.w	r1, r1, #7
 8002246:	0089      	lsls	r1, r1, #2
 8002248:	200f      	movs	r0, #15
 800224a:	fa00 f101 	lsl.w	r1, r0, r1
 800224e:	43c9      	mvns	r1, r1
 8002250:	400b      	ands	r3, r1
 8002252:	7f38      	ldrb	r0, [r7, #28]
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	f001 0107 	and.w	r1, r1, #7
 800225a:	0089      	lsls	r1, r1, #2
 800225c:	fa00 f101 	lsl.w	r1, r0, r1
 8002260:	4319      	orrs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800226a:	e000      	b.n	800226e <TM_GPIO_InitAlternate+0x7a>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 800226c:	bf00      	nop
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3301      	adds	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	d9d2      	bls.n	8002220 <TM_GPIO_InitAlternate+0x2c>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800227a:	787a      	ldrb	r2, [r7, #1]
 800227c:	8879      	ldrh	r1, [r7, #2]
 800227e:	7e3b      	ldrb	r3, [r7, #24]
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	783b      	ldrb	r3, [r7, #0]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	2202      	movs	r2, #2
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f830 	bl	80022f0 <TM_GPIO_INT_Init>
 8002290:	e000      	b.n	8002294 <TM_GPIO_InitAlternate+0xa0>
void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
		return;
 8002292:	bf00      	nop
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop

0800229c <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80022aa:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80022ae:	0a9b      	lsrs	r3, r3, #10
 80022b0:	b29b      	uxth	r3, r3
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop

080022c0 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ffe7 	bl	800229c <TM_GPIO_GetPortSource>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	2301      	movs	r3, #1
 80022d4:	fa03 f102 	lsl.w	r1, r3, r2
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <TM_GPIO_INT_EnableClock+0x2c>)
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <TM_GPIO_INT_EnableClock+0x2c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	430b      	orrs	r3, r1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800

080022f0 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	807b      	strh	r3, [r7, #2]
 8002302:	460b      	mov	r3, r1
 8002304:	707b      	strb	r3, [r7, #1]
 8002306:	4613      	mov	r3, r2
 8002308:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffc6 	bl	800229c <TM_GPIO_GetPortSource>
 8002310:	4603      	mov	r3, r0
 8002312:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e067      	b.n	80023ea <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	fa42 f303 	asr.w	r3, r2, r3
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d05b      	beq.n	80023e2 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800232a:	7bbb      	ldrb	r3, [r7, #14]
 800232c:	7bba      	ldrb	r2, [r7, #14]
 800232e:	4932      	ldr	r1, [pc, #200]	; (80023f8 <TM_GPIO_INT_Init+0x108>)
 8002330:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002334:	b211      	sxth	r1, r2
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	b212      	sxth	r2, r2
 8002340:	430a      	orrs	r2, r1
 8002342:	b212      	sxth	r2, r2
 8002344:	b291      	uxth	r1, r2
 8002346:	4a2c      	ldr	r2, [pc, #176]	; (80023f8 <TM_GPIO_INT_Init+0x108>)
 8002348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	0052      	lsls	r2, r2, #1
 8002354:	2103      	movs	r1, #3
 8002356:	fa01 f202 	lsl.w	r2, r1, r2
 800235a:	43d2      	mvns	r2, r2
 800235c:	4013      	ands	r3, r2
 800235e:	7e39      	ldrb	r1, [r7, #24]
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	0052      	lsls	r2, r2, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2103      	movs	r1, #3
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	4013      	ands	r3, r2
 8002380:	7879      	ldrb	r1, [r7, #1]
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	0052      	lsls	r2, r2, #1
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d002      	beq.n	800239c <TM_GPIO_INT_Init+0xac>
 8002396:	787b      	ldrb	r3, [r7, #1]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	b292      	uxth	r2, r2
 80023aa:	43d2      	mvns	r2, r2
 80023ac:	401a      	ands	r2, r3
 80023ae:	7839      	ldrb	r1, [r7, #0]
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2103      	movs	r1, #3
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4013      	ands	r3, r2
 80023d0:	7f39      	ldrb	r1, [r7, #28]
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	0052      	lsls	r2, r2, #1
 80023d6:	fa01 f202 	lsl.w	r2, r1, r2
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	e000      	b.n	80023e4 <TM_GPIO_INT_Init+0xf4>
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
 80023e2:	bf00      	nop
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	3301      	adds	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d994      	bls.n	800231a <TM_GPIO_INT_Init+0x2a>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000070 	.word	0x20000070

080023fc <TM_USART_INT_InsertToBuffer>:
		USART_WAIT(USARTx);
	}
}

/* Private functions */
void TM_USART_INT_InsertToBuffer(TM_USART_t* u, uint8_t c) {
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
	/* Still available space in buffer */
	if (u->Num < u->Size) {
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	88da      	ldrh	r2, [r3, #6]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	889b      	ldrh	r3, [r3, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d21b      	bcs.n	800244c <TM_USART_INT_InsertToBuffer+0x50>
		/* Check overflow */
		if (u->In == u->Size) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	891a      	ldrh	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	889b      	ldrh	r3, [r3, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d102      	bne.n	8002426 <TM_USART_INT_InsertToBuffer+0x2a>
			u->In = 0;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	811a      	strh	r2, [r3, #8]
		}
		
		/* Add to buffer */
		u->Buffer[u->In] = c;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	8912      	ldrh	r2, [r2, #8]
 800242e:	4413      	add	r3, r2
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	701a      	strb	r2, [r3, #0]
		u->In++;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	891b      	ldrh	r3, [r3, #8]
 8002438:	3301      	adds	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	811a      	strh	r2, [r3, #8]
		u->Num++;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	88db      	ldrh	r3, [r3, #6]
 8002444:	3301      	adds	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	80da      	strh	r2, [r3, #6]
	}
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <USART1_IRQHandler>:
	}
}
#endif

#ifdef USE_USART1
void USART1_IRQHandler(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	/* Check if interrupt was because data is received */
	if (USART1->SR & USART_SR_RXNE) {
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <USART1_IRQHandler+0x28>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <USART1_IRQHandler+0x22>
		#ifdef TM_USART1_USE_CUSTOM_IRQ
			/* Call user function */
			TM_USART1_ReceiveHandler(USART1->DR);
		#else
			/* Put received data into internal buffer */
			TM_USART_INT_InsertToBuffer(&TM_USART1, USART1->DR);
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <USART1_IRQHandler+0x28>)
 800246c:	889b      	ldrh	r3, [r3, #4]
 800246e:	b29b      	uxth	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	4619      	mov	r1, r3
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <USART1_IRQHandler+0x2c>)
 8002476:	f7ff ffc1 	bl	80023fc <TM_USART_INT_InsertToBuffer>
		#endif
	}
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40011000 	.word	0x40011000
 8002484:	20000038 	.word	0x20000038

08002488 <__libc_init_array>:
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <__libc_init_array+0x3c>)
 800248c:	4c0e      	ldr	r4, [pc, #56]	; (80024c8 <__libc_init_array+0x40>)
 800248e:	1ae4      	subs	r4, r4, r3
 8002490:	10a4      	asrs	r4, r4, #2
 8002492:	2500      	movs	r5, #0
 8002494:	461e      	mov	r6, r3
 8002496:	42a5      	cmp	r5, r4
 8002498:	d004      	beq.n	80024a4 <__libc_init_array+0x1c>
 800249a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800249e:	4798      	blx	r3
 80024a0:	3501      	adds	r5, #1
 80024a2:	e7f8      	b.n	8002496 <__libc_init_array+0xe>
 80024a4:	f000 f816 	bl	80024d4 <_init>
 80024a8:	4c08      	ldr	r4, [pc, #32]	; (80024cc <__libc_init_array+0x44>)
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <__libc_init_array+0x48>)
 80024ac:	1ae4      	subs	r4, r4, r3
 80024ae:	10a4      	asrs	r4, r4, #2
 80024b0:	2500      	movs	r5, #0
 80024b2:	461e      	mov	r6, r3
 80024b4:	42a5      	cmp	r5, r4
 80024b6:	d004      	beq.n	80024c2 <__libc_init_array+0x3a>
 80024b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024bc:	4798      	blx	r3
 80024be:	3501      	adds	r5, #1
 80024c0:	e7f8      	b.n	80024b4 <__libc_init_array+0x2c>
 80024c2:	bd70      	pop	{r4, r5, r6, pc}
 80024c4:	08002504 	.word	0x08002504
 80024c8:	08002504 	.word	0x08002504
 80024cc:	08002508 	.word	0x08002508
 80024d0:	08002504 	.word	0x08002504

080024d4 <_init>:
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	bf00      	nop
 80024d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024da:	bc08      	pop	{r3}
 80024dc:	469e      	mov	lr, r3
 80024de:	4770      	bx	lr

080024e0 <_fini>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	bf00      	nop
 80024e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e6:	bc08      	pop	{r3}
 80024e8:	469e      	mov	lr, r3
 80024ea:	4770      	bx	lr
