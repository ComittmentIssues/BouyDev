
C:\Users\user\Documents\GitHub\BouyDev\Firmware\New folder\Test_GPS_F4\Debug\Test_GPS_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08005a40  08005a40  00015a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000010c  20000000  08005e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002010c  2**0
                  CONTENTS
  7 .bss          00001018  2000010c  2000010c  0002010c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20001124  20001124  0002010c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004a34  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e18  00000000  00000000  00024b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005a8  00000000  00000000  00025988  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000500  00000000  00000000  00025f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002239  00000000  00000000  00026430  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002141  00000000  00000000  00028669  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002a7aa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000257c  00000000  00000000  0002a828  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000018  00000000  00000000  0002cec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000123  00000000  00000000  0002cda4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a24 	.word	0x08005a24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	08005a24 	.word	0x08005a24

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2iz>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b4c:	d215      	bcs.n	8000b7a <__aeabi_d2iz+0x36>
 8000b4e:	d511      	bpl.n	8000b74 <__aeabi_d2iz+0x30>
 8000b50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d912      	bls.n	8000b80 <__aeabi_d2iz+0x3c>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_d2iz+0x48>
 8000b80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	bf08      	it	eq
 8000b86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_d2uiz>:
 8000b94:	004a      	lsls	r2, r1, #1
 8000b96:	d211      	bcs.n	8000bbc <__aeabi_d2uiz+0x28>
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b9c:	d211      	bcs.n	8000bc2 <__aeabi_d2uiz+0x2e>
 8000b9e:	d50d      	bpl.n	8000bbc <__aeabi_d2uiz+0x28>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d40e      	bmi.n	8000bc8 <__aeabi_d2uiz+0x34>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d102      	bne.n	8000bce <__aeabi_d2uiz+0x3a>
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_d2f>:
 8000bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bdc:	bf24      	itt	cs
 8000bde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be6:	d90d      	bls.n	8000c04 <__aeabi_d2f+0x30>
 8000be8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bfc:	bf08      	it	eq
 8000bfe:	f020 0001 	biceq.w	r0, r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c08:	d121      	bne.n	8000c4e <__aeabi_d2f+0x7a>
 8000c0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0e:	bfbc      	itt	lt
 8000c10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	4770      	bxlt	lr
 8000c16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1e:	f1c2 0218 	rsb	r2, r2, #24
 8000c22:	f1c2 0c20 	rsb	ip, r2, #32
 8000c26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2e:	bf18      	it	ne
 8000c30:	f040 0001 	orrne.w	r0, r0, #1
 8000c34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c40:	ea40 000c 	orr.w	r0, r0, ip
 8000c44:	fa23 f302 	lsr.w	r3, r3, r2
 8000c48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c4c:	e7cc      	b.n	8000be8 <__aeabi_d2f+0x14>
 8000c4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c52:	d107      	bne.n	8000c64 <__aeabi_d2f+0x90>
 8000c54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c58:	bf1e      	ittt	ne
 8000c5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c62:	4770      	bxne	lr
 8000c64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	2300      	movs	r3, #0
 8000c82:	73bb      	strb	r3, [r7, #14]
 8000c84:	230f      	movs	r3, #15
 8000c86:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	78db      	ldrb	r3, [r3, #3]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d038      	beq.n	8000d02 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000c90:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <NVIC_Init+0xbc>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	f1c3 0304 	rsb	r3, r3, #4
 8000ca4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ca6:	7b7a      	ldrb	r2, [r7, #13]
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	fa42 f303 	asr.w	r3, r2, r3
 8000cae:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	785b      	ldrb	r3, [r3, #1]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	7bbb      	ldrb	r3, [r7, #14]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	789a      	ldrb	r2, [r3, #2]
 8000cc2:	7b7b      	ldrb	r3, [r7, #13]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000cd4:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <NVIC_Init+0xc0>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <NVIC_Init+0xc0>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	095b      	lsrs	r3, r3, #5
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000cfc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d00:	e00f      	b.n	8000d22 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d02:	490c      	ldr	r1, [pc, #48]	; (8000d34 <NVIC_Init+0xc0>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	095b      	lsrs	r3, r3, #5
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	2201      	movs	r2, #1
 8000d18:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d1a:	f100 0320 	add.w	r3, r0, #32
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 0201 	bic.w	r2, r3, #1
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2221      	movs	r2, #33	; 0x21
 8000d6e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <DMA_DeInit+0x154>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d103      	bne.n	8000d80 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000d78:	4b45      	ldr	r3, [pc, #276]	; (8000e90 <DMA_DeInit+0x158>)
 8000d7a:	223d      	movs	r2, #61	; 0x3d
 8000d7c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d7e:	e07e      	b.n	8000e7e <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <DMA_DeInit+0x15c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d104      	bne.n	8000d92 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000d88:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <DMA_DeInit+0x158>)
 8000d8a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000d8e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000d90:	e075      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a40      	ldr	r2, [pc, #256]	; (8000e98 <DMA_DeInit+0x160>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d104      	bne.n	8000da4 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <DMA_DeInit+0x158>)
 8000d9c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000da0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000da2:	e06c      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3d      	ldr	r2, [pc, #244]	; (8000e9c <DMA_DeInit+0x164>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d104      	bne.n	8000db6 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <DMA_DeInit+0x158>)
 8000dae:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000db2:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000db4:	e063      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a39      	ldr	r2, [pc, #228]	; (8000ea0 <DMA_DeInit+0x168>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d103      	bne.n	8000dc6 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <DMA_DeInit+0x158>)
 8000dc0:	4a38      	ldr	r2, [pc, #224]	; (8000ea4 <DMA_DeInit+0x16c>)
 8000dc2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000dc4:	e05b      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a37      	ldr	r2, [pc, #220]	; (8000ea8 <DMA_DeInit+0x170>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d103      	bne.n	8000dd6 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <DMA_DeInit+0x158>)
 8000dd0:	4a36      	ldr	r2, [pc, #216]	; (8000eac <DMA_DeInit+0x174>)
 8000dd2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000dd4:	e053      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a35      	ldr	r2, [pc, #212]	; (8000eb0 <DMA_DeInit+0x178>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d103      	bne.n	8000de6 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <DMA_DeInit+0x158>)
 8000de0:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <DMA_DeInit+0x17c>)
 8000de2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000de4:	e04b      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <DMA_DeInit+0x180>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d104      	bne.n	8000df8 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <DMA_DeInit+0x158>)
 8000df0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000df4:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000df6:	e042      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <DMA_DeInit+0x184>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d103      	bne.n	8000e08 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e02:	223d      	movs	r2, #61	; 0x3d
 8000e04:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000e06:	e03a      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <DMA_DeInit+0x18c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d104      	bne.n	8000e1a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e12:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000e16:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000e18:	e031      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <DMA_DeInit+0x190>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d104      	bne.n	8000e2c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e24:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000e28:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000e2a:	e028      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <DMA_DeInit+0x194>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d104      	bne.n	8000e3e <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e36:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000e3a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000e3c:	e01f      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <DMA_DeInit+0x198>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d103      	bne.n	8000e4e <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e48:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <DMA_DeInit+0x16c>)
 8000e4a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000e4c:	e017      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <DMA_DeInit+0x19c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d103      	bne.n	8000e5e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <DMA_DeInit+0x174>)
 8000e5a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000e5c:	e00f      	b.n	8000e7e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <DMA_DeInit+0x1a0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d103      	bne.n	8000e6e <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <DMA_DeInit+0x17c>)
 8000e6a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000e6c:	e007      	b.n	8000e7e <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <DMA_DeInit+0x1a4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d103      	bne.n	8000e7e <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <DMA_DeInit+0x188>)
 8000e78:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000e7c:	60da      	str	r2, [r3, #12]
    }
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40026010 	.word	0x40026010
 8000e90:	40026000 	.word	0x40026000
 8000e94:	40026028 	.word	0x40026028
 8000e98:	40026040 	.word	0x40026040
 8000e9c:	40026058 	.word	0x40026058
 8000ea0:	40026070 	.word	0x40026070
 8000ea4:	2000003d 	.word	0x2000003d
 8000ea8:	40026088 	.word	0x40026088
 8000eac:	20000f40 	.word	0x20000f40
 8000eb0:	400260a0 	.word	0x400260a0
 8000eb4:	203d0000 	.word	0x203d0000
 8000eb8:	400260b8 	.word	0x400260b8
 8000ebc:	40026410 	.word	0x40026410
 8000ec0:	40026400 	.word	0x40026400
 8000ec4:	40026428 	.word	0x40026428
 8000ec8:	40026440 	.word	0x40026440
 8000ecc:	40026458 	.word	0x40026458
 8000ed0:	40026470 	.word	0x40026470
 8000ed4:	40026488 	.word	0x40026488
 8000ed8:	400264a0 	.word	0x400264a0
 8000edc:	400264b8 	.word	0x400264b8

08000ee0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <DMA_Init+0xac>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f0a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f16:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f22:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000f2e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f34:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f023 0307 	bic.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	f01c803f 	.word	0xf01c803f

08000f90 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f043 0201 	orr.w	r2, r3, #1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000fae:	e005      	b.n	8000fbc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 0201 	bic.w	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	601a      	str	r2, [r3, #0]
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	b29b      	uxth	r3, r3
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e001      	b.n	8001006 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a15      	ldr	r2, [pc, #84]	; (8001080 <DMA_GetFlagStatus+0x6c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d802      	bhi.n	8001034 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <DMA_GetFlagStatus+0x70>)
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	e001      	b.n	8001038 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <DMA_GetFlagStatus+0x74>)
 8001036:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e002      	b.n	8001050 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001056:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800105a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001066:	2301      	movs	r3, #1
 8001068:	75fb      	strb	r3, [r7, #23]
 800106a:	e001      	b.n	8001070 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001070:	7dfb      	ldrb	r3, [r7, #23]
}
 8001072:	4618      	mov	r0, r3
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	4002640f 	.word	0x4002640f
 8001084:	40026000 	.word	0x40026000
 8001088:	40026400 	.word	0x40026400

0800108c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00f      	beq.n	80010c4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	e005      	b.n	80010c4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b80      	cmp	r3, #128	; 0x80
 80010c8:	d014      	beq.n	80010f4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 031e 	and.w	r3, r3, #30
 80010da:	431a      	orrs	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80010e0:	e008      	b.n	80010f4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f003 031e 	and.w	r3, r3, #30
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a10      	ldr	r2, [pc, #64]	; (8001150 <DMA_ClearITPendingBit+0x50>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d802      	bhi.n	8001118 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <DMA_ClearITPendingBit+0x54>)
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e001      	b.n	800111c <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <DMA_ClearITPendingBit+0x58>)
 800111a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800112c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8001134:	e006      	b.n	8001144 <DMA_ClearITPendingBit+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800113c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	6093      	str	r3, [r2, #8]
  }   
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	4002640f 	.word	0x4002640f
 8001154:	40026000 	.word	0x40026000
 8001158:	40026400 	.word	0x40026400

0800115c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e076      	b.n	8001266 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001178:	2201      	movs	r2, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d165      	bne.n	8001260 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2103      	movs	r1, #3
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	4619      	mov	r1, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	791b      	ldrb	r3, [r3, #4]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d003      	beq.n	80011d2 <GPIO_Init+0x76>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d12e      	bne.n	8001230 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2103      	movs	r1, #3
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	795b      	ldrb	r3, [r3, #5]
 80011f0:	4619      	mov	r1, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	b29b      	uxth	r3, r3
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	401a      	ands	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	799b      	ldrb	r3, [r3, #6]
 800121e:	4619      	mov	r1, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	b29b      	uxth	r3, r3
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	b29b      	uxth	r3, r3
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	b29b      	uxth	r3, r3
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2103      	movs	r1, #3
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	79db      	ldrb	r3, [r3, #7]
 8001250:	4619      	mov	r1, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d985      	bls.n	8001178 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800126c:	bf00      	nop
 800126e:	371c      	adds	r7, #28
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001290:	787a      	ldrb	r2, [r7, #1]
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	210f      	movs	r1, #15
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	ea02 0103 	and.w	r1, r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f100 0208 	add.w	r2, r0, #8
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	2302      	movs	r3, #2
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	2302      	movs	r3, #2
 800132a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800132c:	4b48      	ldr	r3, [pc, #288]	; (8001450 <RCC_GetClocksFreq+0x144>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d007      	beq.n	800134c <RCC_GetClocksFreq+0x40>
 800133c:	2b08      	cmp	r3, #8
 800133e:	d009      	beq.n	8001354 <RCC_GetClocksFreq+0x48>
 8001340:	2b00      	cmp	r3, #0
 8001342:	d13f      	bne.n	80013c4 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a43      	ldr	r2, [pc, #268]	; (8001454 <RCC_GetClocksFreq+0x148>)
 8001348:	601a      	str	r2, [r3, #0]
      break;
 800134a:	e03f      	b.n	80013cc <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a42      	ldr	r2, [pc, #264]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 8001350:	601a      	str	r2, [r3, #0]
      break;
 8001352:	e03b      	b.n	80013cc <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001354:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <RCC_GetClocksFreq+0x144>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135c:	0d9b      	lsrs	r3, r3, #22
 800135e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <RCC_GetClocksFreq+0x144>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001368:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00d      	beq.n	800138c <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001370:	4a39      	ldr	r2, [pc, #228]	; (8001458 <RCC_GetClocksFreq+0x14c>)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	fbb2 f2f3 	udiv	r2, r2, r3
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <RCC_GetClocksFreq+0x144>)
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001380:	400b      	ands	r3, r1
 8001382:	099b      	lsrs	r3, r3, #6
 8001384:	fb03 f302 	mul.w	r3, r3, r2
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e00c      	b.n	80013a6 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800138c:	4a31      	ldr	r2, [pc, #196]	; (8001454 <RCC_GetClocksFreq+0x148>)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	fbb2 f2f3 	udiv	r2, r2, r3
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <RCC_GetClocksFreq+0x144>)
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800139c:	400b      	ands	r3, r1
 800139e:	099b      	lsrs	r3, r3, #6
 80013a0:	fb03 f302 	mul.w	r3, r3, r2
 80013a4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <RCC_GetClocksFreq+0x144>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ae:	0c1b      	lsrs	r3, r3, #16
 80013b0:	3301      	adds	r3, #1
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
      break;
 80013c2:	e003      	b.n	80013cc <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a23      	ldr	r2, [pc, #140]	; (8001454 <RCC_GetClocksFreq+0x148>)
 80013c8:	601a      	str	r2, [r3, #0]
      break;
 80013ca:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <RCC_GetClocksFreq+0x144>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013d4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013dc:	4a1f      	ldr	r2, [pc, #124]	; (800145c <RCC_GetClocksFreq+0x150>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	40da      	lsrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <RCC_GetClocksFreq+0x144>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80013fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	0a9b      	lsrs	r3, r3, #10
 8001402:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <RCC_GetClocksFreq+0x150>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	40da      	lsrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <RCC_GetClocksFreq+0x144>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001424:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	0b5b      	lsrs	r3, r3, #13
 800142a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <RCC_GetClocksFreq+0x150>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	40da      	lsrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	60da      	str	r2, [r3, #12]
}
 8001444:	bf00      	nop
 8001446:	3724      	adds	r7, #36	; 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40023800 	.word	0x40023800
 8001454:	00f42400 	.word	0x00f42400
 8001458:	007a1200 	.word	0x007a1200
 800145c:	20000000 	.word	0x20000000

08001460 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001472:	490a      	ldr	r1, [pc, #40]	; (800149c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800147e:	e006      	b.n	800148e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001480:	4906      	ldr	r1, [pc, #24]	; (800149c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	43db      	mvns	r3, r3
 800148a:	4013      	ands	r3, r2
 800148c:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80014b2:	490a      	ldr	r1, [pc, #40]	; (80014dc <RCC_APB2PeriphClockCmd+0x3c>)
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <RCC_APB2PeriphClockCmd+0x3c>)
 80014b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80014be:	e006      	b.n	80014ce <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80014c0:	4906      	ldr	r1, [pc, #24]	; (80014dc <RCC_APB2PeriphClockCmd+0x3c>)
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <RCC_APB2PeriphClockCmd+0x3c>)
 80014c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4013      	ands	r3, r2
 80014cc:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	8a1b      	ldrh	r3, [r3, #16]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001508:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	88db      	ldrh	r3, [r3, #6]
 800150e:	461a      	mov	r2, r3
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	4313      	orrs	r3, r2
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	b29a      	uxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	899b      	ldrh	r3, [r3, #12]
 8001522:	b29b      	uxth	r3, r3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800152c:	f023 030c 	bic.w	r3, r3, #12
 8001530:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	889a      	ldrh	r2, [r3, #4]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	891b      	ldrh	r3, [r3, #8]
 800153a:	4313      	orrs	r3, r2
 800153c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001542:	4313      	orrs	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	4313      	orrs	r3, r2
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	b29a      	uxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	8a9b      	ldrh	r3, [r3, #20]
 800155a:	b29b      	uxth	r3, r3
 800155c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001564:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	899b      	ldrh	r3, [r3, #12]
 800156a:	461a      	mov	r2, r3
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	4313      	orrs	r3, r2
 8001570:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fec4 	bl	800130c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a30      	ldr	r2, [pc, #192]	; (8001648 <USART_Init+0x168>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d003      	beq.n	8001594 <USART_Init+0xb4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a2f      	ldr	r2, [pc, #188]	; (800164c <USART_Init+0x16c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d102      	bne.n	800159a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	e001      	b.n	800159e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	899b      	ldrh	r3, [r3, #12]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da0c      	bge.n	80015c4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80015aa:	6a3a      	ldr	r2, [r7, #32]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	009a      	lsls	r2, r3, #2
 80015b4:	441a      	add	r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e00b      	b.n	80015dc <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80015c4:	6a3a      	ldr	r2, [r7, #32]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	009a      	lsls	r2, r3, #2
 80015ce:	441a      	add	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <USART_Init+0x170>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	095b      	lsrs	r3, r3, #5
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	2264      	movs	r2, #100	; 0x64
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	899b      	ldrh	r3, [r3, #12]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b21b      	sxth	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	da0c      	bge.n	8001620 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	3332      	adds	r3, #50	; 0x32
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <USART_Init+0x170>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	4313      	orrs	r3, r2
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	e00b      	b.n	8001638 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	3332      	adds	r3, #50	; 0x32
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <USART_Init+0x170>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	095b      	lsrs	r3, r3, #5
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001634:	4313      	orrs	r3, r2
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	811a      	strh	r2, [r3, #8]
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40011000 	.word	0x40011000
 800164c:	40011400 	.word	0x40011400
 8001650:	51eb851f 	.word	0x51eb851f

08001654 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d008      	beq.n	8001678 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	899b      	ldrh	r3, [r3, #12]
 800166a:	b29b      	uxth	r3, r3
 800166c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001676:	e007      	b.n	8001688 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	899b      	ldrh	r3, [r3, #12]
 800167c:	b29b      	uxth	r3, r3
 800167e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	819a      	strh	r2, [r3, #12]
  }
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	889b      	ldrh	r3, [r3, #4]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a6:	b29b      	uxth	r3, r3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d008      	beq.n	80016dc <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	8a9b      	ldrh	r3, [r3, #20]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 80016da:	e009      	b.n	80016f0 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8a9b      	ldrh	r3, [r3, #20]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4013      	ands	r3, r2
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	829a      	strh	r2, [r3, #20]
  }
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
 8001708:	4613      	mov	r3, r2
 800170a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	095b      	lsrs	r3, r3, #5
 8001726:	b2db      	uxtb	r3, r3
 8001728:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001732:	2201      	movs	r2, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d103      	bne.n	800174a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	330c      	adds	r3, #12
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e009      	b.n	800175e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d103      	bne.n	8001758 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3310      	adds	r3, #16
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e002      	b.n	800175e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3314      	adds	r3, #20
 800175c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800175e:	787b      	ldrb	r3, [r7, #1]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	6811      	ldr	r1, [r2, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001770:	e006      	b.n	8001780 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	6811      	ldr	r1, [r2, #0]
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	43d2      	mvns	r2, r2
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
  }
}
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	4013      	ands	r3, r2
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e001      	b.n	80017b6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80017f2:	2201      	movs	r2, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	899b      	ldrh	r3, [r3, #12]
 8001806:	b29b      	uxth	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	4013      	ands	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e011      	b.n	8001836 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d107      	bne.n	8001828 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	8a1b      	ldrh	r3, [r3, #16]
 800181c:	b29b      	uxth	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	4013      	ands	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e006      	b.n	8001836 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	8a9b      	ldrh	r3, [r3, #20]
 800182c:	b29b      	uxth	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	4013      	ands	r3, r2
 8001834:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	b29b      	uxth	r3, r3
 800183c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800183e:	2201      	movs	r2, #1
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <USART_GetITStatus+0xa4>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	74fb      	strb	r3, [r7, #19]
 8001866:	e001      	b.n	800186c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800186c:	7cfb      	ldrb	r3, [r7, #19]
}
 800186e:	4618      	mov	r0, r3
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4a10      	ldr	r2, [pc, #64]	; (80018cc <STM_EVAL_LEDInit+0x50>)
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	2101      	movs	r1, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fde5 	bl	8001460 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <STM_EVAL_LEDInit+0x54>)
 800189a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800189e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80018a0:	2301      	movs	r3, #1
 80018a2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80018ac:	2302      	movs	r3, #2
 80018ae:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <STM_EVAL_LEDInit+0x58>)
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	f107 0208 	add.w	r2, r7, #8
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fc4c 	bl	800115c <GPIO_Init>
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	08005a64 	.word	0x08005a64
 80018d0:	08005a5c 	.word	0x08005a5c
 80018d4:	20000010 	.word	0x20000010

080018d8 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <STM_EVAL_LEDOn+0x28>)
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	4905      	ldr	r1, [pc, #20]	; (8001904 <STM_EVAL_LEDOn+0x2c>)
 80018ee:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80018f2:	831a      	strh	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	20000010 	.word	0x20000010
 8001904:	08005a5c 	.word	0x08005a5c

08001908 <init_USART_GPS>:
#include "GPS.h"



void init_USART_GPS(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b096      	sub	sp, #88	; 0x58
 800190c:	af00      	add	r7, sp, #0

		//init GPIOB for AF
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 800190e:	2101      	movs	r1, #1
 8001910:	2002      	movs	r0, #2
 8001912:	f7ff fda5 	bl	8001460 <RCC_AHB1PeriphClockCmd>
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001916:	2302      	movs	r3, #2
 8001918:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		GPIO_InitStruct.GPIO_Pin = (GPIO_USART1_RX | GPIO_USART1_TX);
 800191c:	23c0      	movs	r3, #192	; 0xc0
 800191e:	653b      	str	r3, [r7, #80]	; 0x50
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001920:	2301      	movs	r3, #1
 8001922:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800192c:	2303      	movs	r3, #3
 800192e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		GPIO_Init(GPIOB,&GPIO_InitStruct);
 8001932:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001936:	4619      	mov	r1, r3
 8001938:	487a      	ldr	r0, [pc, #488]	; (8001b24 <init_USART_GPS+0x21c>)
 800193a:	f7ff fc0f 	bl	800115c <GPIO_Init>
		//AF MAPPing
		GPIO_PinAFConfig(GPIOB,GPIO_USART1_RX_SRC,GPIO_AF_USART1);
 800193e:	2207      	movs	r2, #7
 8001940:	2106      	movs	r1, #6
 8001942:	4878      	ldr	r0, [pc, #480]	; (8001b24 <init_USART_GPS+0x21c>)
 8001944:	f7ff fc98 	bl	8001278 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB,GPIO_USART1_TX_SRC,GPIO_AF_USART1);
 8001948:	2207      	movs	r2, #7
 800194a:	2107      	movs	r1, #7
 800194c:	4875      	ldr	r0, [pc, #468]	; (8001b24 <init_USART_GPS+0x21c>)
 800194e:	f7ff fc93 	bl	8001278 <GPIO_PinAFConfig>

		//USART CONFIG
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 8001952:	2101      	movs	r1, #1
 8001954:	2010      	movs	r0, #16
 8001956:	f7ff fda3 	bl	80014a0 <RCC_APB2PeriphClockCmd>
		USART_InitTypeDef USART_InitStructure;
		USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800195a:	230c      	movs	r3, #12
 800195c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001960:	2300      	movs	r3, #0
 8001962:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001966:	2300      	movs	r3, #0
 8001968:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		USART_InitStructure.USART_Parity = USART_Parity_No;
 800196c:	2300      	movs	r3, #0
 800196e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		USART_InitStructure.USART_BaudRate = GPS_BAUDRATE;
 8001972:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001978:	2300      	movs	r3, #0
 800197a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		USART_Init(USART1, &USART_InitStructure);
 800197e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001982:	4619      	mov	r1, r3
 8001984:	4868      	ldr	r0, [pc, #416]	; (8001b28 <init_USART_GPS+0x220>)
 8001986:	f7ff fdab 	bl	80014e0 <USART_Init>

		//configure USART for idle interrupt
		NVIC_InitTypeDef NVIC_InitStructure;
		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 800198a:	2325      	movs	r3, #37	; 0x25
 800198c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0;
 8001990:	2300      	movs	r3, #0
 8001992:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800199c:	2301      	movs	r3, #1
 800199e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		NVIC_Init(&NVIC_InitStructure);
 80019a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f964 	bl	8000c74 <NVIC_Init>
		USART_ITConfig(USART1, USART_IT_IDLE, ENABLE);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f240 4124 	movw	r1, #1060	; 0x424
 80019b2:	485d      	ldr	r0, [pc, #372]	; (8001b28 <init_USART_GPS+0x220>)
 80019b4:	f7ff fea2 	bl	80016fc <USART_ITConfig>
		//enable USART
		USART_Cmd(USART1,ENABLE);
 80019b8:	2101      	movs	r1, #1
 80019ba:	485b      	ldr	r0, [pc, #364]	; (8001b28 <init_USART_GPS+0x220>)
 80019bc:	f7ff fe4a 	bl	8001654 <USART_Cmd>

		//DMA init
#ifdef STM32_GNSS_USE_DMA
		DMA_InitTypeDef DMA_InitStructure;
		USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2140      	movs	r1, #64	; 0x40
 80019c4:	4858      	ldr	r0, [pc, #352]	; (8001b28 <init_USART_GPS+0x220>)
 80019c6:	f7ff fe75 	bl	80016b4 <USART_DMACmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 80019ca:	2101      	movs	r1, #1
 80019cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80019d0:	f7ff fd46 	bl	8001460 <RCC_AHB1PeriphClockCmd>

		/* De-initialize DMA RX & TX Stream */
			DMA_DeInit(DMA2_Stream2);
 80019d4:	4855      	ldr	r0, [pc, #340]	; (8001b2c <init_USART_GPS+0x224>)
 80019d6:	f7ff f9af 	bl	8000d38 <DMA_DeInit>
			while (DMA_GetCmdStatus(DMA2_Stream2 ) != DISABLE) { ; }
 80019da:	bf00      	nop
 80019dc:	4853      	ldr	r0, [pc, #332]	; (8001b2c <init_USART_GPS+0x224>)
 80019de:	f7ff fb01 	bl	8000fe4 <DMA_GetCmdStatus>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f9      	bne.n	80019dc <init_USART_GPS+0xd4>
			DMA_DeInit(DMA2_Stream7);
 80019e8:	4851      	ldr	r0, [pc, #324]	; (8001b30 <init_USART_GPS+0x228>)
 80019ea:	f7ff f9a5 	bl	8000d38 <DMA_DeInit>
			while (DMA_GetCmdStatus(DMA2_Stream7 ) != DISABLE) { ; }
 80019ee:	bf00      	nop
 80019f0:	484f      	ldr	r0, [pc, #316]	; (8001b30 <init_USART_GPS+0x228>)
 80019f2:	f7ff faf7 	bl	8000fe4 <DMA_GetCmdStatus>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f9      	bne.n	80019f0 <init_USART_GPS+0xe8>
			DMA_DeInit(DMA2_Stream0); //DMA2 Stream 0 for memory streaming
 80019fc:	484d      	ldr	r0, [pc, #308]	; (8001b34 <init_USART_GPS+0x22c>)
 80019fe:	f7ff f99b 	bl	8000d38 <DMA_DeInit>
			while (DMA_GetCmdStatus(DMA2_Stream0) != DISABLE){;}
 8001a02:	bf00      	nop
 8001a04:	484b      	ldr	r0, [pc, #300]	; (8001b34 <init_USART_GPS+0x22c>)
 8001a06:	f7ff faed 	bl	8000fe4 <DMA_GetCmdStatus>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f9      	bne.n	8001a04 <init_USART_GPS+0xfc>
		 *  Stream 2: RX
		 *  Stream 7: TX
		 *  Stream 0: MEM
		 */
			/* shared DMA configuration values */
				DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(USART1->DR));
 8001a10:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <init_USART_GPS+0x230>)
 8001a12:	607b      	str	r3, [r7, #4]
				DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
				DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
				DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38

				DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)DMA_RX_Buffer; //feeds into buffer direct
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <init_USART_GPS+0x234>)
 8001a22:	60bb      	str	r3, [r7, #8]
				DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
				DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2c:	61bb      	str	r3, [r7, #24]
				DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34

				DMA_InitStructure.DMA_Channel = DMA_Channel_4;
 8001a32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a36:	603b      	str	r3, [r7, #0]
				DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
				DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
				DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001a40:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
				DMA_InitStructure.DMA_BufferSize = DMA_RX_BUFFER_SIZE;
 8001a46:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a4a:	613b      	str	r3, [r7, #16]

				DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
				DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001a50:	2303      	movs	r3, #3
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30

				DMA_Init(DMA2_Stream2, &DMA_InitStructure);
 8001a54:	463b      	mov	r3, r7
 8001a56:	4619      	mov	r1, r3
 8001a58:	4834      	ldr	r0, [pc, #208]	; (8001b2c <init_USART_GPS+0x224>)
 8001a5a:	f7ff fa41 	bl	8000ee0 <DMA_Init>

				// enable the interrupt in the NVIC
				NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream2_IRQn;
 8001a5e:	233a      	movs	r3, #58	; 0x3a
 8001a60:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				NVIC_Init(&NVIC_InitStructure);
 8001a76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f8fa 	bl	8000c74 <NVIC_Init>
				DMA_ITConfig(DMA2_Stream2, DMA_IT_TC, ENABLE);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2110      	movs	r1, #16
 8001a84:	4829      	ldr	r0, [pc, #164]	; (8001b2c <init_USART_GPS+0x224>)
 8001a86:	f7ff fb01 	bl	800108c <DMA_ITConfig>
#ifdef STM32_GMEM_USE_DMA
	/* UART - MEM */
	/* shared DMA configuration values */
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)DMA_RX_Buffer;
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <init_USART_GPS+0x234>)
 8001a8c:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
 8001a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a96:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38

	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)GNSS_LOG_Buffer;
 8001a9c:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <init_USART_GPS+0x238>)
 8001a9e:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa8:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34

	DMA_InitStructure.DMA_Channel = DMA_Channel_4;
 8001aae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ab2:	603b      	str	r3, [r7, #0]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToMemory;
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001abc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_BufferSize = GNSS_LOG_BUFFER_SIZE;
 8001ac2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ac6:	613b      	str	r3, [r7, #16]

	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001acc:	2303      	movs	r3, #3
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30

	DMA_Init(DMA2_Stream0, &DMA_InitStructure);
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4817      	ldr	r0, [pc, #92]	; (8001b34 <init_USART_GPS+0x22c>)
 8001ad6:	f7ff fa03 	bl	8000ee0 <DMA_Init>

	// enable the interrupt in the NVIC
	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
 8001ada:	2338      	movs	r3, #56	; 0x38
 8001adc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	NVIC_Init(&NVIC_InitStructure);
 8001af2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f8bc 	bl	8000c74 <NVIC_Init>
	DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);
 8001afc:	2201      	movs	r2, #1
 8001afe:	2110      	movs	r1, #16
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <init_USART_GPS+0x22c>)
 8001b02:	f7ff fac3 	bl	800108c <DMA_ITConfig>

#endif
DMA_Cmd(DMA2_Stream2, ENABLE);
 8001b06:	2101      	movs	r1, #1
 8001b08:	4808      	ldr	r0, [pc, #32]	; (8001b2c <init_USART_GPS+0x224>)
 8001b0a:	f7ff fa41 	bl	8000f90 <DMA_Cmd>
while (DMA_GetCmdStatus(DMA2_Stream2 ) != ENABLE) { ; }
 8001b0e:	bf00      	nop
 8001b10:	4806      	ldr	r0, [pc, #24]	; (8001b2c <init_USART_GPS+0x224>)
 8001b12:	f7ff fa67 	bl	8000fe4 <DMA_GetCmdStatus>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d1f9      	bne.n	8001b10 <init_USART_GPS+0x208>
#endif

}
 8001b1c:	bf00      	nop
 8001b1e:	3758      	adds	r7, #88	; 0x58
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40011000 	.word	0x40011000
 8001b2c:	40026440 	.word	0x40026440
 8001b30:	400264b8 	.word	0x400264b8
 8001b34:	40026410 	.word	0x40026410
 8001b38:	40011004 	.word	0x40011004
 8001b3c:	20000950 	.word	0x20000950
 8001b40:	2000015c 	.word	0x2000015c

08001b44 <zero_dma_gnss_memory>:
}

//==========================================================================
/* USART BUFFER FUNCTIONS*/
static void zero_dma_gnss_memory(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
		for (int i = 0; i < DMA_RX_BUFFER_SIZE; i++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	e007      	b.n	8001b60 <zero_dma_gnss_memory+0x1c>
		{
			DMA_RX_Buffer[i] = 0;
 8001b50:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <zero_dma_gnss_memory+0x30>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]

//==========================================================================
/* USART BUFFER FUNCTIONS*/
static void zero_dma_gnss_memory(void)
{
		for (int i = 0; i < DMA_RX_BUFFER_SIZE; i++)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b66:	dbf3      	blt.n	8001b50 <zero_dma_gnss_memory+0xc>
		{
			DMA_RX_Buffer[i] = 0;
		}
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	20000950 	.word	0x20000950

08001b78 <zero_gnss_memory>:
static void zero_gnss_memory(void)
	{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
		for (int i = 0; i < GNSS_LOG_BUFFER_SIZE; i++){
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	e007      	b.n	8001b94 <zero_gnss_memory+0x1c>
			GNSS_LOG_Buffer[i] = 0;
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <zero_gnss_memory+0x30>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
			DMA_RX_Buffer[i] = 0;
		}
}
static void zero_gnss_memory(void)
	{
		for (int i = 0; i < GNSS_LOG_BUFFER_SIZE; i++){
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3301      	adds	r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b9a:	dbf3      	blt.n	8001b84 <zero_gnss_memory+0xc>
			GNSS_LOG_Buffer[i] = 0;
		}
	}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	2000015c 	.word	0x2000015c

08001bac <USART1_IRQHandler>:
/*
 * called when USART has finished receiving
 * disables the stream
 */
void USART1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
	//idle line detection
	if(USART_GetFlagStatus(USART1,USART_FLAG_IDLE) != RESET)
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <USART1_IRQHandler+0x54>)
 8001bb6:	f7ff fde9 	bl	800178c <USART_GetFlagStatus>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01a      	beq.n	8001bf6 <USART1_IRQHandler+0x4a>
	{
		//clear reg
		RX_COMPLETE_FLAG = 0;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <USART1_IRQHandler+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
		volatile uint32_t tmp;
		tmp = USART_GetITStatus(USART1, USART_IT_IDLE);
 8001bc6:	f240 4124 	movw	r1, #1060	; 0x424
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <USART1_IRQHandler+0x54>)
 8001bcc:	f7ff fdfa 	bl	80017c4 <USART_GetITStatus>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	607b      	str	r3, [r7, #4]
		tmp = USART_ReceiveData(USART1);
 8001bd4:	480a      	ldr	r0, [pc, #40]	; (8001c00 <USART1_IRQHandler+0x54>)
 8001bd6:	f7ff fd5d 	bl	8001694 <USART_ReceiveData>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	607b      	str	r3, [r7, #4]
		(void)tmp;
 8001bde:	687b      	ldr	r3, [r7, #4]

		DMA_Cmd(DMA2_Stream2,DISABLE);
 8001be0:	2100      	movs	r1, #0
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <USART1_IRQHandler+0x5c>)
 8001be4:	f7ff f9d4 	bl	8000f90 <DMA_Cmd>
		while(DMA_GetCmdStatus(DMA2_Stream2) != DISABLE);
 8001be8:	bf00      	nop
 8001bea:	4807      	ldr	r0, [pc, #28]	; (8001c08 <USART1_IRQHandler+0x5c>)
 8001bec:	f7ff f9fa 	bl	8000fe4 <DMA_GetCmdStatus>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f9      	bne.n	8001bea <USART1_IRQHandler+0x3e>

	}

}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40011000 	.word	0x40011000
 8001c04:	2000093c 	.word	0x2000093c
 8001c08:	40026440 	.word	0x40026440

08001c0c <DMA2_Stream2_IRQHandler>:

/* UART-MEM IRQ HANDLER */
#ifdef STM32_GNSS_USE_DMA
void DMA2_Stream2_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	//check transfer complete flag
	if(DMA_GetFlagStatus(DMA2_Stream2,DMA_FLAG_TCIF2) == SET)
 8001c10:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001c14:	4810      	ldr	r0, [pc, #64]	; (8001c58 <DMA2_Stream2_IRQHandler+0x4c>)
 8001c16:	f7ff f9fd 	bl	8001014 <DMA_GetFlagStatus>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d119      	bne.n	8001c54 <DMA2_Stream2_IRQHandler+0x48>
	{

		//set log to off
		RX_COMPLETE_FLAG = 0;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <DMA2_Stream2_IRQHandler+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
		//get data that still needs to be transferred
		gnss_length = DMA_RX_BUFFER_SIZE - DMA_GetCurrDataCounter(DMA2_Stream2);
 8001c26:	480c      	ldr	r0, [pc, #48]	; (8001c58 <DMA2_Stream2_IRQHandler+0x4c>)
 8001c28:	f7ff f9ce 	bl	8000fc8 <DMA_GetCurrDataCounter>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <DMA2_Stream2_IRQHandler+0x54>)
 8001c34:	6013      	str	r3, [r2, #0]
		//zero_gnss_memory();

		//clear USART-DMA Transfer bit
		DMA_ClearITPendingBit(DMA2_Stream2, DMA_IT_TCIF2);
 8001c36:	490b      	ldr	r1, [pc, #44]	; (8001c64 <DMA2_Stream2_IRQHandler+0x58>)
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <DMA2_Stream2_IRQHandler+0x4c>)
 8001c3a:	f7ff fa61 	bl	8001100 <DMA_ClearITPendingBit>

		/* Enable DMA transfer to memory */
		#ifdef STM32_GMEM_USE_DMA
		DMA_Cmd(DMA2_Stream0, ENABLE);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <DMA2_Stream2_IRQHandler+0x5c>)
 8001c42:	f7ff f9a5 	bl	8000f90 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA2_Stream0) != ENABLE) { ; }
 8001c46:	bf00      	nop
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <DMA2_Stream2_IRQHandler+0x5c>)
 8001c4a:	f7ff f9cb 	bl	8000fe4 <DMA_GetCmdStatus>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d1f9      	bne.n	8001c48 <DMA2_Stream2_IRQHandler+0x3c>
		DMA_Cmd(DMA2_Stream2, ENABLE);
		while (DMA_GetCmdStatus(DMA_Stream_USART_GNSS_RX ) != ENABLE) { ; }
		#endif
	}

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40026440 	.word	0x40026440
 8001c5c:	2000093c 	.word	0x2000093c
 8001c60:	2000092c 	.word	0x2000092c
 8001c64:	10208000 	.word	0x10208000
 8001c68:	40026410 	.word	0x40026410

08001c6c <DMA2_Stream0_IRQHandler>:
#endif
/* MEM _ MEM IRQ HANDLER */
#ifdef STM32_GMEM_USE_DMA
void DMA2_Stream0_IRQHandler (void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
	/* Test on DMA Stream Transfer Complete interrupt */
	if (DMA_GetFlagStatus(DMA2_Stream0, DMA_FLAG_TCIF0) != RESET)
 8001c72:	4934      	ldr	r1, [pc, #208]	; (8001d44 <DMA2_Stream0_IRQHandler+0xd8>)
 8001c74:	4834      	ldr	r0, [pc, #208]	; (8001d48 <DMA2_Stream0_IRQHandler+0xdc>)
 8001c76:	f7ff f9cd 	bl	8001014 <DMA_GetFlagStatus>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d05d      	beq.n	8001d3c <DMA2_Stream0_IRQHandler+0xd0>
	{

		RX_COMPLETE_FLAG = 1;
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <DMA2_Stream0_IRQHandler+0xe0>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
		// transfer message to buffer
		char* msg;
		msg = strtok((char*)DMA_RX_Buffer,"$");
 8001c86:	4932      	ldr	r1, [pc, #200]	; (8001d50 <DMA2_Stream0_IRQHandler+0xe4>)
 8001c88:	4832      	ldr	r0, [pc, #200]	; (8001d54 <DMA2_Stream0_IRQHandler+0xe8>)
 8001c8a:	f001 fed9 	bl	8003a40 <strtok>
 8001c8e:	6078      	str	r0, [r7, #4]
		while(msg != NULL)
 8001c90:	e03e      	b.n	8001d10 <DMA2_Stream0_IRQHandler+0xa4>
		{
			switch(is_valid(msg))
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f866 	bl	8001d64 <is_valid>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d012      	beq.n	8001cc4 <DMA2_Stream0_IRQHandler+0x58>
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d01e      	beq.n	8001ce0 <DMA2_Stream0_IRQHandler+0x74>
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d000      	beq.n	8001ca8 <DMA2_Stream0_IRQHandler+0x3c>
						packet_full |= 0b100;
					}
					break;
				default:
					// invalid case
					break;
 8001ca6:	e02e      	b.n	8001d06 <DMA2_Stream0_IRQHandler+0x9a>
		while(msg != NULL)
		{
			switch(is_valid(msg))
			{
				case 1:
					if(Parse_GLL(msg) == 2)
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f9d1 	bl	8002050 <Parse_GLL>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d123      	bne.n	8001cfc <DMA2_Stream0_IRQHandler+0x90>
					{
						packet_full |= 0b1;
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <DMA2_Stream0_IRQHandler+0xec>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <DMA2_Stream0_IRQHandler+0xec>)
 8001cc0:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001cc2:	e01b      	b.n	8001cfc <DMA2_Stream0_IRQHandler+0x90>
				case 2:

					if(parse_GSA(msg) == 0)
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fa5b 	bl	8002180 <parse_GSA>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d117      	bne.n	8001d00 <DMA2_Stream0_IRQHandler+0x94>
					{
						packet_full |= 0b10;
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <DMA2_Stream0_IRQHandler+0xec>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <DMA2_Stream0_IRQHandler+0xec>)
 8001cdc:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001cde:	e00f      	b.n	8001d00 <DMA2_Stream0_IRQHandler+0x94>
				case 3:
					if(parse_ZDA(msg) == 0)
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f8ed 	bl	8001ec0 <parse_ZDA>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10b      	bne.n	8001d04 <DMA2_Stream0_IRQHandler+0x98>
					{
						packet_full |= 0b100;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <DMA2_Stream0_IRQHandler+0xec>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <DMA2_Stream0_IRQHandler+0xec>)
 8001cf8:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001cfa:	e003      	b.n	8001d04 <DMA2_Stream0_IRQHandler+0x98>
				case 1:
					if(Parse_GLL(msg) == 2)
					{
						packet_full |= 0b1;
					}
					break;
 8001cfc:	bf00      	nop
 8001cfe:	e002      	b.n	8001d06 <DMA2_Stream0_IRQHandler+0x9a>

					if(parse_GSA(msg) == 0)
					{
						packet_full |= 0b10;
					}
					break;
 8001d00:	bf00      	nop
 8001d02:	e000      	b.n	8001d06 <DMA2_Stream0_IRQHandler+0x9a>
				case 3:
					if(parse_ZDA(msg) == 0)
					{
						packet_full |= 0b100;
					}
					break;
 8001d04:	bf00      	nop
				default:
					// invalid case
					break;
			}
			msg = strtok(NULL,"$");
 8001d06:	4912      	ldr	r1, [pc, #72]	; (8001d50 <DMA2_Stream0_IRQHandler+0xe4>)
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f001 fe99 	bl	8003a40 <strtok>
 8001d0e:	6078      	str	r0, [r7, #4]

		RX_COMPLETE_FLAG = 1;
		// transfer message to buffer
		char* msg;
		msg = strtok((char*)DMA_RX_Buffer,"$");
		while(msg != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1bd      	bne.n	8001c92 <DMA2_Stream0_IRQHandler+0x26>
					// invalid case
					break;
			}
			msg = strtok(NULL,"$");
		}
		zero_dma_gnss_memory();
 8001d16:	f7ff ff15 	bl	8001b44 <zero_dma_gnss_memory>
		zero_gnss_memory();
 8001d1a:	f7ff ff2d 	bl	8001b78 <zero_gnss_memory>
		/* Clear DMA Stream Transfer Complete interrupt pending bit */
		DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);
 8001d1e:	490f      	ldr	r1, [pc, #60]	; (8001d5c <DMA2_Stream0_IRQHandler+0xf0>)
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <DMA2_Stream0_IRQHandler+0xdc>)
 8001d22:	f7ff f9ed 	bl	8001100 <DMA_ClearITPendingBit>

		/* Enable DMA transfer */
		DMA_Cmd(DMA2_Stream2, ENABLE);
 8001d26:	2101      	movs	r1, #1
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <DMA2_Stream0_IRQHandler+0xf4>)
 8001d2a:	f7ff f931 	bl	8000f90 <DMA_Cmd>
		while (DMA_GetCmdStatus(DMA2_Stream2 ) != ENABLE);
 8001d2e:	bf00      	nop
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <DMA2_Stream0_IRQHandler+0xf4>)
 8001d32:	f7ff f957 	bl	8000fe4 <DMA_GetCmdStatus>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d1f9      	bne.n	8001d30 <DMA2_Stream0_IRQHandler+0xc4>

	}
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	10000020 	.word	0x10000020
 8001d48:	40026410 	.word	0x40026410
 8001d4c:	2000093c 	.word	0x2000093c
 8001d50:	08005a40 	.word	0x08005a40
 8001d54:	20000950 	.word	0x20000950
 8001d58:	20000944 	.word	0x20000944
 8001d5c:	10008020 	.word	0x10008020
 8001d60:	40026440 	.word	0x40026440

08001d64 <is_valid>:
 *   1 GLL msg
 *   2 GGA msg
 *   3 ZDA msg
 */
uint8_t is_valid(char* nmeamsg)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	77fb      	strb	r3, [r7, #31]

	char msg[4] = {0};
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	e00d      	b.n	8001d96 <is_valid+0x32>
	{
		msg[i] = *(nmeamsg+2+i);
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	7819      	ldrb	r1, [r3, #0]
 8001d84:	f107 020c 	add.w	r2, r7, #12
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	701a      	strb	r2, [r3, #0]
uint8_t is_valid(char* nmeamsg)
{
	uint8_t flag = 0;

	char msg[4] = {0};
	for (int i = 0; i < 3; ++i)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	3301      	adds	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	ddee      	ble.n	8001d7a <is_valid+0x16>
	{
		msg[i] = *(nmeamsg+2+i);
	}
	if((strcmp((char*)msg,"GLL") != 0))
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	492c      	ldr	r1, [pc, #176]	; (8001e54 <is_valid+0xf0>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fa14 	bl	80001d0 <strcmp>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d019      	beq.n	8001de2 <is_valid+0x7e>
	{

		if (strcmp((char*)msg,"ZDA") != 0)
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4929      	ldr	r1, [pc, #164]	; (8001e58 <is_valid+0xf4>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fa0b 	bl	80001d0 <strcmp>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00d      	beq.n	8001ddc <is_valid+0x78>
		{
			if(strcmp((char*)msg,"GSA") != 0)
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4925      	ldr	r1, [pc, #148]	; (8001e5c <is_valid+0xf8>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fa02 	bl	80001d0 <strcmp>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <is_valid+0x72>
			{
				return -1;
 8001dd2:	23ff      	movs	r3, #255	; 0xff
 8001dd4:	e039      	b.n	8001e4a <is_valid+0xe6>
			}
			else
			{
				flag = 2;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	77fb      	strb	r3, [r7, #31]
 8001dda:	e004      	b.n	8001de6 <is_valid+0x82>
			}
		}else
		{
			flag = 3;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	77fb      	strb	r3, [r7, #31]
 8001de0:	e001      	b.n	8001de6 <is_valid+0x82>
		}

	}
	else
	{
		flag = 1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	77fb      	strb	r3, [r7, #31]
	}
	/* check sum */
	uint16_t checksum = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	82fb      	strh	r3, [r7, #22]
	while(*nmeamsg != '*')
 8001dea:	e008      	b.n	8001dfe <is_valid+0x9a>
	{
		checksum^= *nmeamsg;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	8afb      	ldrh	r3, [r7, #22]
 8001df4:	4053      	eors	r3, r2
 8001df6:	82fb      	strh	r3, [r7, #22]
		nmeamsg++;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	607b      	str	r3, [r7, #4]
	{
		flag = 1;
	}
	/* check sum */
	uint16_t checksum = 0;
	while(*nmeamsg != '*')
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b2a      	cmp	r3, #42	; 0x2a
 8001e04:	d1f2      	bne.n	8001dec <is_valid+0x88>
	{
		checksum^= *nmeamsg;
		nmeamsg++;
	}
	uint8_t h = char_to_hex(*(++nmeamsg))*16;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f825 	bl	8001e60 <char_to_hex>
 8001e16:	4603      	mov	r3, r0
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	757b      	strb	r3, [r7, #21]
	uint8_t l = char_to_hex(*(++nmeamsg));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f81a 	bl	8001e60 <char_to_hex>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	753b      	strb	r3, [r7, #20]
	uint16_t checkbyte= h+l;
 8001e30:	7d7b      	ldrb	r3, [r7, #21]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	7d3b      	ldrb	r3, [r7, #20]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	827b      	strh	r3, [r7, #18]

	if(!(checksum == checkbyte))
 8001e3c:	8afa      	ldrh	r2, [r7, #22]
 8001e3e:	8a7b      	ldrh	r3, [r7, #18]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <is_valid+0xe4>
	{
		return -1;
 8001e44:	23ff      	movs	r3, #255	; 0xff
 8001e46:	e000      	b.n	8001e4a <is_valid+0xe6>
	}

	return flag;
 8001e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08005a44 	.word	0x08005a44
 8001e58:	08005a48 	.word	0x08005a48
 8001e5c:	08005a4c 	.word	0x08005a4c

08001e60 <char_to_hex>:
/*
 * Flag keeps track of successful coordinate retrievals
 */
uint8_t char_to_hex(char c)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
	if(c == '\0')
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <char_to_hex+0x14>
	{
		return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e01e      	b.n	8001eb2 <char_to_hex+0x52>
	}
	if ((c >='0') &&(c <='9'))
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2b2f      	cmp	r3, #47	; 0x2f
 8001e78:	d906      	bls.n	8001e88 <char_to_hex+0x28>
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b39      	cmp	r3, #57	; 0x39
 8001e7e:	d803      	bhi.n	8001e88 <char_to_hex+0x28>
	{
		return (uint8_t)c - 48;
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	3b30      	subs	r3, #48	; 0x30
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e014      	b.n	8001eb2 <char_to_hex+0x52>
	}
	if((c >='a') &&(c <='f'))
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b60      	cmp	r3, #96	; 0x60
 8001e8c:	d906      	bls.n	8001e9c <char_to_hex+0x3c>
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b66      	cmp	r3, #102	; 0x66
 8001e92:	d803      	bhi.n	8001e9c <char_to_hex+0x3c>
	{
		return (uint8_t)c - 87;
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	3b57      	subs	r3, #87	; 0x57
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e00a      	b.n	8001eb2 <char_to_hex+0x52>
	}
	if((c >='A') &&(c <='F'))
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d906      	bls.n	8001eb0 <char_to_hex+0x50>
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	2b46      	cmp	r3, #70	; 0x46
 8001ea6:	d803      	bhi.n	8001eb0 <char_to_hex+0x50>
	{
		return (uint8_t)c - 55;
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	3b37      	subs	r3, #55	; 0x37
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e000      	b.n	8001eb2 <char_to_hex+0x52>
	}
	return -1; //invalid charachter
 8001eb0:	23ff      	movs	r3, #255	; 0xff
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop

08001ec0 <parse_ZDA>:
/*
 * Parser Functions:
 * Extract key data from NMEA message strings.
 */
uint8_t parse_ZDA(char* ZDAstring)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	time_t t;
	struct tm *timepointer;

	t = time(NULL);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f001 fe17 	bl	8003afc <time>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	60fb      	str	r3, [r7, #12]
	timepointer = localtime(&t);
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fb7a 	bl	80025d0 <localtime>
 8001edc:	61b8      	str	r0, [r7, #24]
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
 8001ede:	bf00      	nop
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b2c      	cmp	r3, #44	; 0x2c
 8001eea:	d1f9      	bne.n	8001ee0 <parse_ZDA+0x20>
	char* temp = ZDAstring++;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	e011      	b.n	8001f1e <parse_ZDA+0x5e>
	{
		if ((ZDAstring[i]==',')&&(ZDAstring[i+1] == ','))
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b2c      	cmp	r3, #44	; 0x2c
 8001f04:	d108      	bne.n	8001f18 <parse_ZDA+0x58>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b2c      	cmp	r3, #44	; 0x2c
 8001f12:	d101      	bne.n	8001f18 <parse_ZDA+0x58>
		{
			/* Data is invalid*/
			return -1;
 8001f14:	23ff      	movs	r3, #255	; 0xff
 8001f16:	e094      	b.n	8002042 <parse_ZDA+0x182>
	t = time(NULL);
	timepointer = localtime(&t);
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
	char* temp = ZDAstring++;
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe f960 	bl	80001e4 <strlen>
 8001f24:	4602      	mov	r2, r0
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8e6      	bhi.n	8001efa <parse_ZDA+0x3a>
		{
			/* Data is invalid*/
			return -1;
		}
	}
	timepointer->tm_hour = (temp[0]-48)*10+ (temp[1]-48)-1;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3b30      	subs	r3, #48	; 0x30
 8001f46:	4413      	add	r3, r2
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]
	timepointer->tm_min = (temp[2]-48)*10+ (temp[3]-48)-1;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3302      	adds	r3, #2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	461a      	mov	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3303      	adds	r3, #3
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	3b30      	subs	r3, #48	; 0x30
 8001f6a:	4413      	add	r3, r2
 8001f6c:	1e5a      	subs	r2, r3, #1
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	605a      	str	r2, [r3, #4]
	timepointer->tm_sec = (temp[4]-48)*10+ (temp[5]-48) -1 ;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3304      	adds	r3, #4
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	461a      	mov	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3305      	adds	r3, #5
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	3b30      	subs	r3, #48	; 0x30
 8001f8e:	4413      	add	r3, r2
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	601a      	str	r2, [r3, #0]
	while(*ZDAstring++ != ',');
 8001f96:	bf00      	nop
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b2c      	cmp	r3, #44	; 0x2c
 8001fa2:	d1f9      	bne.n	8001f98 <parse_ZDA+0xd8>
	temp = ZDAstring;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	617b      	str	r3, [r7, #20]
	timepointer->tm_mday = (temp[0]-48)*10+ (temp[1]-48);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	461a      	mov	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	3b30      	subs	r3, #48	; 0x30
 8001fc2:	441a      	add	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	60da      	str	r2, [r3, #12]
	timepointer->tm_mon = (temp[3]-48)*10+ (temp[4]-48)-1;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3303      	adds	r3, #3
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	461a      	mov	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	3b30      	subs	r3, #48	; 0x30
 8001fe4:	4413      	add	r3, r2
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	611a      	str	r2, [r3, #16]
	timepointer->tm_year = (temp[6]-48)*1000 +(temp[7]-48)*100 + (temp[8]-48)*10 +(temp[9]-48)-1900;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3306      	adds	r3, #6
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	3b30      	subs	r3, #48	; 0x30
 8001ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ff8:	fb02 f203 	mul.w	r2, r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3307      	adds	r3, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	3b30      	subs	r3, #48	; 0x30
 8002004:	2164      	movs	r1, #100	; 0x64
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	18d1      	adds	r1, r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3308      	adds	r3, #8
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	18ca      	adds	r2, r1, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3309      	adds	r3, #9
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3b30      	subs	r3, #48	; 0x30
 8002028:	4413      	add	r3, r2
 800202a:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	615a      	str	r2, [r3, #20]
	time_t result;

	 result = mktime(timepointer);
 8002032:	69b8      	ldr	r0, [r7, #24]
 8002034:	f000 fcb0 	bl	8002998 <mktime>
 8002038:	6138      	str	r0, [r7, #16]
	 eTime =  result;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4a03      	ldr	r2, [pc, #12]	; (800204c <parse_ZDA+0x18c>)
 800203e:	6013      	str	r3, [r2, #0]
	return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000940 	.word	0x20000940

08002050 <Parse_GLL>:
uint8_t Parse_GLL(char* GLLstring)
{
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	/* Extract latitude*/
	uint8_t flag = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	75fb      	strb	r3, [r7, #23]
	GLLstring+= 7;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3307      	adds	r3, #7
 8002060:	607b      	str	r3, [r7, #4]
	char* temp = GLLstring;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	613b      	str	r3, [r7, #16]
	uint8_t count = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 800206a:	e002      	b.n	8002072 <Parse_GLL+0x22>
	{
		count++;
 800206c:	7dbb      	ldrb	r3, [r7, #22]
 800206e:	3301      	adds	r3, #1
 8002070:	75bb      	strb	r3, [r7, #22]
	/* Extract latitude*/
	uint8_t flag = 0;
	GLLstring+= 7;
	char* temp = GLLstring;
	uint8_t count = 0;
	while(*GLLstring++ != ',')
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b2c      	cmp	r3, #44	; 0x2c
 800207c:	d1f6      	bne.n	800206c <Parse_GLL+0x1c>
	{
		count++;
	}
	if((count > 0))
 800207e:	7dbb      	ldrb	r3, [r7, #22]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d02e      	beq.n	80020e2 <Parse_GLL+0x92>
	{
		temp[count] = '\0';
 8002084:	7dbb      	ldrb	r3, [r7, #22]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
		int8_t sign = 1 -2*( temp[++count] =='S');
 800208e:	7dbb      	ldrb	r3, [r7, #22]
 8002090:	3301      	adds	r3, #1
 8002092:	75bb      	strb	r3, [r7, #22]
 8002094:	7dbb      	ldrb	r3, [r7, #22]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b53      	cmp	r3, #83	; 0x53
 800209e:	d102      	bne.n	80020a6 <Parse_GLL+0x56>
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
 80020a4:	e000      	b.n	80020a8 <Parse_GLL+0x58>
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
		GPS_coord.lat = sign*atof(temp);
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa48 	bl	8000544 <__aeabi_i2d>
 80020b4:	4604      	mov	r4, r0
 80020b6:	460d      	mov	r5, r1
 80020b8:	6938      	ldr	r0, [r7, #16]
 80020ba:	f000 fa5f 	bl	800257c <atof>
 80020be:	ec53 2b10 	vmov	r2, r3, d0
 80020c2:	4620      	mov	r0, r4
 80020c4:	4629      	mov	r1, r5
 80020c6:	f7fe faa3 	bl	8000610 <__aeabi_dmul>
 80020ca:	4603      	mov	r3, r0
 80020cc:	460c      	mov	r4, r1
 80020ce:	4618      	mov	r0, r3
 80020d0:	4621      	mov	r1, r4
 80020d2:	f7fe fd7f 	bl	8000bd4 <__aeabi_d2f>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b28      	ldr	r3, [pc, #160]	; (800217c <Parse_GLL+0x12c>)
 80020da:	601a      	str	r2, [r3, #0]
		flag++;
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	3301      	adds	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
	}

	/* Extract longitude */
	while(*GLLstring++ !=',');
 80020e2:	bf00      	nop
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b2c      	cmp	r3, #44	; 0x2c
 80020ee:	d1f9      	bne.n	80020e4 <Parse_GLL+0x94>
	temp = GLLstring;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	613b      	str	r3, [r7, #16]
	count = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 80020f8:	e002      	b.n	8002100 <Parse_GLL+0xb0>
	{
			count++;
 80020fa:	7dbb      	ldrb	r3, [r7, #22]
 80020fc:	3301      	adds	r3, #1
 80020fe:	75bb      	strb	r3, [r7, #22]

	/* Extract longitude */
	while(*GLLstring++ !=',');
	temp = GLLstring;
	count = 0;
	while(*GLLstring++ != ',')
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b2c      	cmp	r3, #44	; 0x2c
 800210a:	d1f6      	bne.n	80020fa <Parse_GLL+0xaa>
	{
			count++;
	}
	if((count > 0))
 800210c:	7dbb      	ldrb	r3, [r7, #22]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d02e      	beq.n	8002170 <Parse_GLL+0x120>
	{
			temp[count] = '\0';
 8002112:	7dbb      	ldrb	r3, [r7, #22]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
			int8_t sign = 1 -2*( temp[++count] =='W');
 800211c:	7dbb      	ldrb	r3, [r7, #22]
 800211e:	3301      	adds	r3, #1
 8002120:	75bb      	strb	r3, [r7, #22]
 8002122:	7dbb      	ldrb	r3, [r7, #22]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b57      	cmp	r3, #87	; 0x57
 800212c:	d102      	bne.n	8002134 <Parse_GLL+0xe4>
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e000      	b.n	8002136 <Parse_GLL+0xe6>
 8002134:	2301      	movs	r3, #1
 8002136:	73bb      	strb	r3, [r7, #14]
			GPS_coord.longi = sign*atof(temp);
 8002138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fa01 	bl	8000544 <__aeabi_i2d>
 8002142:	4604      	mov	r4, r0
 8002144:	460d      	mov	r5, r1
 8002146:	6938      	ldr	r0, [r7, #16]
 8002148:	f000 fa18 	bl	800257c <atof>
 800214c:	ec53 2b10 	vmov	r2, r3, d0
 8002150:	4620      	mov	r0, r4
 8002152:	4629      	mov	r1, r5
 8002154:	f7fe fa5c 	bl	8000610 <__aeabi_dmul>
 8002158:	4603      	mov	r3, r0
 800215a:	460c      	mov	r4, r1
 800215c:	4618      	mov	r0, r3
 800215e:	4621      	mov	r1, r4
 8002160:	f7fe fd38 	bl	8000bd4 <__aeabi_d2f>
 8002164:	4602      	mov	r2, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <Parse_GLL+0x12c>)
 8002168:	605a      	str	r2, [r3, #4]
			flag++;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
 800216c:	3301      	adds	r3, #1
 800216e:	75fb      	strb	r3, [r7, #23]

	}

return flag;
 8002170:	7dfb      	ldrb	r3, [r7, #23]

}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bdb0      	pop	{r4, r5, r7, pc}
 800217a:	bf00      	nop
 800217c:	20000948 	.word	0x20000948

08002180 <parse_GSA>:
uint8_t parse_GSA(char* GSA_string)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	77fb      	strb	r3, [r7, #31]
	char* t = GSA_string;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	61bb      	str	r3, [r7, #24]
	while(count < 2)
 8002190:	e008      	b.n	80021a4 <parse_GSA+0x24>
	{
		if(*t++==',')count++;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	61ba      	str	r2, [r7, #24]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b2c      	cmp	r3, #44	; 0x2c
 800219c:	d102      	bne.n	80021a4 <parse_GSA+0x24>
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	3301      	adds	r3, #1
 80021a2:	77fb      	strb	r3, [r7, #31]
uint8_t parse_GSA(char* GSA_string)
{
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
	char* t = GSA_string;
	while(count < 2)
 80021a4:	7ffb      	ldrb	r3, [r7, #31]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d9f3      	bls.n	8002192 <parse_GSA+0x12>
	{
		if(*t++==',')count++;
	}
	diag.fix_type = (*t++-48);
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	61ba      	str	r2, [r7, #24]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	3b30      	subs	r3, #48	; 0x30
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <parse_GSA+0x14c>)
 80021b8:	71da      	strb	r2, [r3, #7]

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
	uint8_t numfields = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 80021c2:	e015      	b.n	80021f0 <parse_GSA+0x70>
	{
		uint8_t count = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	757b      	strb	r3, [r7, #21]
		while(*++t !=',')count++;
 80021c8:	e002      	b.n	80021d0 <parse_GSA+0x50>
 80021ca:	7d7b      	ldrb	r3, [r7, #21]
 80021cc:	3301      	adds	r3, #1
 80021ce:	757b      	strb	r3, [r7, #21]
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	3301      	adds	r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b2c      	cmp	r3, #44	; 0x2c
 80021dc:	d1f5      	bne.n	80021ca <parse_GSA+0x4a>
		if(count > 0)
 80021de:	7d7b      	ldrb	r3, [r7, #21]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <parse_GSA+0x6a>
		{
			numsats++;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	3301      	adds	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
		}
		numfields++;
 80021ea:	7dbb      	ldrb	r3, [r7, #22]
 80021ec:	3301      	adds	r3, #1
 80021ee:	75bb      	strb	r3, [r7, #22]
	diag.fix_type = (*t++-48);

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
	uint8_t numfields = 0;
	while(numfields < 12)
 80021f0:	7dbb      	ldrb	r3, [r7, #22]
 80021f2:	2b0b      	cmp	r3, #11
 80021f4:	d9e6      	bls.n	80021c4 <parse_GSA+0x44>
			numsats++;
		}
		numfields++;

	}
	diag.num_sats = numsats;
 80021f6:	4a35      	ldr	r2, [pc, #212]	; (80022cc <parse_GSA+0x14c>)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	7193      	strb	r3, [r2, #6]
	DOP_t dop[3] = {0};
 80021fc:	f107 0308 	add.w	r3, r7, #8
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 3; ++i)
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e043      	b.n	8002294 <parse_GSA+0x114>
	{
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	f107 0220 	add.w	r2, r7, #32
 8002214:	4413      	add	r3, r2
 8002216:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800221a:	461a      	mov	r2, r3
 800221c:	0092      	lsls	r2, r2, #2
 800221e:	4413      	add	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4413      	add	r3, r2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3b30      	subs	r3, #48	; 0x30
 800222e:	b2da      	uxtb	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	f107 0120 	add.w	r1, r7, #32
 8002238:	440b      	add	r3, r1
 800223a:	f803 2c18 	strb.w	r2, [r3, #-24]
	diag.num_sats = numsats;
	DOP_t dop[3] = {0};
	for (int i = 0; i < 3; ++i)
	{
		//get digit
		while(*++t != '.')
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	3301      	adds	r3, #1
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b2e      	cmp	r3, #46	; 0x2e
 800224a:	d1df      	bne.n	800220c <parse_GSA+0x8c>
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
		}
		while(*++t != ',')
 800224c:	e018      	b.n	8002280 <parse_GSA+0x100>
		{
			dop[i].precision = dop[i].precision*10+(*t-48);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	f107 0220 	add.w	r2, r7, #32
 8002256:	4413      	add	r3, r2
 8002258:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 800225c:	461a      	mov	r2, r3
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4413      	add	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	b2da      	uxtb	r2, r3
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	b2db      	uxtb	r3, r3
 800226e:	3b30      	subs	r3, #48	; 0x30
 8002270:	b2da      	uxtb	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	f107 0120 	add.w	r1, r7, #32
 800227a:	440b      	add	r3, r1
 800227c:	f803 2c17 	strb.w	r2, [r3, #-23]
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
		}
		while(*++t != ',')
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	3301      	adds	r3, #1
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b2c      	cmp	r3, #44	; 0x2c
 800228c:	d1df      	bne.n	800224e <parse_GSA+0xce>
		numfields++;

	}
	diag.num_sats = numsats;
	DOP_t dop[3] = {0};
	for (int i = 0; i < 3; ++i)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	3301      	adds	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b02      	cmp	r3, #2
 8002298:	ddd1      	ble.n	800223e <parse_GSA+0xbe>
	}
	/*
	 * If successful, add to diagnostic struct
	 *
	 */
diag.HDOP = dop[0];
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <parse_GSA+0x14c>)
 800229c:	3302      	adds	r3, #2
 800229e:	f107 0208 	add.w	r2, r7, #8
 80022a2:	8812      	ldrh	r2, [r2, #0]
 80022a4:	801a      	strh	r2, [r3, #0]
diag.PDOP = dop[1];
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <parse_GSA+0x14c>)
 80022a8:	461a      	mov	r2, r3
 80022aa:	f107 030a 	add.w	r3, r7, #10
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	8013      	strh	r3, [r2, #0]
diag.VDOP = dop[2];
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <parse_GSA+0x14c>)
 80022b4:	3304      	adds	r3, #4
 80022b6:	f107 020c 	add.w	r2, r7, #12
 80022ba:	8812      	ldrh	r2, [r2, #0]
 80022bc:	801a      	strh	r2, [r3, #0]
	return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	20000934 	.word	0x20000934

080022d0 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
  STM_EVAL_LEDInit(LED3);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff fad0 	bl	800187c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff facd 	bl	800187c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 80022e2:	2002      	movs	r0, #2
 80022e4:	f7ff faca 	bl	800187c <STM_EVAL_LEDInit>
  init_USART_GPS();
 80022e8:	f7ff fb0e 	bl	8001908 <init_USART_GPS>
  //init_flag
   packet_full = 0;
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <main+0x74>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
   /* TODO - Add your application code here */
  /* Infinite loop */
  while (1)
  {
	  //perform function only when data from GPS is received;
	  if(packet_full &0b1)
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <main+0x74>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <main+0x3a>
	  {
		p.GPS_Coord = GPS_coord;
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <main+0x78>)
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002306:	e883 0003 	stmia.w	r3, {r0, r1}
	  }
	  if(packet_full &0b10)
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <main+0x74>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <main+0x52>
	  {
	  	p.GPS_Diag = diag;
 8002316:	4a0d      	ldr	r2, [pc, #52]	; (800234c <main+0x7c>)
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	6810      	ldr	r0, [r2, #0]
 800231e:	6851      	ldr	r1, [r2, #4]
 8002320:	c303      	stmia	r3!, {r0, r1}
	  }if(packet_full &0b100)
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <main+0x74>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <main+0x64>
	  {
		p.EpochTime = eTime;
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <main+0x80>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]
	  }

	  if(packet_full == 7)
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <main+0x74>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b07      	cmp	r3, #7
 800233a:	d1da      	bne.n	80022f2 <main+0x22>
	  {
		  STM_EVAL_LEDOn(LED3);
 800233c:	2001      	movs	r0, #1
 800233e:	f7ff facb 	bl	80018d8 <STM_EVAL_LEDOn>
	  }

  }
 8002342:	e7d6      	b.n	80022f2 <main+0x22>
 8002344:	20000944 	.word	0x20000944
 8002348:	20000948 	.word	0x20000948
 800234c:	20000934 	.word	0x20000934
 8002350:	20000940 	.word	0x20000940

08002354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800238c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002358:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800235a:	e003      	b.n	8002364 <LoopCopyDataInit>

0800235c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800235e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002360:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002362:	3104      	adds	r1, #4

08002364 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002364:	480b      	ldr	r0, [pc, #44]	; (8002394 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002368:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800236a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800236c:	d3f6      	bcc.n	800235c <CopyDataInit>
  ldr  r2, =_sbss
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002370:	e002      	b.n	8002378 <LoopFillZerobss>

08002372 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002372:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002374:	f842 3b04 	str.w	r3, [r2], #4

08002378 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800237a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800237c:	d3f9      	bcc.n	8002372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800237e:	f000 f84b 	bl	8002418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002382:	f000 f8ff 	bl	8002584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002386:	f7ff ffa3 	bl	80022d0 <main>
  bx  lr    
 800238a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800238c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002390:	08005e5c 	.word	0x08005e5c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002398:	2000010c 	.word	0x2000010c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800239c:	2000010c 	.word	0x2000010c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023a0:	20001124 	.word	0x20001124

080023a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <ADC_IRQHandler>
	...

080023a8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop

080023b8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80023bc:	e7fe      	b.n	80023bc <HardFault_Handler+0x4>
 80023be:	bf00      	nop

080023c0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80023c4:	e7fe      	b.n	80023c4 <MemManage_Handler+0x4>
 80023c6:	bf00      	nop

080023c8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80023cc:	e7fe      	b.n	80023cc <BusFault_Handler+0x4>
 80023ce:	bf00      	nop

080023d0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80023d4:	e7fe      	b.n	80023d4 <UsageFault_Handler+0x4>
 80023d6:	bf00      	nop

080023d8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop

08002408 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop

08002418 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800241c:	4a16      	ldr	r2, [pc, #88]	; (8002478 <SystemInit+0x60>)
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <SystemInit+0x60>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <SystemInit+0x64>)
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <SystemInit+0x64>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <SystemInit+0x64>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800243e:	4a0f      	ldr	r2, [pc, #60]	; (800247c <SystemInit+0x64>)
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <SystemInit+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <SystemInit+0x64>)
 8002450:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <SystemInit+0x68>)
 8002452:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002454:	4a09      	ldr	r2, [pc, #36]	; (800247c <SystemInit+0x64>)
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <SystemInit+0x64>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <SystemInit+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002466:	f000 f80d 	bl	8002484 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800246a:	4b03      	ldr	r3, [pc, #12]	; (8002478 <SystemInit+0x60>)
 800246c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002470:	609a      	str	r2, [r3, #8]
#endif
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00
 800247c:	40023800 	.word	0x40023800
 8002480:	24003010 	.word	0x24003010

08002484 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002492:	4a36      	ldr	r2, [pc, #216]	; (800256c <SetSysClock+0xe8>)
 8002494:	4b35      	ldr	r3, [pc, #212]	; (800256c <SetSysClock+0xe8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800249e:	4b33      	ldr	r3, [pc, #204]	; (800256c <SetSysClock+0xe8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3301      	adds	r3, #1
 80024ac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d103      	bne.n	80024bc <SetSysClock+0x38>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80024ba:	d1f0      	bne.n	800249e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80024bc:	4b2b      	ldr	r3, [pc, #172]	; (800256c <SetSysClock+0xe8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80024c8:	2301      	movs	r3, #1
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	e001      	b.n	80024d2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d142      	bne.n	800255e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80024d8:	4a24      	ldr	r2, [pc, #144]	; (800256c <SetSysClock+0xe8>)
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <SetSysClock+0xe8>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80024e4:	4a22      	ldr	r2, [pc, #136]	; (8002570 <SetSysClock+0xec>)
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <SetSysClock+0xec>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ee:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <SetSysClock+0xe8>)
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <SetSysClock+0xe8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80024f8:	4a1c      	ldr	r2, [pc, #112]	; (800256c <SetSysClock+0xe8>)
 80024fa:	4b1c      	ldr	r3, [pc, #112]	; (800256c <SetSysClock+0xe8>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002502:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <SetSysClock+0xe8>)
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <SetSysClock+0xe8>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800250e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <SetSysClock+0xe8>)
 8002512:	4a18      	ldr	r2, [pc, #96]	; (8002574 <SetSysClock+0xf0>)
 8002514:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002516:	4a15      	ldr	r2, [pc, #84]	; (800256c <SetSysClock+0xe8>)
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <SetSysClock+0xe8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002520:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002522:	bf00      	nop
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <SetSysClock+0xe8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f9      	beq.n	8002524 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <SetSysClock+0xf4>)
 8002532:	f240 6205 	movw	r2, #1541	; 0x605
 8002536:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002538:	4a0c      	ldr	r2, [pc, #48]	; (800256c <SetSysClock+0xe8>)
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <SetSysClock+0xe8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002544:	4a09      	ldr	r2, [pc, #36]	; (800256c <SetSysClock+0xe8>)
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <SetSysClock+0xe8>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002550:	bf00      	nop
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <SetSysClock+0xe8>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b08      	cmp	r3, #8
 800255c:	d1f9      	bne.n	8002552 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40007000 	.word	0x40007000
 8002574:	07405408 	.word	0x07405408
 8002578:	40023c00 	.word	0x40023c00

0800257c <atof>:
 800257c:	2100      	movs	r1, #0
 800257e:	f001 ba57 	b.w	8003a30 <strtod>
	...

08002584 <__libc_init_array>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <__libc_init_array+0x3c>)
 8002588:	4c0e      	ldr	r4, [pc, #56]	; (80025c4 <__libc_init_array+0x40>)
 800258a:	1ae4      	subs	r4, r4, r3
 800258c:	10a4      	asrs	r4, r4, #2
 800258e:	2500      	movs	r5, #0
 8002590:	461e      	mov	r6, r3
 8002592:	42a5      	cmp	r5, r4
 8002594:	d004      	beq.n	80025a0 <__libc_init_array+0x1c>
 8002596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800259a:	4798      	blx	r3
 800259c:	3501      	adds	r5, #1
 800259e:	e7f8      	b.n	8002592 <__libc_init_array+0xe>
 80025a0:	f003 fa40 	bl	8005a24 <_init>
 80025a4:	4c08      	ldr	r4, [pc, #32]	; (80025c8 <__libc_init_array+0x44>)
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <__libc_init_array+0x48>)
 80025a8:	1ae4      	subs	r4, r4, r3
 80025aa:	10a4      	asrs	r4, r4, #2
 80025ac:	2500      	movs	r5, #0
 80025ae:	461e      	mov	r6, r3
 80025b0:	42a5      	cmp	r5, r4
 80025b2:	d004      	beq.n	80025be <__libc_init_array+0x3a>
 80025b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025b8:	4798      	blx	r3
 80025ba:	3501      	adds	r5, #1
 80025bc:	e7f8      	b.n	80025b0 <__libc_init_array+0x2c>
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	08005e54 	.word	0x08005e54
 80025c4:	08005e54 	.word	0x08005e54
 80025c8:	08005e58 	.word	0x08005e58
 80025cc:	08005e54 	.word	0x08005e54

080025d0 <localtime>:
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <localtime+0x20>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025d8:	4605      	mov	r5, r0
 80025da:	b91b      	cbnz	r3, 80025e4 <localtime+0x14>
 80025dc:	2024      	movs	r0, #36	; 0x24
 80025de:	f000 f8ef 	bl	80027c0 <malloc>
 80025e2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80025e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025e6:	4628      	mov	r0, r5
 80025e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025ec:	f000 b802 	b.w	80025f4 <localtime_r>
 80025f0:	200000c8 	.word	0x200000c8

080025f4 <localtime_r>:
 80025f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f8:	460c      	mov	r4, r1
 80025fa:	4680      	mov	r8, r0
 80025fc:	f002 f84a 	bl	8004694 <__gettzinfo>
 8002600:	4621      	mov	r1, r4
 8002602:	4607      	mov	r7, r0
 8002604:	4640      	mov	r0, r8
 8002606:	f002 f849 	bl	800469c <gmtime_r>
 800260a:	6946      	ldr	r6, [r0, #20]
 800260c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8002610:	07b3      	lsls	r3, r6, #30
 8002612:	4604      	mov	r4, r0
 8002614:	d105      	bne.n	8002622 <localtime_r+0x2e>
 8002616:	2264      	movs	r2, #100	; 0x64
 8002618:	fb96 f3f2 	sdiv	r3, r6, r2
 800261c:	fb02 6313 	mls	r3, r2, r3, r6
 8002620:	b94b      	cbnz	r3, 8002636 <localtime_r+0x42>
 8002622:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8002626:	fb96 f3f5 	sdiv	r3, r6, r5
 800262a:	fb05 6513 	mls	r5, r5, r3, r6
 800262e:	fab5 f385 	clz	r3, r5
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	e000      	b.n	8002638 <localtime_r+0x44>
 8002636:	2301      	movs	r3, #1
 8002638:	4a5f      	ldr	r2, [pc, #380]	; (80027b8 <localtime_r+0x1c4>)
 800263a:	2530      	movs	r5, #48	; 0x30
 800263c:	fb05 2503 	mla	r5, r5, r3, r2
 8002640:	f001 fb18 	bl	8003c74 <__tz_lock>
 8002644:	f001 fb18 	bl	8003c78 <_tzset_unlocked>
 8002648:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <localtime_r+0x1c8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b1f3      	cbz	r3, 800268c <localtime_r+0x98>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	429e      	cmp	r6, r3
 8002652:	d105      	bne.n	8002660 <localtime_r+0x6c>
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	f8d8 3000 	ldr.w	r3, [r8]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	b941      	cbnz	r1, 8002670 <localtime_r+0x7c>
 800265e:	e00a      	b.n	8002676 <localtime_r+0x82>
 8002660:	4630      	mov	r0, r6
 8002662:	f001 fa5f 	bl	8003b24 <__tzcalc_limits>
 8002666:	2800      	cmp	r0, #0
 8002668:	d1f4      	bne.n	8002654 <localtime_r+0x60>
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e00d      	b.n	800268c <localtime_r+0x98>
 8002670:	4293      	cmp	r3, r2
 8002672:	db08      	blt.n	8002686 <localtime_r+0x92>
 8002674:	e001      	b.n	800267a <localtime_r+0x86>
 8002676:	4293      	cmp	r3, r2
 8002678:	da07      	bge.n	800268a <localtime_r+0x96>
 800267a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800267c:	4293      	cmp	r3, r2
 800267e:	bfac      	ite	ge
 8002680:	2300      	movge	r3, #0
 8002682:	2301      	movlt	r3, #1
 8002684:	e002      	b.n	800268c <localtime_r+0x98>
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <localtime_r+0x98>
 800268a:	2301      	movs	r3, #1
 800268c:	6223      	str	r3, [r4, #32]
 800268e:	6a23      	ldr	r3, [r4, #32]
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf0c      	ite	eq
 8002694:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8002696:	6a39      	ldrne	r1, [r7, #32]
 8002698:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800269c:	203c      	movs	r0, #60	; 0x3c
 800269e:	fb91 f6f3 	sdiv	r6, r1, r3
 80026a2:	fb03 1316 	mls	r3, r3, r6, r1
 80026a6:	6861      	ldr	r1, [r4, #4]
 80026a8:	fb93 f2f0 	sdiv	r2, r3, r0
 80026ac:	fb00 3012 	mls	r0, r0, r2, r3
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	1a89      	subs	r1, r1, r2
 80026b4:	68a2      	ldr	r2, [r4, #8]
 80026b6:	6061      	str	r1, [r4, #4]
 80026b8:	1a1b      	subs	r3, r3, r0
 80026ba:	1b92      	subs	r2, r2, r6
 80026bc:	2b3b      	cmp	r3, #59	; 0x3b
 80026be:	6023      	str	r3, [r4, #0]
 80026c0:	60a2      	str	r2, [r4, #8]
 80026c2:	dd03      	ble.n	80026cc <localtime_r+0xd8>
 80026c4:	3101      	adds	r1, #1
 80026c6:	6061      	str	r1, [r4, #4]
 80026c8:	3b3c      	subs	r3, #60	; 0x3c
 80026ca:	e004      	b.n	80026d6 <localtime_r+0xe2>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da03      	bge.n	80026d8 <localtime_r+0xe4>
 80026d0:	3901      	subs	r1, #1
 80026d2:	6061      	str	r1, [r4, #4]
 80026d4:	333c      	adds	r3, #60	; 0x3c
 80026d6:	6023      	str	r3, [r4, #0]
 80026d8:	6863      	ldr	r3, [r4, #4]
 80026da:	2b3b      	cmp	r3, #59	; 0x3b
 80026dc:	dd03      	ble.n	80026e6 <localtime_r+0xf2>
 80026de:	3201      	adds	r2, #1
 80026e0:	60a2      	str	r2, [r4, #8]
 80026e2:	3b3c      	subs	r3, #60	; 0x3c
 80026e4:	e004      	b.n	80026f0 <localtime_r+0xfc>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	da03      	bge.n	80026f2 <localtime_r+0xfe>
 80026ea:	3a01      	subs	r2, #1
 80026ec:	60a2      	str	r2, [r4, #8]
 80026ee:	333c      	adds	r3, #60	; 0x3c
 80026f0:	6063      	str	r3, [r4, #4]
 80026f2:	68a3      	ldr	r3, [r4, #8]
 80026f4:	2b17      	cmp	r3, #23
 80026f6:	dd22      	ble.n	800273e <localtime_r+0x14a>
 80026f8:	69e2      	ldr	r2, [r4, #28]
 80026fa:	3201      	adds	r2, #1
 80026fc:	61e2      	str	r2, [r4, #28]
 80026fe:	69a2      	ldr	r2, [r4, #24]
 8002700:	3201      	adds	r2, #1
 8002702:	2a06      	cmp	r2, #6
 8002704:	bfc8      	it	gt
 8002706:	2200      	movgt	r2, #0
 8002708:	61a2      	str	r2, [r4, #24]
 800270a:	68e2      	ldr	r2, [r4, #12]
 800270c:	3b18      	subs	r3, #24
 800270e:	3201      	adds	r2, #1
 8002710:	60a3      	str	r3, [r4, #8]
 8002712:	6923      	ldr	r3, [r4, #16]
 8002714:	60e2      	str	r2, [r4, #12]
 8002716:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800271a:	428a      	cmp	r2, r1
 800271c:	dd46      	ble.n	80027ac <localtime_r+0x1b8>
 800271e:	3301      	adds	r3, #1
 8002720:	2b0c      	cmp	r3, #12
 8002722:	bf0c      	ite	eq
 8002724:	6963      	ldreq	r3, [r4, #20]
 8002726:	6123      	strne	r3, [r4, #16]
 8002728:	eba2 0201 	sub.w	r2, r2, r1
 800272c:	60e2      	str	r2, [r4, #12]
 800272e:	bf01      	itttt	eq
 8002730:	3301      	addeq	r3, #1
 8002732:	2200      	moveq	r2, #0
 8002734:	6122      	streq	r2, [r4, #16]
 8002736:	6163      	streq	r3, [r4, #20]
 8002738:	bf08      	it	eq
 800273a:	61e2      	streq	r2, [r4, #28]
 800273c:	e036      	b.n	80027ac <localtime_r+0x1b8>
 800273e:	2b00      	cmp	r3, #0
 8002740:	da34      	bge.n	80027ac <localtime_r+0x1b8>
 8002742:	69e2      	ldr	r2, [r4, #28]
 8002744:	3a01      	subs	r2, #1
 8002746:	61e2      	str	r2, [r4, #28]
 8002748:	69a2      	ldr	r2, [r4, #24]
 800274a:	3a01      	subs	r2, #1
 800274c:	bf48      	it	mi
 800274e:	2206      	movmi	r2, #6
 8002750:	61a2      	str	r2, [r4, #24]
 8002752:	68e2      	ldr	r2, [r4, #12]
 8002754:	3318      	adds	r3, #24
 8002756:	3a01      	subs	r2, #1
 8002758:	60e2      	str	r2, [r4, #12]
 800275a:	60a3      	str	r3, [r4, #8]
 800275c:	bb32      	cbnz	r2, 80027ac <localtime_r+0x1b8>
 800275e:	6923      	ldr	r3, [r4, #16]
 8002760:	3b01      	subs	r3, #1
 8002762:	d401      	bmi.n	8002768 <localtime_r+0x174>
 8002764:	6123      	str	r3, [r4, #16]
 8002766:	e01d      	b.n	80027a4 <localtime_r+0x1b0>
 8002768:	230b      	movs	r3, #11
 800276a:	6123      	str	r3, [r4, #16]
 800276c:	6963      	ldr	r3, [r4, #20]
 800276e:	1e5a      	subs	r2, r3, #1
 8002770:	f012 0f03 	tst.w	r2, #3
 8002774:	6162      	str	r2, [r4, #20]
 8002776:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800277a:	d105      	bne.n	8002788 <localtime_r+0x194>
 800277c:	2164      	movs	r1, #100	; 0x64
 800277e:	fb93 f2f1 	sdiv	r2, r3, r1
 8002782:	fb01 3212 	mls	r2, r1, r2, r3
 8002786:	b94a      	cbnz	r2, 800279c <localtime_r+0x1a8>
 8002788:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800278c:	fb93 f2f1 	sdiv	r2, r3, r1
 8002790:	fb01 3312 	mls	r3, r1, r2, r3
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	e000      	b.n	800279e <localtime_r+0x1aa>
 800279c:	2301      	movs	r3, #1
 800279e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80027a2:	61e3      	str	r3, [r4, #28]
 80027a4:	6923      	ldr	r3, [r4, #16]
 80027a6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80027aa:	60e3      	str	r3, [r4, #12]
 80027ac:	f001 fa63 	bl	8003c76 <__tz_unlock>
 80027b0:	4620      	mov	r0, r4
 80027b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027b6:	bf00      	nop
 80027b8:	08005ad4 	.word	0x08005ad4
 80027bc:	2000014c 	.word	0x2000014c

080027c0 <malloc>:
 80027c0:	4b02      	ldr	r3, [pc, #8]	; (80027cc <malloc+0xc>)
 80027c2:	4601      	mov	r1, r0
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	f000 baa7 	b.w	8002d18 <_malloc_r>
 80027ca:	bf00      	nop
 80027cc:	200000c8 	.word	0x200000c8

080027d0 <free>:
 80027d0:	4b02      	ldr	r3, [pc, #8]	; (80027dc <free+0xc>)
 80027d2:	4601      	mov	r1, r0
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	f000 ba51 	b.w	8002c7c <_free_r>
 80027da:	bf00      	nop
 80027dc:	200000c8 	.word	0x200000c8

080027e0 <validate_structure>:
 80027e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027e2:	6801      	ldr	r1, [r0, #0]
 80027e4:	293b      	cmp	r1, #59	; 0x3b
 80027e6:	4604      	mov	r4, r0
 80027e8:	d911      	bls.n	800280e <validate_structure+0x2e>
 80027ea:	223c      	movs	r2, #60	; 0x3c
 80027ec:	4668      	mov	r0, sp
 80027ee:	f001 fbc9 	bl	8003f84 <div>
 80027f2:	9a01      	ldr	r2, [sp, #4]
 80027f4:	6863      	ldr	r3, [r4, #4]
 80027f6:	9900      	ldr	r1, [sp, #0]
 80027f8:	2a00      	cmp	r2, #0
 80027fa:	440b      	add	r3, r1
 80027fc:	6063      	str	r3, [r4, #4]
 80027fe:	bfbb      	ittet	lt
 8002800:	323c      	addlt	r2, #60	; 0x3c
 8002802:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8002806:	6022      	strge	r2, [r4, #0]
 8002808:	6022      	strlt	r2, [r4, #0]
 800280a:	bfb8      	it	lt
 800280c:	6063      	strlt	r3, [r4, #4]
 800280e:	6861      	ldr	r1, [r4, #4]
 8002810:	293b      	cmp	r1, #59	; 0x3b
 8002812:	d911      	bls.n	8002838 <validate_structure+0x58>
 8002814:	223c      	movs	r2, #60	; 0x3c
 8002816:	4668      	mov	r0, sp
 8002818:	f001 fbb4 	bl	8003f84 <div>
 800281c:	9a01      	ldr	r2, [sp, #4]
 800281e:	68a1      	ldr	r1, [r4, #8]
 8002820:	9b00      	ldr	r3, [sp, #0]
 8002822:	2a00      	cmp	r2, #0
 8002824:	440b      	add	r3, r1
 8002826:	60a3      	str	r3, [r4, #8]
 8002828:	bfbb      	ittet	lt
 800282a:	323c      	addlt	r2, #60	; 0x3c
 800282c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8002830:	6062      	strge	r2, [r4, #4]
 8002832:	6062      	strlt	r2, [r4, #4]
 8002834:	bfb8      	it	lt
 8002836:	60a3      	strlt	r3, [r4, #8]
 8002838:	68a1      	ldr	r1, [r4, #8]
 800283a:	2917      	cmp	r1, #23
 800283c:	d911      	bls.n	8002862 <validate_structure+0x82>
 800283e:	2218      	movs	r2, #24
 8002840:	4668      	mov	r0, sp
 8002842:	f001 fb9f 	bl	8003f84 <div>
 8002846:	9a01      	ldr	r2, [sp, #4]
 8002848:	68e1      	ldr	r1, [r4, #12]
 800284a:	9b00      	ldr	r3, [sp, #0]
 800284c:	2a00      	cmp	r2, #0
 800284e:	440b      	add	r3, r1
 8002850:	60e3      	str	r3, [r4, #12]
 8002852:	bfbb      	ittet	lt
 8002854:	3218      	addlt	r2, #24
 8002856:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800285a:	60a2      	strge	r2, [r4, #8]
 800285c:	60a2      	strlt	r2, [r4, #8]
 800285e:	bfb8      	it	lt
 8002860:	60e3      	strlt	r3, [r4, #12]
 8002862:	6921      	ldr	r1, [r4, #16]
 8002864:	290b      	cmp	r1, #11
 8002866:	d911      	bls.n	800288c <validate_structure+0xac>
 8002868:	220c      	movs	r2, #12
 800286a:	4668      	mov	r0, sp
 800286c:	f001 fb8a 	bl	8003f84 <div>
 8002870:	9a01      	ldr	r2, [sp, #4]
 8002872:	6961      	ldr	r1, [r4, #20]
 8002874:	9b00      	ldr	r3, [sp, #0]
 8002876:	2a00      	cmp	r2, #0
 8002878:	440b      	add	r3, r1
 800287a:	6163      	str	r3, [r4, #20]
 800287c:	bfbb      	ittet	lt
 800287e:	320c      	addlt	r2, #12
 8002880:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8002884:	6122      	strge	r2, [r4, #16]
 8002886:	6122      	strlt	r2, [r4, #16]
 8002888:	bfb8      	it	lt
 800288a:	6163      	strlt	r3, [r4, #20]
 800288c:	6963      	ldr	r3, [r4, #20]
 800288e:	0799      	lsls	r1, r3, #30
 8002890:	d112      	bne.n	80028b8 <validate_structure+0xd8>
 8002892:	2164      	movs	r1, #100	; 0x64
 8002894:	fb93 f2f1 	sdiv	r2, r3, r1
 8002898:	fb01 3212 	mls	r2, r1, r2, r3
 800289c:	b972      	cbnz	r2, 80028bc <validate_structure+0xdc>
 800289e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80028a2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80028a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80028aa:	fb01 3312 	mls	r3, r1, r2, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	231c      	movne	r3, #28
 80028b4:	231d      	moveq	r3, #29
 80028b6:	e002      	b.n	80028be <validate_structure+0xde>
 80028b8:	231c      	movs	r3, #28
 80028ba:	e000      	b.n	80028be <validate_structure+0xde>
 80028bc:	231d      	movs	r3, #29
 80028be:	68e2      	ldr	r2, [r4, #12]
 80028c0:	2a00      	cmp	r2, #0
 80028c2:	dd06      	ble.n	80028d2 <validate_structure+0xf2>
 80028c4:	4f33      	ldr	r7, [pc, #204]	; (8002994 <validate_structure+0x1b4>)
 80028c6:	f04f 0e00 	mov.w	lr, #0
 80028ca:	2564      	movs	r5, #100	; 0x64
 80028cc:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80028d0:	e039      	b.n	8002946 <validate_structure+0x166>
 80028d2:	4f30      	ldr	r7, [pc, #192]	; (8002994 <validate_structure+0x1b4>)
 80028d4:	260b      	movs	r6, #11
 80028d6:	2064      	movs	r0, #100	; 0x64
 80028d8:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80028dc:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80028e0:	f1be 0f00 	cmp.w	lr, #0
 80028e4:	dc53      	bgt.n	800298e <validate_structure+0x1ae>
 80028e6:	6921      	ldr	r1, [r4, #16]
 80028e8:	3901      	subs	r1, #1
 80028ea:	6121      	str	r1, [r4, #16]
 80028ec:	3101      	adds	r1, #1
 80028ee:	d118      	bne.n	8002922 <validate_structure+0x142>
 80028f0:	6963      	ldr	r3, [r4, #20]
 80028f2:	6126      	str	r6, [r4, #16]
 80028f4:	1e59      	subs	r1, r3, #1
 80028f6:	078a      	lsls	r2, r1, #30
 80028f8:	6161      	str	r1, [r4, #20]
 80028fa:	d10f      	bne.n	800291c <validate_structure+0x13c>
 80028fc:	fb91 f2f0 	sdiv	r2, r1, r0
 8002900:	fb00 1112 	mls	r1, r0, r2, r1
 8002904:	b961      	cbnz	r1, 8002920 <validate_structure+0x140>
 8002906:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800290a:	fb93 f2f5 	sdiv	r2, r3, r5
 800290e:	fb05 3312 	mls	r3, r5, r2, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	231c      	movne	r3, #28
 8002918:	231d      	moveq	r3, #29
 800291a:	e002      	b.n	8002922 <validate_structure+0x142>
 800291c:	231c      	movs	r3, #28
 800291e:	e000      	b.n	8002922 <validate_structure+0x142>
 8002920:	231d      	movs	r3, #29
 8002922:	6922      	ldr	r2, [r4, #16]
 8002924:	2a01      	cmp	r2, #1
 8002926:	bf14      	ite	ne
 8002928:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800292c:	461a      	moveq	r2, r3
 800292e:	4472      	add	r2, lr
 8002930:	60e2      	str	r2, [r4, #12]
 8002932:	e7d3      	b.n	80028dc <validate_structure+0xfc>
 8002934:	428b      	cmp	r3, r1
 8002936:	da2a      	bge.n	800298e <validate_structure+0x1ae>
 8002938:	4618      	mov	r0, r3
 800293a:	3201      	adds	r2, #1
 800293c:	1a09      	subs	r1, r1, r0
 800293e:	2a0c      	cmp	r2, #12
 8002940:	60e1      	str	r1, [r4, #12]
 8002942:	6122      	str	r2, [r4, #16]
 8002944:	d008      	beq.n	8002958 <validate_structure+0x178>
 8002946:	6922      	ldr	r2, [r4, #16]
 8002948:	68e1      	ldr	r1, [r4, #12]
 800294a:	2a01      	cmp	r2, #1
 800294c:	d0f2      	beq.n	8002934 <validate_structure+0x154>
 800294e:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8002952:	4281      	cmp	r1, r0
 8002954:	dcf1      	bgt.n	800293a <validate_structure+0x15a>
 8002956:	e01a      	b.n	800298e <validate_structure+0x1ae>
 8002958:	6963      	ldr	r3, [r4, #20]
 800295a:	f8c4 e010 	str.w	lr, [r4, #16]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	0791      	lsls	r1, r2, #30
 8002962:	6162      	str	r2, [r4, #20]
 8002964:	d10f      	bne.n	8002986 <validate_structure+0x1a6>
 8002966:	fb92 f1f5 	sdiv	r1, r2, r5
 800296a:	fb05 2211 	mls	r2, r5, r1, r2
 800296e:	b962      	cbnz	r2, 800298a <validate_structure+0x1aa>
 8002970:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8002974:	fb93 f2f6 	sdiv	r2, r3, r6
 8002978:	fb06 3312 	mls	r3, r6, r2, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	231c      	movne	r3, #28
 8002982:	231d      	moveq	r3, #29
 8002984:	e7df      	b.n	8002946 <validate_structure+0x166>
 8002986:	231c      	movs	r3, #28
 8002988:	e7dd      	b.n	8002946 <validate_structure+0x166>
 800298a:	231d      	movs	r3, #29
 800298c:	e7db      	b.n	8002946 <validate_structure+0x166>
 800298e:	b003      	add	sp, #12
 8002990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002992:	bf00      	nop
 8002994:	08005aa4 	.word	0x08005aa4

08002998 <mktime>:
 8002998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	4605      	mov	r5, r0
 800299e:	f001 fe79 	bl	8004694 <__gettzinfo>
 80029a2:	4681      	mov	r9, r0
 80029a4:	4628      	mov	r0, r5
 80029a6:	f7ff ff1b 	bl	80027e0 <validate_structure>
 80029aa:	e895 000c 	ldmia.w	r5, {r2, r3}
 80029ae:	213c      	movs	r1, #60	; 0x3c
 80029b0:	fb01 2303 	mla	r3, r1, r3, r2
 80029b4:	68aa      	ldr	r2, [r5, #8]
 80029b6:	68ec      	ldr	r4, [r5, #12]
 80029b8:	f44f 6861 	mov.w	r8, #3600	; 0xe10
 80029bc:	fb08 3102 	mla	r1, r8, r2, r3
 80029c0:	692b      	ldr	r3, [r5, #16]
 80029c2:	4aab      	ldr	r2, [pc, #684]	; (8002c70 <mktime+0x2d8>)
 80029c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029c8:	3c01      	subs	r4, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	4414      	add	r4, r2
 80029ce:	696b      	ldr	r3, [r5, #20]
 80029d0:	dd11      	ble.n	80029f6 <mktime+0x5e>
 80029d2:	079e      	lsls	r6, r3, #30
 80029d4:	d10f      	bne.n	80029f6 <mktime+0x5e>
 80029d6:	2064      	movs	r0, #100	; 0x64
 80029d8:	fb93 f2f0 	sdiv	r2, r3, r0
 80029dc:	fb00 3212 	mls	r2, r0, r2, r3
 80029e0:	b942      	cbnz	r2, 80029f4 <mktime+0x5c>
 80029e2:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80029e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80029ea:	fb96 f0f2 	sdiv	r0, r6, r2
 80029ee:	fb02 6210 	mls	r2, r2, r0, r6
 80029f2:	b902      	cbnz	r2, 80029f6 <mktime+0x5e>
 80029f4:	3401      	adds	r4, #1
 80029f6:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 80029fa:	3210      	adds	r2, #16
 80029fc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002a00:	4282      	cmp	r2, r0
 8002a02:	61ec      	str	r4, [r5, #28]
 8002a04:	461f      	mov	r7, r3
 8002a06:	f200 812e 	bhi.w	8002c66 <mktime+0x2ce>
 8002a0a:	2b46      	cmp	r3, #70	; 0x46
 8002a0c:	dd22      	ble.n	8002a54 <mktime+0xbc>
 8002a0e:	2246      	movs	r2, #70	; 0x46
 8002a10:	f240 1c6d 	movw	ip, #365	; 0x16d
 8002a14:	2664      	movs	r6, #100	; 0x64
 8002a16:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8002a1a:	0790      	lsls	r0, r2, #30
 8002a1c:	d110      	bne.n	8002a40 <mktime+0xa8>
 8002a1e:	fb92 f0f6 	sdiv	r0, r2, r6
 8002a22:	fb06 2010 	mls	r0, r6, r0, r2
 8002a26:	b970      	cbnz	r0, 8002a46 <mktime+0xae>
 8002a28:	f202 786c 	addw	r8, r2, #1900	; 0x76c
 8002a2c:	fb98 f0fe 	sdiv	r0, r8, lr
 8002a30:	fb0e 8010 	mls	r0, lr, r0, r8
 8002a34:	2800      	cmp	r0, #0
 8002a36:	bf14      	ite	ne
 8002a38:	4660      	movne	r0, ip
 8002a3a:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
 8002a3e:	e004      	b.n	8002a4a <mktime+0xb2>
 8002a40:	f240 106d 	movw	r0, #365	; 0x16d
 8002a44:	e001      	b.n	8002a4a <mktime+0xb2>
 8002a46:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 8002a4a:	3201      	adds	r2, #1
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	4404      	add	r4, r0
 8002a50:	d1e3      	bne.n	8002a1a <mktime+0x82>
 8002a52:	e044      	b.n	8002ade <mktime+0x146>
 8002a54:	d043      	beq.n	8002ade <mktime+0x146>
 8002a56:	2245      	movs	r2, #69	; 0x45
 8002a58:	f240 1e6d 	movw	lr, #365	; 0x16d
 8002a5c:	2664      	movs	r6, #100	; 0x64
 8002a5e:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8002a62:	429a      	cmp	r2, r3
 8002a64:	dd1a      	ble.n	8002a9c <mktime+0x104>
 8002a66:	0790      	lsls	r0, r2, #30
 8002a68:	d110      	bne.n	8002a8c <mktime+0xf4>
 8002a6a:	fb92 f0f6 	sdiv	r0, r2, r6
 8002a6e:	fb06 2010 	mls	r0, r6, r0, r2
 8002a72:	b970      	cbnz	r0, 8002a92 <mktime+0xfa>
 8002a74:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
 8002a78:	fb9c f0f7 	sdiv	r0, ip, r7
 8002a7c:	fb07 c010 	mls	r0, r7, r0, ip
 8002a80:	2800      	cmp	r0, #0
 8002a82:	bf14      	ite	ne
 8002a84:	4670      	movne	r0, lr
 8002a86:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
 8002a8a:	e004      	b.n	8002a96 <mktime+0xfe>
 8002a8c:	f240 106d 	movw	r0, #365	; 0x16d
 8002a90:	e001      	b.n	8002a96 <mktime+0xfe>
 8002a92:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 8002a96:	1a24      	subs	r4, r4, r0
 8002a98:	3a01      	subs	r2, #1
 8002a9a:	e7e2      	b.n	8002a62 <mktime+0xca>
 8002a9c:	2b45      	cmp	r3, #69	; 0x45
 8002a9e:	bfa8      	it	ge
 8002aa0:	2345      	movge	r3, #69	; 0x45
 8002aa2:	079e      	lsls	r6, r3, #30
 8002aa4:	461f      	mov	r7, r3
 8002aa6:	d114      	bne.n	8002ad2 <mktime+0x13a>
 8002aa8:	2264      	movs	r2, #100	; 0x64
 8002aaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8002aae:	fb02 7313 	mls	r3, r2, r3, r7
 8002ab2:	b98b      	cbnz	r3, 8002ad8 <mktime+0x140>
 8002ab4:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 8002ab8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002abc:	fb90 f2f3 	sdiv	r2, r0, r3
 8002ac0:	fb03 0312 	mls	r3, r3, r2, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f240 136d 	movw	r3, #365	; 0x16d
 8002aca:	bf08      	it	eq
 8002acc:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8002ad0:	e004      	b.n	8002adc <mktime+0x144>
 8002ad2:	f240 136d 	movw	r3, #365	; 0x16d
 8002ad6:	e001      	b.n	8002adc <mktime+0x144>
 8002ad8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8002adc:	1ae4      	subs	r4, r4, r3
 8002ade:	4865      	ldr	r0, [pc, #404]	; (8002c74 <mktime+0x2dc>)
 8002ae0:	fb00 1804 	mla	r8, r0, r4, r1
 8002ae4:	f001 f8c6 	bl	8003c74 <__tz_lock>
 8002ae8:	f001 f8c6 	bl	8003c78 <_tzset_unlocked>
 8002aec:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <mktime+0x2e0>)
 8002aee:	681e      	ldr	r6, [r3, #0]
 8002af0:	2e00      	cmp	r6, #0
 8002af2:	f000 80a4 	beq.w	8002c3e <mktime+0x2a6>
 8002af6:	6a2b      	ldr	r3, [r5, #32]
 8002af8:	6968      	ldr	r0, [r5, #20]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	bfa8      	it	ge
 8002afe:	2301      	movge	r3, #1
 8002b00:	469a      	mov	sl, r3
 8002b02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b06:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8002b0a:	4298      	cmp	r0, r3
 8002b0c:	d10d      	bne.n	8002b2a <mktime+0x192>
 8002b0e:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8002b12:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8002b16:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8002b1a:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8002b1e:	1ad6      	subs	r6, r2, r3
 8002b20:	45b0      	cmp	r8, r6
 8002b22:	eba1 0100 	sub.w	r1, r1, r0
 8002b26:	da05      	bge.n	8002b34 <mktime+0x19c>
 8002b28:	e007      	b.n	8002b3a <mktime+0x1a2>
 8002b2a:	f000 fffb 	bl	8003b24 <__tzcalc_limits>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d1ed      	bne.n	8002b0e <mktime+0x176>
 8002b32:	e076      	b.n	8002c22 <mktime+0x28a>
 8002b34:	1a12      	subs	r2, r2, r0
 8002b36:	4590      	cmp	r8, r2
 8002b38:	db73      	blt.n	8002c22 <mktime+0x28a>
 8002b3a:	f8d9 2000 	ldr.w	r2, [r9]
 8002b3e:	b112      	cbz	r2, 8002b46 <mktime+0x1ae>
 8002b40:	4588      	cmp	r8, r1
 8002b42:	db77      	blt.n	8002c34 <mktime+0x29c>
 8002b44:	e001      	b.n	8002b4a <mktime+0x1b2>
 8002b46:	4588      	cmp	r8, r1
 8002b48:	da07      	bge.n	8002b5a <mktime+0x1c2>
 8002b4a:	45b0      	cmp	r8, r6
 8002b4c:	bfac      	ite	ge
 8002b4e:	2600      	movge	r6, #0
 8002b50:	2601      	movlt	r6, #1
 8002b52:	f1ba 0f00 	cmp.w	sl, #0
 8002b56:	da04      	bge.n	8002b62 <mktime+0x1ca>
 8002b58:	e064      	b.n	8002c24 <mktime+0x28c>
 8002b5a:	f1ba 0f00 	cmp.w	sl, #0
 8002b5e:	db63      	blt.n	8002c28 <mktime+0x290>
 8002b60:	2601      	movs	r6, #1
 8002b62:	ea8a 0a06 	eor.w	sl, sl, r6
 8002b66:	f1ba 0f01 	cmp.w	sl, #1
 8002b6a:	d15b      	bne.n	8002c24 <mktime+0x28c>
 8002b6c:	1a1b      	subs	r3, r3, r0
 8002b6e:	b906      	cbnz	r6, 8002b72 <mktime+0x1da>
 8002b70:	425b      	negs	r3, r3
 8002b72:	682a      	ldr	r2, [r5, #0]
 8002b74:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8002b78:	441a      	add	r2, r3
 8002b7a:	602a      	str	r2, [r5, #0]
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	4498      	add	r8, r3
 8002b80:	f7ff fe2e 	bl	80027e0 <validate_structure>
 8002b84:	68eb      	ldr	r3, [r5, #12]
 8002b86:	ebb3 030a 	subs.w	r3, r3, sl
 8002b8a:	d04b      	beq.n	8002c24 <mktime+0x28c>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	dc03      	bgt.n	8002b98 <mktime+0x200>
 8002b90:	1c98      	adds	r0, r3, #2
 8002b92:	bfd8      	it	le
 8002b94:	2301      	movle	r3, #1
 8002b96:	e001      	b.n	8002b9c <mktime+0x204>
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	69ea      	ldr	r2, [r5, #28]
 8002b9e:	441c      	add	r4, r3
 8002ba0:	189b      	adds	r3, r3, r2
 8002ba2:	d51d      	bpl.n	8002be0 <mktime+0x248>
 8002ba4:	1e7b      	subs	r3, r7, #1
 8002ba6:	0799      	lsls	r1, r3, #30
 8002ba8:	d114      	bne.n	8002bd4 <mktime+0x23c>
 8002baa:	2164      	movs	r1, #100	; 0x64
 8002bac:	fb93 f2f1 	sdiv	r2, r3, r1
 8002bb0:	fb01 3312 	mls	r3, r1, r2, r3
 8002bb4:	b98b      	cbnz	r3, 8002bda <mktime+0x242>
 8002bb6:	f207 776b 	addw	r7, r7, #1899	; 0x76b
 8002bba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002bbe:	fb97 f3f2 	sdiv	r3, r7, r2
 8002bc2:	fb02 7713 	mls	r7, r2, r3, r7
 8002bc6:	2f00      	cmp	r7, #0
 8002bc8:	f240 136d 	movw	r3, #365	; 0x16d
 8002bcc:	bf18      	it	ne
 8002bce:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8002bd2:	e024      	b.n	8002c1e <mktime+0x286>
 8002bd4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8002bd8:	e021      	b.n	8002c1e <mktime+0x286>
 8002bda:	f240 136d 	movw	r3, #365	; 0x16d
 8002bde:	e01e      	b.n	8002c1e <mktime+0x286>
 8002be0:	07ba      	lsls	r2, r7, #30
 8002be2:	d114      	bne.n	8002c0e <mktime+0x276>
 8002be4:	2164      	movs	r1, #100	; 0x64
 8002be6:	fb97 f2f1 	sdiv	r2, r7, r1
 8002bea:	fb01 7212 	mls	r2, r1, r2, r7
 8002bee:	b98a      	cbnz	r2, 8002c14 <mktime+0x27c>
 8002bf0:	f207 776c 	addw	r7, r7, #1900	; 0x76c
 8002bf4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002bf8:	fb97 f2f1 	sdiv	r2, r7, r1
 8002bfc:	fb01 7712 	mls	r7, r1, r2, r7
 8002c00:	2f00      	cmp	r7, #0
 8002c02:	f240 126d 	movw	r2, #365	; 0x16d
 8002c06:	bf08      	it	eq
 8002c08:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8002c0c:	e004      	b.n	8002c18 <mktime+0x280>
 8002c0e:	f240 126d 	movw	r2, #365	; 0x16d
 8002c12:	e001      	b.n	8002c18 <mktime+0x280>
 8002c14:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	bfd8      	it	le
 8002c1c:	1a9b      	suble	r3, r3, r2
 8002c1e:	61eb      	str	r3, [r5, #28]
 8002c20:	e000      	b.n	8002c24 <mktime+0x28c>
 8002c22:	4656      	mov	r6, sl
 8002c24:	2e01      	cmp	r6, #1
 8002c26:	d10a      	bne.n	8002c3e <mktime+0x2a6>
 8002c28:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8002c2c:	2601      	movs	r6, #1
 8002c2e:	eb08 0700 	add.w	r7, r8, r0
 8002c32:	e008      	b.n	8002c46 <mktime+0x2ae>
 8002c34:	f1ba 0f00 	cmp.w	sl, #0
 8002c38:	f04f 0600 	mov.w	r6, #0
 8002c3c:	da91      	bge.n	8002b62 <mktime+0x1ca>
 8002c3e:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8002c42:	eb08 0700 	add.w	r7, r8, r0
 8002c46:	f001 f816 	bl	8003c76 <__tz_unlock>
 8002c4a:	3404      	adds	r4, #4
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	fb94 f3f3 	sdiv	r3, r4, r3
 8002c52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002c56:	1ae4      	subs	r4, r4, r3
 8002c58:	bf48      	it	mi
 8002c5a:	3407      	addmi	r4, #7
 8002c5c:	622e      	str	r6, [r5, #32]
 8002c5e:	61ac      	str	r4, [r5, #24]
 8002c60:	4638      	mov	r0, r7
 8002c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c66:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6e:	bf00      	nop
 8002c70:	08005a74 	.word	0x08005a74
 8002c74:	00015180 	.word	0x00015180
 8002c78:	2000014c 	.word	0x2000014c

08002c7c <_free_r>:
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4605      	mov	r5, r0
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d046      	beq.n	8002d12 <_free_r+0x96>
 8002c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c88:	1f0c      	subs	r4, r1, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bfb8      	it	lt
 8002c8e:	18e4      	addlt	r4, r4, r3
 8002c90:	f001 fdab 	bl	80047ea <__malloc_lock>
 8002c94:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <_free_r+0x98>)
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	b913      	cbnz	r3, 8002ca2 <_free_r+0x26>
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	6014      	str	r4, [r2, #0]
 8002ca0:	e032      	b.n	8002d08 <_free_r+0x8c>
 8002ca2:	42a3      	cmp	r3, r4
 8002ca4:	d90e      	bls.n	8002cc4 <_free_r+0x48>
 8002ca6:	6822      	ldr	r2, [r4, #0]
 8002ca8:	18a0      	adds	r0, r4, r2
 8002caa:	4283      	cmp	r3, r0
 8002cac:	bf04      	itt	eq
 8002cae:	6818      	ldreq	r0, [r3, #0]
 8002cb0:	685b      	ldreq	r3, [r3, #4]
 8002cb2:	6063      	str	r3, [r4, #4]
 8002cb4:	bf04      	itt	eq
 8002cb6:	1812      	addeq	r2, r2, r0
 8002cb8:	6022      	streq	r2, [r4, #0]
 8002cba:	600c      	str	r4, [r1, #0]
 8002cbc:	e024      	b.n	8002d08 <_free_r+0x8c>
 8002cbe:	42a2      	cmp	r2, r4
 8002cc0:	d803      	bhi.n	8002cca <_free_r+0x4e>
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	2a00      	cmp	r2, #0
 8002cc8:	d1f9      	bne.n	8002cbe <_free_r+0x42>
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	1819      	adds	r1, r3, r0
 8002cce:	42a1      	cmp	r1, r4
 8002cd0:	d10b      	bne.n	8002cea <_free_r+0x6e>
 8002cd2:	6821      	ldr	r1, [r4, #0]
 8002cd4:	4401      	add	r1, r0
 8002cd6:	1858      	adds	r0, r3, r1
 8002cd8:	4282      	cmp	r2, r0
 8002cda:	6019      	str	r1, [r3, #0]
 8002cdc:	d114      	bne.n	8002d08 <_free_r+0x8c>
 8002cde:	6810      	ldr	r0, [r2, #0]
 8002ce0:	6852      	ldr	r2, [r2, #4]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	4401      	add	r1, r0
 8002ce6:	6019      	str	r1, [r3, #0]
 8002ce8:	e00e      	b.n	8002d08 <_free_r+0x8c>
 8002cea:	d902      	bls.n	8002cf2 <_free_r+0x76>
 8002cec:	230c      	movs	r3, #12
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	e00a      	b.n	8002d08 <_free_r+0x8c>
 8002cf2:	6821      	ldr	r1, [r4, #0]
 8002cf4:	1860      	adds	r0, r4, r1
 8002cf6:	4282      	cmp	r2, r0
 8002cf8:	bf04      	itt	eq
 8002cfa:	6810      	ldreq	r0, [r2, #0]
 8002cfc:	6852      	ldreq	r2, [r2, #4]
 8002cfe:	6062      	str	r2, [r4, #4]
 8002d00:	bf04      	itt	eq
 8002d02:	1809      	addeq	r1, r1, r0
 8002d04:	6021      	streq	r1, [r4, #0]
 8002d06:	605c      	str	r4, [r3, #4]
 8002d08:	4628      	mov	r0, r5
 8002d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d0e:	f001 bd6d 	b.w	80047ec <__malloc_unlock>
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	2000012c 	.word	0x2000012c

08002d18 <_malloc_r>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	1ccd      	adds	r5, r1, #3
 8002d1c:	f025 0503 	bic.w	r5, r5, #3
 8002d20:	3508      	adds	r5, #8
 8002d22:	2d0c      	cmp	r5, #12
 8002d24:	bf38      	it	cc
 8002d26:	250c      	movcc	r5, #12
 8002d28:	2d00      	cmp	r5, #0
 8002d2a:	4606      	mov	r6, r0
 8002d2c:	db01      	blt.n	8002d32 <_malloc_r+0x1a>
 8002d2e:	42a9      	cmp	r1, r5
 8002d30:	d902      	bls.n	8002d38 <_malloc_r+0x20>
 8002d32:	230c      	movs	r3, #12
 8002d34:	6033      	str	r3, [r6, #0]
 8002d36:	e046      	b.n	8002dc6 <_malloc_r+0xae>
 8002d38:	f001 fd57 	bl	80047ea <__malloc_lock>
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <_malloc_r+0xb4>)
 8002d3e:	681c      	ldr	r4, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4621      	mov	r1, r4
 8002d44:	b1a1      	cbz	r1, 8002d70 <_malloc_r+0x58>
 8002d46:	680b      	ldr	r3, [r1, #0]
 8002d48:	1b5b      	subs	r3, r3, r5
 8002d4a:	d40e      	bmi.n	8002d6a <_malloc_r+0x52>
 8002d4c:	2b0b      	cmp	r3, #11
 8002d4e:	d903      	bls.n	8002d58 <_malloc_r+0x40>
 8002d50:	600b      	str	r3, [r1, #0]
 8002d52:	18cc      	adds	r4, r1, r3
 8002d54:	50cd      	str	r5, [r1, r3]
 8002d56:	e01e      	b.n	8002d96 <_malloc_r+0x7e>
 8002d58:	428c      	cmp	r4, r1
 8002d5a:	bf0d      	iteet	eq
 8002d5c:	6863      	ldreq	r3, [r4, #4]
 8002d5e:	684b      	ldrne	r3, [r1, #4]
 8002d60:	6063      	strne	r3, [r4, #4]
 8002d62:	6013      	streq	r3, [r2, #0]
 8002d64:	bf18      	it	ne
 8002d66:	460c      	movne	r4, r1
 8002d68:	e015      	b.n	8002d96 <_malloc_r+0x7e>
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	6849      	ldr	r1, [r1, #4]
 8002d6e:	e7e9      	b.n	8002d44 <_malloc_r+0x2c>
 8002d70:	4c17      	ldr	r4, [pc, #92]	; (8002dd0 <_malloc_r+0xb8>)
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	b91b      	cbnz	r3, 8002d7e <_malloc_r+0x66>
 8002d76:	4630      	mov	r0, r6
 8002d78:	f000 f82c 	bl	8002dd4 <_sbrk_r>
 8002d7c:	6020      	str	r0, [r4, #0]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	4630      	mov	r0, r6
 8002d82:	f000 f827 	bl	8002dd4 <_sbrk_r>
 8002d86:	1c43      	adds	r3, r0, #1
 8002d88:	d018      	beq.n	8002dbc <_malloc_r+0xa4>
 8002d8a:	1cc4      	adds	r4, r0, #3
 8002d8c:	f024 0403 	bic.w	r4, r4, #3
 8002d90:	42a0      	cmp	r0, r4
 8002d92:	d10d      	bne.n	8002db0 <_malloc_r+0x98>
 8002d94:	6025      	str	r5, [r4, #0]
 8002d96:	4630      	mov	r0, r6
 8002d98:	f001 fd28 	bl	80047ec <__malloc_unlock>
 8002d9c:	f104 000b 	add.w	r0, r4, #11
 8002da0:	1d23      	adds	r3, r4, #4
 8002da2:	f020 0007 	bic.w	r0, r0, #7
 8002da6:	1ac3      	subs	r3, r0, r3
 8002da8:	d00e      	beq.n	8002dc8 <_malloc_r+0xb0>
 8002daa:	425a      	negs	r2, r3
 8002dac:	50e2      	str	r2, [r4, r3]
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	1a21      	subs	r1, r4, r0
 8002db2:	4630      	mov	r0, r6
 8002db4:	f000 f80e 	bl	8002dd4 <_sbrk_r>
 8002db8:	3001      	adds	r0, #1
 8002dba:	d1eb      	bne.n	8002d94 <_malloc_r+0x7c>
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	6033      	str	r3, [r6, #0]
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	f001 fd13 	bl	80047ec <__malloc_unlock>
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000012c 	.word	0x2000012c
 8002dd0:	20000128 	.word	0x20000128

08002dd4 <_sbrk_r>:
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	4c06      	ldr	r4, [pc, #24]	; (8002df0 <_sbrk_r+0x1c>)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	4605      	mov	r5, r0
 8002ddc:	4608      	mov	r0, r1
 8002dde:	6023      	str	r3, [r4, #0]
 8002de0:	f002 fe12 	bl	8005a08 <_sbrk>
 8002de4:	1c43      	adds	r3, r0, #1
 8002de6:	d102      	bne.n	8002dee <_sbrk_r+0x1a>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	b103      	cbz	r3, 8002dee <_sbrk_r+0x1a>
 8002dec:	602b      	str	r3, [r5, #0]
 8002dee:	bd38      	pop	{r3, r4, r5, pc}
 8002df0:	20001120 	.word	0x20001120

08002df4 <sulp>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	4604      	mov	r4, r0
 8002df8:	460d      	mov	r5, r1
 8002dfa:	ec45 4b10 	vmov	d0, r4, r5
 8002dfe:	4616      	mov	r6, r2
 8002e00:	f001 ffbc 	bl	8004d7c <__ulp>
 8002e04:	ec51 0b10 	vmov	r0, r1, d0
 8002e08:	b17e      	cbz	r6, 8002e2a <sulp+0x36>
 8002e0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8002e0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	dd09      	ble.n	8002e2a <sulp+0x36>
 8002e16:	051b      	lsls	r3, r3, #20
 8002e18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8002e1c:	2400      	movs	r4, #0
 8002e1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002e22:	4622      	mov	r2, r4
 8002e24:	462b      	mov	r3, r5
 8002e26:	f7fd fbf3 	bl	8000610 <__aeabi_dmul>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	0000      	movs	r0, r0
	...

08002e30 <_strtod_r>:
 8002e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e34:	b09d      	sub	sp, #116	; 0x74
 8002e36:	2300      	movs	r3, #0
 8002e38:	9002      	str	r0, [sp, #8]
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	9213      	str	r2, [sp, #76]	; 0x4c
 8002e3e:	9318      	str	r3, [sp, #96]	; 0x60
 8002e40:	f04f 0a00 	mov.w	sl, #0
 8002e44:	f04f 0b00 	mov.w	fp, #0
 8002e48:	9117      	str	r1, [sp, #92]	; 0x5c
 8002e4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	2a0d      	cmp	r2, #13
 8002e50:	d805      	bhi.n	8002e5e <_strtod_r+0x2e>
 8002e52:	2a09      	cmp	r2, #9
 8002e54:	d213      	bcs.n	8002e7e <_strtod_r+0x4e>
 8002e56:	2a00      	cmp	r2, #0
 8002e58:	f000 81ac 	beq.w	80031b4 <_strtod_r+0x384>
 8002e5c:	e012      	b.n	8002e84 <_strtod_r+0x54>
 8002e5e:	2a2b      	cmp	r2, #43	; 0x2b
 8002e60:	d004      	beq.n	8002e6c <_strtod_r+0x3c>
 8002e62:	2a2d      	cmp	r2, #45	; 0x2d
 8002e64:	d004      	beq.n	8002e70 <_strtod_r+0x40>
 8002e66:	2a20      	cmp	r2, #32
 8002e68:	d10c      	bne.n	8002e84 <_strtod_r+0x54>
 8002e6a:	e008      	b.n	8002e7e <_strtod_r+0x4e>
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	e000      	b.n	8002e72 <_strtod_r+0x42>
 8002e70:	2201      	movs	r2, #1
 8002e72:	920c      	str	r2, [sp, #48]	; 0x30
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	9217      	str	r2, [sp, #92]	; 0x5c
 8002e78:	785b      	ldrb	r3, [r3, #1]
 8002e7a:	b92b      	cbnz	r3, 8002e88 <_strtod_r+0x58>
 8002e7c:	e19a      	b.n	80031b4 <_strtod_r+0x384>
 8002e7e:	3301      	adds	r3, #1
 8002e80:	9317      	str	r3, [sp, #92]	; 0x5c
 8002e82:	e7e2      	b.n	8002e4a <_strtod_r+0x1a>
 8002e84:	2300      	movs	r3, #0
 8002e86:	930c      	str	r3, [sp, #48]	; 0x30
 8002e88:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002e8a:	782b      	ldrb	r3, [r5, #0]
 8002e8c:	2b30      	cmp	r3, #48	; 0x30
 8002e8e:	d15c      	bne.n	8002f4a <_strtod_r+0x11a>
 8002e90:	786b      	ldrb	r3, [r5, #1]
 8002e92:	2b58      	cmp	r3, #88	; 0x58
 8002e94:	d001      	beq.n	8002e9a <_strtod_r+0x6a>
 8002e96:	2b78      	cmp	r3, #120	; 0x78
 8002e98:	d14c      	bne.n	8002f34 <_strtod_r+0x104>
 8002e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	ab18      	add	r3, sp, #96	; 0x60
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	4aa9      	ldr	r2, [pc, #676]	; (8003148 <_strtod_r+0x318>)
 8002ea4:	9802      	ldr	r0, [sp, #8]
 8002ea6:	ab19      	add	r3, sp, #100	; 0x64
 8002ea8:	a917      	add	r1, sp, #92	; 0x5c
 8002eaa:	f001 f8ca 	bl	8004042 <__gethex>
 8002eae:	f010 0607 	ands.w	r6, r0, #7
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	f000 8587 	beq.w	80039c6 <_strtod_r+0xb96>
 8002eb8:	2e06      	cmp	r6, #6
 8002eba:	d105      	bne.n	8002ec8 <_strtod_r+0x98>
 8002ebc:	3501      	adds	r5, #1
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9517      	str	r5, [sp, #92]	; 0x5c
 8002ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8002ec4:	f000 bd7f 	b.w	80039c6 <_strtod_r+0xb96>
 8002ec8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002eca:	b13a      	cbz	r2, 8002edc <_strtod_r+0xac>
 8002ecc:	2135      	movs	r1, #53	; 0x35
 8002ece:	a81a      	add	r0, sp, #104	; 0x68
 8002ed0:	f002 f841 	bl	8004f56 <__copybits>
 8002ed4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8002ed6:	9802      	ldr	r0, [sp, #8]
 8002ed8:	f001 fcbe 	bl	8004858 <_Bfree>
 8002edc:	2e06      	cmp	r6, #6
 8002ede:	d822      	bhi.n	8002f26 <_strtod_r+0xf6>
 8002ee0:	e8df f006 	tbb	[pc, r6]
 8002ee4:	18080d04 	.word	0x18080d04
 8002ee8:	0d1d      	.short	0x0d1d
 8002eea:	04          	.byte	0x04
 8002eeb:	00          	.byte	0x00
 8002eec:	f04f 0b00 	mov.w	fp, #0
 8002ef0:	46da      	mov	sl, fp
 8002ef2:	e018      	b.n	8002f26 <_strtod_r+0xf6>
 8002ef4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8002ef8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8002efc:	e013      	b.n	8002f26 <_strtod_r+0xf6>
 8002efe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002f02:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8002f06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f0a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8002f0e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8002f12:	e008      	b.n	8002f26 <_strtod_r+0xf6>
 8002f14:	f8df b234 	ldr.w	fp, [pc, #564]	; 800314c <_strtod_r+0x31c>
 8002f18:	f04f 0a00 	mov.w	sl, #0
 8002f1c:	e003      	b.n	8002f26 <_strtod_r+0xf6>
 8002f1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8002f22:	f04f 3aff 	mov.w	sl, #4294967295
 8002f26:	0721      	lsls	r1, r4, #28
 8002f28:	f140 854d 	bpl.w	80039c6 <_strtod_r+0xb96>
 8002f2c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8002f30:	f000 bd49 	b.w	80039c6 <_strtod_r+0xb96>
 8002f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	9217      	str	r2, [sp, #92]	; 0x5c
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	2b30      	cmp	r3, #48	; 0x30
 8002f3e:	d0f9      	beq.n	8002f34 <_strtod_r+0x104>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8540 	beq.w	80039c6 <_strtod_r+0xb96>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <_strtod_r+0x11c>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f04f 0800 	mov.w	r8, #0
 8002f50:	9306      	str	r3, [sp, #24]
 8002f52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002f54:	9307      	str	r3, [sp, #28]
 8002f56:	f8cd 8014 	str.w	r8, [sp, #20]
 8002f5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8002f5e:	220a      	movs	r2, #10
 8002f60:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002f62:	782e      	ldrb	r6, [r5, #0]
 8002f64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8002f68:	b2d9      	uxtb	r1, r3
 8002f6a:	2909      	cmp	r1, #9
 8002f6c:	d80e      	bhi.n	8002f8c <_strtod_r+0x15c>
 8002f6e:	9904      	ldr	r1, [sp, #16]
 8002f70:	2908      	cmp	r1, #8
 8002f72:	bfdd      	ittte	le
 8002f74:	9905      	ldrle	r1, [sp, #20]
 8002f76:	fb02 3301 	mlale	r3, r2, r1, r3
 8002f7a:	9305      	strle	r3, [sp, #20]
 8002f7c:	fb02 3808 	mlagt	r8, r2, r8, r3
 8002f80:	9b04      	ldr	r3, [sp, #16]
 8002f82:	3501      	adds	r5, #1
 8002f84:	3301      	adds	r3, #1
 8002f86:	9304      	str	r3, [sp, #16]
 8002f88:	9517      	str	r5, [sp, #92]	; 0x5c
 8002f8a:	e7e9      	b.n	8002f60 <_strtod_r+0x130>
 8002f8c:	9802      	ldr	r0, [sp, #8]
 8002f8e:	f001 fc1d 	bl	80047cc <_localeconv_r>
 8002f92:	6807      	ldr	r7, [r0, #0]
 8002f94:	9802      	ldr	r0, [sp, #8]
 8002f96:	f001 fc19 	bl	80047cc <_localeconv_r>
 8002f9a:	6800      	ldr	r0, [r0, #0]
 8002f9c:	f7fd f922 	bl	80001e4 <strlen>
 8002fa0:	4639      	mov	r1, r7
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f002 f855 	bl	8005054 <strncmp>
 8002faa:	4607      	mov	r7, r0
 8002fac:	b128      	cbz	r0, 8002fba <_strtod_r+0x18a>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	4633      	mov	r3, r6
 8002fb2:	9d04      	ldr	r5, [sp, #16]
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4601      	mov	r1, r0
 8002fb8:	e057      	b.n	800306a <_strtod_r+0x23a>
 8002fba:	9802      	ldr	r0, [sp, #8]
 8002fbc:	f001 fc06 	bl	80047cc <_localeconv_r>
 8002fc0:	6800      	ldr	r0, [r0, #0]
 8002fc2:	f7fd f90f 	bl	80001e4 <strlen>
 8002fc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002fc8:	181a      	adds	r2, r3, r0
 8002fca:	9217      	str	r2, [sp, #92]	; 0x5c
 8002fcc:	9a04      	ldr	r2, [sp, #16]
 8002fce:	5c1b      	ldrb	r3, [r3, r0]
 8002fd0:	2a00      	cmp	r2, #0
 8002fd2:	d142      	bne.n	800305a <_strtod_r+0x22a>
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	2b30      	cmp	r3, #48	; 0x30
 8002fd8:	d105      	bne.n	8002fe6 <_strtod_r+0x1b6>
 8002fda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	9217      	str	r2, [sp, #92]	; 0x5c
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	e7f7      	b.n	8002fd6 <_strtod_r+0x1a6>
 8002fe6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8002fea:	2a08      	cmp	r2, #8
 8002fec:	d843      	bhi.n	8003076 <_strtod_r+0x246>
 8002fee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002ff0:	9207      	str	r2, [sp, #28]
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	4605      	mov	r5, r0
 8002ff8:	3b30      	subs	r3, #48	; 0x30
 8002ffa:	f100 0101 	add.w	r1, r0, #1
 8002ffe:	d026      	beq.n	800304e <_strtod_r+0x21e>
 8003000:	440a      	add	r2, r1
 8003002:	eb05 0c00 	add.w	ip, r5, r0
 8003006:	4629      	mov	r1, r5
 8003008:	260a      	movs	r6, #10
 800300a:	4561      	cmp	r1, ip
 800300c:	d00e      	beq.n	800302c <_strtod_r+0x1fc>
 800300e:	3101      	adds	r1, #1
 8003010:	f101 3eff 	add.w	lr, r1, #4294967295
 8003014:	f1be 0f08 	cmp.w	lr, #8
 8003018:	dc03      	bgt.n	8003022 <_strtod_r+0x1f2>
 800301a:	9f05      	ldr	r7, [sp, #20]
 800301c:	4377      	muls	r7, r6
 800301e:	9705      	str	r7, [sp, #20]
 8003020:	e7f3      	b.n	800300a <_strtod_r+0x1da>
 8003022:	2910      	cmp	r1, #16
 8003024:	bfd8      	it	le
 8003026:	fb06 f808 	mulle.w	r8, r6, r8
 800302a:	e7ee      	b.n	800300a <_strtod_r+0x1da>
 800302c:	4428      	add	r0, r5
 800302e:	2808      	cmp	r0, #8
 8003030:	f100 0501 	add.w	r5, r0, #1
 8003034:	dc05      	bgt.n	8003042 <_strtod_r+0x212>
 8003036:	9805      	ldr	r0, [sp, #20]
 8003038:	210a      	movs	r1, #10
 800303a:	fb01 3300 	mla	r3, r1, r0, r3
 800303e:	9305      	str	r3, [sp, #20]
 8003040:	e004      	b.n	800304c <_strtod_r+0x21c>
 8003042:	2d10      	cmp	r5, #16
 8003044:	bfdc      	itt	le
 8003046:	210a      	movle	r1, #10
 8003048:	fb01 3808 	mlale	r8, r1, r8, r3
 800304c:	2100      	movs	r1, #0
 800304e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003050:	1c58      	adds	r0, r3, #1
 8003052:	9017      	str	r0, [sp, #92]	; 0x5c
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	4608      	mov	r0, r1
 8003058:	e002      	b.n	8003060 <_strtod_r+0x230>
 800305a:	9d04      	ldr	r5, [sp, #16]
 800305c:	4638      	mov	r0, r7
 800305e:	463a      	mov	r2, r7
 8003060:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003064:	2909      	cmp	r1, #9
 8003066:	d9c7      	bls.n	8002ff8 <_strtod_r+0x1c8>
 8003068:	2101      	movs	r1, #1
 800306a:	2b65      	cmp	r3, #101	; 0x65
 800306c:	d001      	beq.n	8003072 <_strtod_r+0x242>
 800306e:	2b45      	cmp	r3, #69	; 0x45
 8003070:	d151      	bne.n	8003116 <_strtod_r+0x2e6>
 8003072:	b96d      	cbnz	r5, 8003090 <_strtod_r+0x260>
 8003074:	e004      	b.n	8003080 <_strtod_r+0x250>
 8003076:	2b65      	cmp	r3, #101	; 0x65
 8003078:	f040 84b3 	bne.w	80039e2 <_strtod_r+0xbb2>
 800307c:	2200      	movs	r2, #0
 800307e:	2101      	movs	r1, #1
 8003080:	b928      	cbnz	r0, 800308e <_strtod_r+0x25e>
 8003082:	9b06      	ldr	r3, [sp, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8095 	beq.w	80031b4 <_strtod_r+0x384>
 800308a:	4605      	mov	r5, r0
 800308c:	e000      	b.n	8003090 <_strtod_r+0x260>
 800308e:	2500      	movs	r5, #0
 8003090:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003092:	1c63      	adds	r3, r4, #1
 8003094:	9317      	str	r3, [sp, #92]	; 0x5c
 8003096:	7863      	ldrb	r3, [r4, #1]
 8003098:	2b2b      	cmp	r3, #43	; 0x2b
 800309a:	d006      	beq.n	80030aa <_strtod_r+0x27a>
 800309c:	2b2d      	cmp	r3, #45	; 0x2d
 800309e:	d002      	beq.n	80030a6 <_strtod_r+0x276>
 80030a0:	2600      	movs	r6, #0
 80030a2:	9603      	str	r6, [sp, #12]
 80030a4:	e006      	b.n	80030b4 <_strtod_r+0x284>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <_strtod_r+0x27c>
 80030aa:	2300      	movs	r3, #0
 80030ac:	9303      	str	r3, [sp, #12]
 80030ae:	1ca3      	adds	r3, r4, #2
 80030b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80030b2:	78a3      	ldrb	r3, [r4, #2]
 80030b4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80030b8:	2e09      	cmp	r6, #9
 80030ba:	d82b      	bhi.n	8003114 <_strtod_r+0x2e4>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d104      	bne.n	80030ca <_strtod_r+0x29a>
 80030c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80030c2:	1c5e      	adds	r6, r3, #1
 80030c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	e7f8      	b.n	80030bc <_strtod_r+0x28c>
 80030ca:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80030ce:	2e08      	cmp	r6, #8
 80030d0:	d821      	bhi.n	8003116 <_strtod_r+0x2e6>
 80030d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80030d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80030d8:	f04f 0c0a 	mov.w	ip, #10
 80030dc:	461f      	mov	r7, r3
 80030de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80030e0:	1c5e      	adds	r6, r3, #1
 80030e2:	9617      	str	r6, [sp, #92]	; 0x5c
 80030e4:	785b      	ldrb	r3, [r3, #1]
 80030e6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 80030ea:	f1b9 0f09 	cmp.w	r9, #9
 80030ee:	d804      	bhi.n	80030fa <_strtod_r+0x2ca>
 80030f0:	fb0c 3e0e 	mla	lr, ip, lr, r3
 80030f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80030f8:	e7f1      	b.n	80030de <_strtod_r+0x2ae>
 80030fa:	1bf6      	subs	r6, r6, r7
 80030fc:	2e08      	cmp	r6, #8
 80030fe:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8003102:	dc02      	bgt.n	800310a <_strtod_r+0x2da>
 8003104:	45f1      	cmp	r9, lr
 8003106:	bfa8      	it	ge
 8003108:	46f1      	movge	r9, lr
 800310a:	9e03      	ldr	r6, [sp, #12]
 800310c:	b12e      	cbz	r6, 800311a <_strtod_r+0x2ea>
 800310e:	f1c9 0900 	rsb	r9, r9, #0
 8003112:	e002      	b.n	800311a <_strtod_r+0x2ea>
 8003114:	9417      	str	r4, [sp, #92]	; 0x5c
 8003116:	f04f 0900 	mov.w	r9, #0
 800311a:	2d00      	cmp	r5, #0
 800311c:	d153      	bne.n	80031c6 <_strtod_r+0x396>
 800311e:	2800      	cmp	r0, #0
 8003120:	f040 8451 	bne.w	80039c6 <_strtod_r+0xb96>
 8003124:	9a06      	ldr	r2, [sp, #24]
 8003126:	2a00      	cmp	r2, #0
 8003128:	f040 844d 	bne.w	80039c6 <_strtod_r+0xb96>
 800312c:	2900      	cmp	r1, #0
 800312e:	d141      	bne.n	80031b4 <_strtod_r+0x384>
 8003130:	2b4e      	cmp	r3, #78	; 0x4e
 8003132:	d020      	beq.n	8003176 <_strtod_r+0x346>
 8003134:	dc02      	bgt.n	800313c <_strtod_r+0x30c>
 8003136:	2b49      	cmp	r3, #73	; 0x49
 8003138:	d00a      	beq.n	8003150 <_strtod_r+0x320>
 800313a:	e03b      	b.n	80031b4 <_strtod_r+0x384>
 800313c:	2b69      	cmp	r3, #105	; 0x69
 800313e:	d007      	beq.n	8003150 <_strtod_r+0x320>
 8003140:	2b6e      	cmp	r3, #110	; 0x6e
 8003142:	d018      	beq.n	8003176 <_strtod_r+0x346>
 8003144:	e036      	b.n	80031b4 <_strtod_r+0x384>
 8003146:	bf00      	nop
 8003148:	08005b34 	.word	0x08005b34
 800314c:	7ff00000 	.word	0x7ff00000
 8003150:	49a8      	ldr	r1, [pc, #672]	; (80033f4 <_strtod_r+0x5c4>)
 8003152:	a817      	add	r0, sp, #92	; 0x5c
 8003154:	f001 f9a6 	bl	80044a4 <__match>
 8003158:	b360      	cbz	r0, 80031b4 <_strtod_r+0x384>
 800315a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800315c:	49a6      	ldr	r1, [pc, #664]	; (80033f8 <_strtod_r+0x5c8>)
 800315e:	3b01      	subs	r3, #1
 8003160:	a817      	add	r0, sp, #92	; 0x5c
 8003162:	9317      	str	r3, [sp, #92]	; 0x5c
 8003164:	f001 f99e 	bl	80044a4 <__match>
 8003168:	b910      	cbnz	r0, 8003170 <_strtod_r+0x340>
 800316a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800316c:	3301      	adds	r3, #1
 800316e:	9317      	str	r3, [sp, #92]	; 0x5c
 8003170:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8003414 <_strtod_r+0x5e4>
 8003174:	e01a      	b.n	80031ac <_strtod_r+0x37c>
 8003176:	49a1      	ldr	r1, [pc, #644]	; (80033fc <_strtod_r+0x5cc>)
 8003178:	a817      	add	r0, sp, #92	; 0x5c
 800317a:	f001 f993 	bl	80044a4 <__match>
 800317e:	b1c8      	cbz	r0, 80031b4 <_strtod_r+0x384>
 8003180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b28      	cmp	r3, #40	; 0x28
 8003186:	d10f      	bne.n	80031a8 <_strtod_r+0x378>
 8003188:	aa1a      	add	r2, sp, #104	; 0x68
 800318a:	499d      	ldr	r1, [pc, #628]	; (8003400 <_strtod_r+0x5d0>)
 800318c:	a817      	add	r0, sp, #92	; 0x5c
 800318e:	f001 f99c 	bl	80044ca <__hexnan>
 8003192:	2805      	cmp	r0, #5
 8003194:	d108      	bne.n	80031a8 <_strtod_r+0x378>
 8003196:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003198:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800319c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80031a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80031a4:	f000 bc0f 	b.w	80039c6 <_strtod_r+0xb96>
 80031a8:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8003418 <_strtod_r+0x5e8>
 80031ac:	f04f 0a00 	mov.w	sl, #0
 80031b0:	f000 bc09 	b.w	80039c6 <_strtod_r+0xb96>
 80031b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80031b6:	9417      	str	r4, [sp, #92]	; 0x5c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 840f 	beq.w	80039dc <_strtod_r+0xbac>
 80031be:	2300      	movs	r3, #0
 80031c0:	930c      	str	r3, [sp, #48]	; 0x30
 80031c2:	f000 bc02 	b.w	80039ca <_strtod_r+0xb9a>
 80031c6:	9b04      	ldr	r3, [sp, #16]
 80031c8:	9805      	ldr	r0, [sp, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf08      	it	eq
 80031ce:	462b      	moveq	r3, r5
 80031d0:	2d10      	cmp	r5, #16
 80031d2:	462c      	mov	r4, r5
 80031d4:	ebc2 0909 	rsb	r9, r2, r9
 80031d8:	bfa8      	it	ge
 80031da:	2410      	movge	r4, #16
 80031dc:	9304      	str	r3, [sp, #16]
 80031de:	f7fd f9a1 	bl	8000524 <__aeabi_ui2d>
 80031e2:	2c09      	cmp	r4, #9
 80031e4:	4682      	mov	sl, r0
 80031e6:	468b      	mov	fp, r1
 80031e8:	dd13      	ble.n	8003212 <_strtod_r+0x3e2>
 80031ea:	4b86      	ldr	r3, [pc, #536]	; (8003404 <_strtod_r+0x5d4>)
 80031ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80031f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80031f4:	f7fd fa0c 	bl	8000610 <__aeabi_dmul>
 80031f8:	4606      	mov	r6, r0
 80031fa:	4640      	mov	r0, r8
 80031fc:	460f      	mov	r7, r1
 80031fe:	f7fd f991 	bl	8000524 <__aeabi_ui2d>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4630      	mov	r0, r6
 8003208:	4639      	mov	r1, r7
 800320a:	f7fd f84f 	bl	80002ac <__adddf3>
 800320e:	4682      	mov	sl, r0
 8003210:	468b      	mov	fp, r1
 8003212:	2d0f      	cmp	r5, #15
 8003214:	dc36      	bgt.n	8003284 <_strtod_r+0x454>
 8003216:	f1b9 0f00 	cmp.w	r9, #0
 800321a:	f000 83d4 	beq.w	80039c6 <_strtod_r+0xb96>
 800321e:	dd24      	ble.n	800326a <_strtod_r+0x43a>
 8003220:	f1b9 0f16 	cmp.w	r9, #22
 8003224:	dc07      	bgt.n	8003236 <_strtod_r+0x406>
 8003226:	4d77      	ldr	r5, [pc, #476]	; (8003404 <_strtod_r+0x5d4>)
 8003228:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 800322c:	4652      	mov	r2, sl
 800322e:	465b      	mov	r3, fp
 8003230:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003234:	e014      	b.n	8003260 <_strtod_r+0x430>
 8003236:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800323a:	4599      	cmp	r9, r3
 800323c:	dc22      	bgt.n	8003284 <_strtod_r+0x454>
 800323e:	4c71      	ldr	r4, [pc, #452]	; (8003404 <_strtod_r+0x5d4>)
 8003240:	f1c5 050f 	rsb	r5, r5, #15
 8003244:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003248:	ebc5 0509 	rsb	r5, r5, r9
 800324c:	4652      	mov	r2, sl
 800324e:	465b      	mov	r3, fp
 8003250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003254:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003258:	f7fd f9da 	bl	8000610 <__aeabi_dmul>
 800325c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003260:	f7fd f9d6 	bl	8000610 <__aeabi_dmul>
 8003264:	4682      	mov	sl, r0
 8003266:	468b      	mov	fp, r1
 8003268:	e3ad      	b.n	80039c6 <_strtod_r+0xb96>
 800326a:	f119 0f16 	cmn.w	r9, #22
 800326e:	db09      	blt.n	8003284 <_strtod_r+0x454>
 8003270:	4d64      	ldr	r5, [pc, #400]	; (8003404 <_strtod_r+0x5d4>)
 8003272:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8003276:	e9d9 2300 	ldrd	r2, r3, [r9]
 800327a:	4650      	mov	r0, sl
 800327c:	4659      	mov	r1, fp
 800327e:	f7fd faf1 	bl	8000864 <__aeabi_ddiv>
 8003282:	e7ef      	b.n	8003264 <_strtod_r+0x434>
 8003284:	1b2c      	subs	r4, r5, r4
 8003286:	444c      	add	r4, r9
 8003288:	2c00      	cmp	r4, #0
 800328a:	dd57      	ble.n	800333c <_strtod_r+0x50c>
 800328c:	f014 010f 	ands.w	r1, r4, #15
 8003290:	d00a      	beq.n	80032a8 <_strtod_r+0x478>
 8003292:	4b5c      	ldr	r3, [pc, #368]	; (8003404 <_strtod_r+0x5d4>)
 8003294:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003298:	4652      	mov	r2, sl
 800329a:	465b      	mov	r3, fp
 800329c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032a0:	f7fd f9b6 	bl	8000610 <__aeabi_dmul>
 80032a4:	4682      	mov	sl, r0
 80032a6:	468b      	mov	fp, r1
 80032a8:	f034 040f 	bics.w	r4, r4, #15
 80032ac:	f000 80b8 	beq.w	8003420 <_strtod_r+0x5f0>
 80032b0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80032b4:	dd0b      	ble.n	80032ce <_strtod_r+0x49e>
 80032b6:	2400      	movs	r4, #0
 80032b8:	4625      	mov	r5, r4
 80032ba:	9405      	str	r4, [sp, #20]
 80032bc:	9404      	str	r4, [sp, #16]
 80032be:	9a02      	ldr	r2, [sp, #8]
 80032c0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8003414 <_strtod_r+0x5e4>
 80032c4:	2322      	movs	r3, #34	; 0x22
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	f04f 0a00 	mov.w	sl, #0
 80032cc:	e187      	b.n	80035de <_strtod_r+0x7ae>
 80032ce:	4e4e      	ldr	r6, [pc, #312]	; (8003408 <_strtod_r+0x5d8>)
 80032d0:	2300      	movs	r3, #0
 80032d2:	1124      	asrs	r4, r4, #4
 80032d4:	4650      	mov	r0, sl
 80032d6:	4659      	mov	r1, fp
 80032d8:	4698      	mov	r8, r3
 80032da:	4637      	mov	r7, r6
 80032dc:	2c01      	cmp	r4, #1
 80032de:	dd0b      	ble.n	80032f8 <_strtod_r+0x4c8>
 80032e0:	07e2      	lsls	r2, r4, #31
 80032e2:	d504      	bpl.n	80032ee <_strtod_r+0x4be>
 80032e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80032e8:	f7fd f992 	bl	8000610 <__aeabi_dmul>
 80032ec:	2301      	movs	r3, #1
 80032ee:	f108 0801 	add.w	r8, r8, #1
 80032f2:	1064      	asrs	r4, r4, #1
 80032f4:	3608      	adds	r6, #8
 80032f6:	e7f1      	b.n	80032dc <_strtod_r+0x4ac>
 80032f8:	b10b      	cbz	r3, 80032fe <_strtod_r+0x4ce>
 80032fa:	4682      	mov	sl, r0
 80032fc:	468b      	mov	fp, r1
 80032fe:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003302:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8003306:	4652      	mov	r2, sl
 8003308:	465b      	mov	r3, fp
 800330a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800330e:	f7fd f97f 	bl	8000610 <__aeabi_dmul>
 8003312:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003316:	468b      	mov	fp, r1
 8003318:	460a      	mov	r2, r1
 800331a:	0d1b      	lsrs	r3, r3, #20
 800331c:	493b      	ldr	r1, [pc, #236]	; (800340c <_strtod_r+0x5dc>)
 800331e:	051b      	lsls	r3, r3, #20
 8003320:	428b      	cmp	r3, r1
 8003322:	4682      	mov	sl, r0
 8003324:	d8c7      	bhi.n	80032b6 <_strtod_r+0x486>
 8003326:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800332a:	428b      	cmp	r3, r1
 800332c:	bf86      	itte	hi
 800332e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 800341c <_strtod_r+0x5ec>
 8003332:	f04f 3aff 	movhi.w	sl, #4294967295
 8003336:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800333a:	e071      	b.n	8003420 <_strtod_r+0x5f0>
 800333c:	d070      	beq.n	8003420 <_strtod_r+0x5f0>
 800333e:	4264      	negs	r4, r4
 8003340:	f014 020f 	ands.w	r2, r4, #15
 8003344:	d00a      	beq.n	800335c <_strtod_r+0x52c>
 8003346:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <_strtod_r+0x5d4>)
 8003348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800334c:	4650      	mov	r0, sl
 800334e:	4659      	mov	r1, fp
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fd fa86 	bl	8000864 <__aeabi_ddiv>
 8003358:	4682      	mov	sl, r0
 800335a:	468b      	mov	fp, r1
 800335c:	1124      	asrs	r4, r4, #4
 800335e:	d05f      	beq.n	8003420 <_strtod_r+0x5f0>
 8003360:	2c1f      	cmp	r4, #31
 8003362:	dd04      	ble.n	800336e <_strtod_r+0x53e>
 8003364:	2400      	movs	r4, #0
 8003366:	4625      	mov	r5, r4
 8003368:	9405      	str	r4, [sp, #20]
 800336a:	9404      	str	r4, [sp, #16]
 800336c:	e130      	b.n	80035d0 <_strtod_r+0x7a0>
 800336e:	f014 0f10 	tst.w	r4, #16
 8003372:	bf0c      	ite	eq
 8003374:	2300      	moveq	r3, #0
 8003376:	236a      	movne	r3, #106	; 0x6a
 8003378:	4e25      	ldr	r6, [pc, #148]	; (8003410 <_strtod_r+0x5e0>)
 800337a:	9303      	str	r3, [sp, #12]
 800337c:	4650      	mov	r0, sl
 800337e:	4659      	mov	r1, fp
 8003380:	2300      	movs	r3, #0
 8003382:	2c00      	cmp	r4, #0
 8003384:	dd09      	ble.n	800339a <_strtod_r+0x56a>
 8003386:	07e2      	lsls	r2, r4, #31
 8003388:	d504      	bpl.n	8003394 <_strtod_r+0x564>
 800338a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800338e:	f7fd f93f 	bl	8000610 <__aeabi_dmul>
 8003392:	2301      	movs	r3, #1
 8003394:	1064      	asrs	r4, r4, #1
 8003396:	3608      	adds	r6, #8
 8003398:	e7f3      	b.n	8003382 <_strtod_r+0x552>
 800339a:	b10b      	cbz	r3, 80033a0 <_strtod_r+0x570>
 800339c:	4682      	mov	sl, r0
 800339e:	468b      	mov	fp, r1
 80033a0:	9b03      	ldr	r3, [sp, #12]
 80033a2:	b1eb      	cbz	r3, 80033e0 <_strtod_r+0x5b0>
 80033a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80033a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	4659      	mov	r1, fp
 80033b0:	dd16      	ble.n	80033e0 <_strtod_r+0x5b0>
 80033b2:	2b1f      	cmp	r3, #31
 80033b4:	dd0e      	ble.n	80033d4 <_strtod_r+0x5a4>
 80033b6:	2b34      	cmp	r3, #52	; 0x34
 80033b8:	bfde      	ittt	le
 80033ba:	3b20      	suble	r3, #32
 80033bc:	f04f 32ff 	movle.w	r2, #4294967295
 80033c0:	fa02 f303 	lslle.w	r3, r2, r3
 80033c4:	f04f 0a00 	mov.w	sl, #0
 80033c8:	bfcc      	ite	gt
 80033ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80033ce:	ea03 0b01 	andle.w	fp, r3, r1
 80033d2:	e005      	b.n	80033e0 <_strtod_r+0x5b0>
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	ea03 0a0a 	and.w	sl, r3, sl
 80033e0:	2200      	movs	r2, #0
 80033e2:	2300      	movs	r3, #0
 80033e4:	4650      	mov	r0, sl
 80033e6:	4659      	mov	r1, fp
 80033e8:	f7fd fb7a 	bl	8000ae0 <__aeabi_dcmpeq>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d1b9      	bne.n	8003364 <_strtod_r+0x534>
 80033f0:	e018      	b.n	8003424 <_strtod_r+0x5f4>
 80033f2:	bf00      	nop
 80033f4:	08005b5c 	.word	0x08005b5c
 80033f8:	08005b5f 	.word	0x08005b5f
 80033fc:	08005b65 	.word	0x08005b65
 8003400:	08005b48 	.word	0x08005b48
 8003404:	08005bd8 	.word	0x08005bd8
 8003408:	08005ca0 	.word	0x08005ca0
 800340c:	7ca00000 	.word	0x7ca00000
 8003410:	08005b68 	.word	0x08005b68
 8003414:	7ff00000 	.word	0x7ff00000
 8003418:	fff80000 	.word	0xfff80000
 800341c:	7fefffff 	.word	0x7fefffff
 8003420:	2300      	movs	r3, #0
 8003422:	9303      	str	r3, [sp, #12]
 8003424:	9b05      	ldr	r3, [sp, #20]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	9a04      	ldr	r2, [sp, #16]
 800342a:	9907      	ldr	r1, [sp, #28]
 800342c:	9802      	ldr	r0, [sp, #8]
 800342e:	462b      	mov	r3, r5
 8003430:	f001 fa64 	bl	80048fc <__s2b>
 8003434:	9005      	str	r0, [sp, #20]
 8003436:	2800      	cmp	r0, #0
 8003438:	f43f af3d 	beq.w	80032b6 <_strtod_r+0x486>
 800343c:	f1b9 0f00 	cmp.w	r9, #0
 8003440:	f1c9 0300 	rsb	r3, r9, #0
 8003444:	bfa8      	it	ge
 8003446:	2300      	movge	r3, #0
 8003448:	930d      	str	r3, [sp, #52]	; 0x34
 800344a:	2400      	movs	r4, #0
 800344c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8003450:	9312      	str	r3, [sp, #72]	; 0x48
 8003452:	4625      	mov	r5, r4
 8003454:	9b05      	ldr	r3, [sp, #20]
 8003456:	9802      	ldr	r0, [sp, #8]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	f001 f9c8 	bl	80047ee <_Balloc>
 800345e:	9004      	str	r0, [sp, #16]
 8003460:	2800      	cmp	r0, #0
 8003462:	f43f af2c 	beq.w	80032be <_strtod_r+0x48e>
 8003466:	9b05      	ldr	r3, [sp, #20]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	3202      	adds	r2, #2
 800346c:	f103 010c 	add.w	r1, r3, #12
 8003470:	0092      	lsls	r2, r2, #2
 8003472:	300c      	adds	r0, #12
 8003474:	f001 f9ae 	bl	80047d4 <memcpy>
 8003478:	aa1a      	add	r2, sp, #104	; 0x68
 800347a:	a919      	add	r1, sp, #100	; 0x64
 800347c:	ec4b ab10 	vmov	d0, sl, fp
 8003480:	9802      	ldr	r0, [sp, #8]
 8003482:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003486:	f001 fcee 	bl	8004e66 <__d2b>
 800348a:	9018      	str	r0, [sp, #96]	; 0x60
 800348c:	2800      	cmp	r0, #0
 800348e:	f43f af16 	beq.w	80032be <_strtod_r+0x48e>
 8003492:	2101      	movs	r1, #1
 8003494:	9802      	ldr	r0, [sp, #8]
 8003496:	f001 fabc 	bl	8004a12 <__i2b>
 800349a:	4605      	mov	r5, r0
 800349c:	2800      	cmp	r0, #0
 800349e:	f43f af0e 	beq.w	80032be <_strtod_r+0x48e>
 80034a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034a4:	9903      	ldr	r1, [sp, #12]
 80034a6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bfad      	iteet	ge
 80034ac:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80034ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80034b0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 80034b4:	eb02 0803 	addge.w	r8, r2, r3
 80034b8:	bfb8      	it	lt
 80034ba:	1ad2      	sublt	r2, r2, r3
 80034bc:	eba3 0301 	sub.w	r3, r3, r1
 80034c0:	4433      	add	r3, r6
 80034c2:	49b5      	ldr	r1, [pc, #724]	; (8003798 <_strtod_r+0x968>)
 80034c4:	bfa8      	it	ge
 80034c6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80034c8:	3b01      	subs	r3, #1
 80034ca:	428b      	cmp	r3, r1
 80034cc:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 80034d0:	f280 808a 	bge.w	80035e8 <_strtod_r+0x7b8>
 80034d4:	1ac9      	subs	r1, r1, r3
 80034d6:	291f      	cmp	r1, #31
 80034d8:	bfc8      	it	gt
 80034da:	4fb0      	ldrgt	r7, [pc, #704]	; (800379c <_strtod_r+0x96c>)
 80034dc:	f04f 0901 	mov.w	r9, #1
 80034e0:	bfd4      	ite	le
 80034e2:	fa09 f301 	lslle.w	r3, r9, r1
 80034e6:	1aff      	subgt	r7, r7, r3
 80034e8:	eba6 0601 	sub.w	r6, r6, r1
 80034ec:	bfd9      	ittee	le
 80034ee:	9306      	strle	r3, [sp, #24]
 80034f0:	2700      	movle	r7, #0
 80034f2:	fa09 f707 	lslgt.w	r7, r9, r7
 80034f6:	f8cd 9018 	strgt.w	r9, [sp, #24]
 80034fa:	eb08 0906 	add.w	r9, r8, r6
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	45c8      	cmp	r8, r9
 8003502:	4416      	add	r6, r2
 8003504:	441e      	add	r6, r3
 8003506:	4643      	mov	r3, r8
 8003508:	bfa8      	it	ge
 800350a:	464b      	movge	r3, r9
 800350c:	42b3      	cmp	r3, r6
 800350e:	bfa8      	it	ge
 8003510:	4633      	movge	r3, r6
 8003512:	2b00      	cmp	r3, #0
 8003514:	bfc2      	ittt	gt
 8003516:	ebc3 0909 	rsbgt	r9, r3, r9
 800351a:	1af6      	subgt	r6, r6, r3
 800351c:	ebc3 0808 	rsbgt	r8, r3, r8
 8003520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003522:	2b00      	cmp	r3, #0
 8003524:	d164      	bne.n	80035f0 <_strtod_r+0x7c0>
 8003526:	f1b9 0f00 	cmp.w	r9, #0
 800352a:	dc7a      	bgt.n	8003622 <_strtod_r+0x7f2>
 800352c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 8081 	bne.w	8003636 <_strtod_r+0x806>
 8003534:	2e00      	cmp	r6, #0
 8003536:	f300 8088 	bgt.w	800364a <_strtod_r+0x81a>
 800353a:	f1b8 0f00 	cmp.w	r8, #0
 800353e:	f300 808e 	bgt.w	800365e <_strtod_r+0x82e>
 8003542:	9a04      	ldr	r2, [sp, #16]
 8003544:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003546:	9802      	ldr	r0, [sp, #8]
 8003548:	f001 fbb9 	bl	8004cbe <__mdiff>
 800354c:	4604      	mov	r4, r0
 800354e:	2800      	cmp	r0, #0
 8003550:	f43f aeb5 	beq.w	80032be <_strtod_r+0x48e>
 8003554:	68c3      	ldr	r3, [r0, #12]
 8003556:	9307      	str	r3, [sp, #28]
 8003558:	2300      	movs	r3, #0
 800355a:	60c3      	str	r3, [r0, #12]
 800355c:	4629      	mov	r1, r5
 800355e:	f001 fb92 	bl	8004c86 <__mcmp>
 8003562:	2800      	cmp	r0, #0
 8003564:	f280 8089 	bge.w	800367a <_strtod_r+0x84a>
 8003568:	9b07      	ldr	r3, [sp, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f040 8204 	bne.w	8003978 <_strtod_r+0xb48>
 8003570:	f1ba 0f00 	cmp.w	sl, #0
 8003574:	f040 8200 	bne.w	8003978 <_strtod_r+0xb48>
 8003578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800357c:	2b00      	cmp	r3, #0
 800357e:	f040 81fb 	bne.w	8003978 <_strtod_r+0xb48>
 8003582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003586:	0d1b      	lsrs	r3, r3, #20
 8003588:	051b      	lsls	r3, r3, #20
 800358a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800358e:	f240 81f3 	bls.w	8003978 <_strtod_r+0xb48>
 8003592:	6963      	ldr	r3, [r4, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d06c      	beq.n	8003672 <_strtod_r+0x842>
 8003598:	4621      	mov	r1, r4
 800359a:	2201      	movs	r2, #1
 800359c:	9802      	ldr	r0, [sp, #8]
 800359e:	f001 fb21 	bl	8004be4 <__lshift>
 80035a2:	4629      	mov	r1, r5
 80035a4:	4604      	mov	r4, r0
 80035a6:	f001 fb6e 	bl	8004c86 <__mcmp>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	f340 81e4 	ble.w	8003978 <_strtod_r+0xb48>
 80035b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80035b4:	9a03      	ldr	r2, [sp, #12]
 80035b6:	0d1b      	lsrs	r3, r3, #20
 80035b8:	051b      	lsls	r3, r3, #20
 80035ba:	2a00      	cmp	r2, #0
 80035bc:	f000 808c 	beq.w	80036d8 <_strtod_r+0x8a8>
 80035c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80035c4:	f300 8088 	bgt.w	80036d8 <_strtod_r+0x8a8>
 80035c8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80035cc:	f300 81d6 	bgt.w	800397c <_strtod_r+0xb4c>
 80035d0:	9a02      	ldr	r2, [sp, #8]
 80035d2:	2322      	movs	r3, #34	; 0x22
 80035d4:	f04f 0a00 	mov.w	sl, #0
 80035d8:	f04f 0b00 	mov.w	fp, #0
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	9b05      	ldr	r3, [sp, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 81dc 	bne.w	800399e <_strtod_r+0xb6e>
 80035e6:	e1ee      	b.n	80039c6 <_strtod_r+0xb96>
 80035e8:	2301      	movs	r3, #1
 80035ea:	2700      	movs	r7, #0
 80035ec:	9306      	str	r3, [sp, #24]
 80035ee:	e784      	b.n	80034fa <_strtod_r+0x6ca>
 80035f0:	4629      	mov	r1, r5
 80035f2:	461a      	mov	r2, r3
 80035f4:	9802      	ldr	r0, [sp, #8]
 80035f6:	f001 faa7 	bl	8004b48 <__pow5mult>
 80035fa:	4605      	mov	r5, r0
 80035fc:	2800      	cmp	r0, #0
 80035fe:	f43f ae5e 	beq.w	80032be <_strtod_r+0x48e>
 8003602:	4601      	mov	r1, r0
 8003604:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003606:	9802      	ldr	r0, [sp, #8]
 8003608:	f001 fa0c 	bl	8004a24 <__multiply>
 800360c:	9007      	str	r0, [sp, #28]
 800360e:	2800      	cmp	r0, #0
 8003610:	f43f ae55 	beq.w	80032be <_strtod_r+0x48e>
 8003614:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003616:	9802      	ldr	r0, [sp, #8]
 8003618:	f001 f91e 	bl	8004858 <_Bfree>
 800361c:	9b07      	ldr	r3, [sp, #28]
 800361e:	9318      	str	r3, [sp, #96]	; 0x60
 8003620:	e781      	b.n	8003526 <_strtod_r+0x6f6>
 8003622:	464a      	mov	r2, r9
 8003624:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003626:	9802      	ldr	r0, [sp, #8]
 8003628:	f001 fadc 	bl	8004be4 <__lshift>
 800362c:	9018      	str	r0, [sp, #96]	; 0x60
 800362e:	2800      	cmp	r0, #0
 8003630:	f47f af7c 	bne.w	800352c <_strtod_r+0x6fc>
 8003634:	e643      	b.n	80032be <_strtod_r+0x48e>
 8003636:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003638:	9904      	ldr	r1, [sp, #16]
 800363a:	9802      	ldr	r0, [sp, #8]
 800363c:	f001 fa84 	bl	8004b48 <__pow5mult>
 8003640:	9004      	str	r0, [sp, #16]
 8003642:	2800      	cmp	r0, #0
 8003644:	f47f af76 	bne.w	8003534 <_strtod_r+0x704>
 8003648:	e639      	b.n	80032be <_strtod_r+0x48e>
 800364a:	4632      	mov	r2, r6
 800364c:	9904      	ldr	r1, [sp, #16]
 800364e:	9802      	ldr	r0, [sp, #8]
 8003650:	f001 fac8 	bl	8004be4 <__lshift>
 8003654:	9004      	str	r0, [sp, #16]
 8003656:	2800      	cmp	r0, #0
 8003658:	f47f af6f 	bne.w	800353a <_strtod_r+0x70a>
 800365c:	e62f      	b.n	80032be <_strtod_r+0x48e>
 800365e:	4629      	mov	r1, r5
 8003660:	4642      	mov	r2, r8
 8003662:	9802      	ldr	r0, [sp, #8]
 8003664:	f001 fabe 	bl	8004be4 <__lshift>
 8003668:	4605      	mov	r5, r0
 800366a:	2800      	cmp	r0, #0
 800366c:	f47f af69 	bne.w	8003542 <_strtod_r+0x712>
 8003670:	e625      	b.n	80032be <_strtod_r+0x48e>
 8003672:	6923      	ldr	r3, [r4, #16]
 8003674:	2b01      	cmp	r3, #1
 8003676:	dc8f      	bgt.n	8003598 <_strtod_r+0x768>
 8003678:	e17e      	b.n	8003978 <_strtod_r+0xb48>
 800367a:	d161      	bne.n	8003740 <_strtod_r+0x910>
 800367c:	9a07      	ldr	r2, [sp, #28]
 800367e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003682:	b322      	cbz	r2, 80036ce <_strtod_r+0x89e>
 8003684:	4946      	ldr	r1, [pc, #280]	; (80037a0 <_strtod_r+0x970>)
 8003686:	428b      	cmp	r3, r1
 8003688:	465a      	mov	r2, fp
 800368a:	d12e      	bne.n	80036ea <_strtod_r+0x8ba>
 800368c:	9b03      	ldr	r3, [sp, #12]
 800368e:	4651      	mov	r1, sl
 8003690:	b163      	cbz	r3, 80036ac <_strtod_r+0x87c>
 8003692:	4b44      	ldr	r3, [pc, #272]	; (80037a4 <_strtod_r+0x974>)
 8003694:	4013      	ands	r3, r2
 8003696:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800369a:	d807      	bhi.n	80036ac <_strtod_r+0x87c>
 800369c:	0d1b      	lsrs	r3, r3, #20
 800369e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80036a2:	f04f 30ff 	mov.w	r0, #4294967295
 80036a6:	fa00 f303 	lsl.w	r3, r0, r3
 80036aa:	e001      	b.n	80036b0 <_strtod_r+0x880>
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
 80036b0:	428b      	cmp	r3, r1
 80036b2:	d11a      	bne.n	80036ea <_strtod_r+0x8ba>
 80036b4:	493c      	ldr	r1, [pc, #240]	; (80037a8 <_strtod_r+0x978>)
 80036b6:	428a      	cmp	r2, r1
 80036b8:	d102      	bne.n	80036c0 <_strtod_r+0x890>
 80036ba:	3301      	adds	r3, #1
 80036bc:	f43f adff 	beq.w	80032be <_strtod_r+0x48e>
 80036c0:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <_strtod_r+0x974>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80036c8:	f04f 0a00 	mov.w	sl, #0
 80036cc:	e154      	b.n	8003978 <_strtod_r+0xb48>
 80036ce:	b963      	cbnz	r3, 80036ea <_strtod_r+0x8ba>
 80036d0:	f1ba 0f00 	cmp.w	sl, #0
 80036d4:	d109      	bne.n	80036ea <_strtod_r+0x8ba>
 80036d6:	e76b      	b.n	80035b0 <_strtod_r+0x780>
 80036d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80036dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80036e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80036e4:	f04f 3aff 	mov.w	sl, #4294967295
 80036e8:	e146      	b.n	8003978 <_strtod_r+0xb48>
 80036ea:	b117      	cbz	r7, 80036f2 <_strtod_r+0x8c2>
 80036ec:	ea17 0f0b 	tst.w	r7, fp
 80036f0:	e002      	b.n	80036f8 <_strtod_r+0x8c8>
 80036f2:	9b06      	ldr	r3, [sp, #24]
 80036f4:	ea13 0f0a 	tst.w	r3, sl
 80036f8:	f000 813e 	beq.w	8003978 <_strtod_r+0xb48>
 80036fc:	9b07      	ldr	r3, [sp, #28]
 80036fe:	9a03      	ldr	r2, [sp, #12]
 8003700:	4650      	mov	r0, sl
 8003702:	4659      	mov	r1, fp
 8003704:	b153      	cbz	r3, 800371c <_strtod_r+0x8ec>
 8003706:	f7ff fb75 	bl	8002df4 <sulp>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003712:	f7fc fdcb 	bl	80002ac <__adddf3>
 8003716:	4682      	mov	sl, r0
 8003718:	468b      	mov	fp, r1
 800371a:	e12d      	b.n	8003978 <_strtod_r+0xb48>
 800371c:	f7ff fb6a 	bl	8002df4 <sulp>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003728:	f7fc fdbe 	bl	80002a8 <__aeabi_dsub>
 800372c:	2200      	movs	r2, #0
 800372e:	2300      	movs	r3, #0
 8003730:	4682      	mov	sl, r0
 8003732:	468b      	mov	fp, r1
 8003734:	f7fd f9d4 	bl	8000ae0 <__aeabi_dcmpeq>
 8003738:	2800      	cmp	r0, #0
 800373a:	f47f af49 	bne.w	80035d0 <_strtod_r+0x7a0>
 800373e:	e11b      	b.n	8003978 <_strtod_r+0xb48>
 8003740:	4629      	mov	r1, r5
 8003742:	4620      	mov	r0, r4
 8003744:	f001 fbdd 	bl	8004f02 <__ratio>
 8003748:	ec57 6b10 	vmov	r6, r7, d0
 800374c:	2200      	movs	r2, #0
 800374e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003752:	ee10 0a10 	vmov	r0, s0
 8003756:	4639      	mov	r1, r7
 8003758:	f7fd f9d6 	bl	8000b08 <__aeabi_dcmple>
 800375c:	2800      	cmp	r0, #0
 800375e:	d042      	beq.n	80037e6 <_strtod_r+0x9b6>
 8003760:	9b07      	ldr	r3, [sp, #28]
 8003762:	b123      	cbz	r3, 800376e <_strtod_r+0x93e>
 8003764:	f04f 0800 	mov.w	r8, #0
 8003768:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80037ac <_strtod_r+0x97c>
 800376c:	e011      	b.n	8003792 <_strtod_r+0x962>
 800376e:	f1ba 0f00 	cmp.w	sl, #0
 8003772:	d103      	bne.n	800377c <_strtod_r+0x94c>
 8003774:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003778:	b93b      	cbnz	r3, 800378a <_strtod_r+0x95a>
 800377a:	e01b      	b.n	80037b4 <_strtod_r+0x984>
 800377c:	f1ba 0f01 	cmp.w	sl, #1
 8003780:	d103      	bne.n	800378a <_strtod_r+0x95a>
 8003782:	f1bb 0f00 	cmp.w	fp, #0
 8003786:	f43f af23 	beq.w	80035d0 <_strtod_r+0x7a0>
 800378a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 80037b0 <_strtod_r+0x980>
 800378e:	f04f 0800 	mov.w	r8, #0
 8003792:	2600      	movs	r6, #0
 8003794:	4f05      	ldr	r7, [pc, #20]	; (80037ac <_strtod_r+0x97c>)
 8003796:	e039      	b.n	800380c <_strtod_r+0x9dc>
 8003798:	fffffc02 	.word	0xfffffc02
 800379c:	fffffbe2 	.word	0xfffffbe2
 80037a0:	000fffff 	.word	0x000fffff
 80037a4:	7ff00000 	.word	0x7ff00000
 80037a8:	7fefffff 	.word	0x7fefffff
 80037ac:	3ff00000 	.word	0x3ff00000
 80037b0:	bff00000 	.word	0xbff00000
 80037b4:	2200      	movs	r2, #0
 80037b6:	4b98      	ldr	r3, [pc, #608]	; (8003a18 <_strtod_r+0xbe8>)
 80037b8:	4630      	mov	r0, r6
 80037ba:	4639      	mov	r1, r7
 80037bc:	f7fd f99a 	bl	8000af4 <__aeabi_dcmplt>
 80037c0:	b940      	cbnz	r0, 80037d4 <_strtod_r+0x9a4>
 80037c2:	4630      	mov	r0, r6
 80037c4:	4639      	mov	r1, r7
 80037c6:	2200      	movs	r2, #0
 80037c8:	4b94      	ldr	r3, [pc, #592]	; (8003a1c <_strtod_r+0xbec>)
 80037ca:	f7fc ff21 	bl	8000610 <__aeabi_dmul>
 80037ce:	4606      	mov	r6, r0
 80037d0:	460f      	mov	r7, r1
 80037d2:	e001      	b.n	80037d8 <_strtod_r+0x9a8>
 80037d4:	4f91      	ldr	r7, [pc, #580]	; (8003a1c <_strtod_r+0xbec>)
 80037d6:	2600      	movs	r6, #0
 80037d8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80037dc:	9614      	str	r6, [sp, #80]	; 0x50
 80037de:	9315      	str	r3, [sp, #84]	; 0x54
 80037e0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80037e4:	e012      	b.n	800380c <_strtod_r+0x9dc>
 80037e6:	4b8d      	ldr	r3, [pc, #564]	; (8003a1c <_strtod_r+0xbec>)
 80037e8:	4630      	mov	r0, r6
 80037ea:	4639      	mov	r1, r7
 80037ec:	2200      	movs	r2, #0
 80037ee:	f7fc ff0f 	bl	8000610 <__aeabi_dmul>
 80037f2:	9b07      	ldr	r3, [sp, #28]
 80037f4:	4606      	mov	r6, r0
 80037f6:	460f      	mov	r7, r1
 80037f8:	b923      	cbnz	r3, 8003804 <_strtod_r+0x9d4>
 80037fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80037fe:	900e      	str	r0, [sp, #56]	; 0x38
 8003800:	930f      	str	r3, [sp, #60]	; 0x3c
 8003802:	e001      	b.n	8003808 <_strtod_r+0x9d8>
 8003804:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8003808:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800380c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003810:	0d1b      	lsrs	r3, r3, #20
 8003812:	051b      	lsls	r3, r3, #20
 8003814:	9306      	str	r3, [sp, #24]
 8003816:	9a06      	ldr	r2, [sp, #24]
 8003818:	4b81      	ldr	r3, [pc, #516]	; (8003a20 <_strtod_r+0xbf0>)
 800381a:	429a      	cmp	r2, r3
 800381c:	d12b      	bne.n	8003876 <_strtod_r+0xa46>
 800381e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003822:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003826:	ec4b ab10 	vmov	d0, sl, fp
 800382a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800382e:	f001 faa5 	bl	8004d7c <__ulp>
 8003832:	4640      	mov	r0, r8
 8003834:	ec53 2b10 	vmov	r2, r3, d0
 8003838:	4649      	mov	r1, r9
 800383a:	f7fc fee9 	bl	8000610 <__aeabi_dmul>
 800383e:	4652      	mov	r2, sl
 8003840:	465b      	mov	r3, fp
 8003842:	f7fc fd33 	bl	80002ac <__adddf3>
 8003846:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800384a:	0d1b      	lsrs	r3, r3, #20
 800384c:	4a75      	ldr	r2, [pc, #468]	; (8003a24 <_strtod_r+0xbf4>)
 800384e:	051b      	lsls	r3, r3, #20
 8003850:	4293      	cmp	r3, r2
 8003852:	4682      	mov	sl, r0
 8003854:	d90c      	bls.n	8003870 <_strtod_r+0xa40>
 8003856:	4b74      	ldr	r3, [pc, #464]	; (8003a28 <_strtod_r+0xbf8>)
 8003858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800385a:	429a      	cmp	r2, r3
 800385c:	d103      	bne.n	8003866 <_strtod_r+0xa36>
 800385e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003860:	3301      	adds	r3, #1
 8003862:	f43f ad2c 	beq.w	80032be <_strtod_r+0x48e>
 8003866:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8003a28 <_strtod_r+0xbf8>
 800386a:	f04f 3aff 	mov.w	sl, #4294967295
 800386e:	e072      	b.n	8003956 <_strtod_r+0xb26>
 8003870:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8003874:	e038      	b.n	80038e8 <_strtod_r+0xab8>
 8003876:	9b03      	ldr	r3, [sp, #12]
 8003878:	b333      	cbz	r3, 80038c8 <_strtod_r+0xa98>
 800387a:	9b06      	ldr	r3, [sp, #24]
 800387c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003880:	d822      	bhi.n	80038c8 <_strtod_r+0xa98>
 8003882:	a35d      	add	r3, pc, #372	; (adr r3, 80039f8 <_strtod_r+0xbc8>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	4630      	mov	r0, r6
 800388a:	4639      	mov	r1, r7
 800388c:	f7fd f93c 	bl	8000b08 <__aeabi_dcmple>
 8003890:	b1a8      	cbz	r0, 80038be <_strtod_r+0xa8e>
 8003892:	4639      	mov	r1, r7
 8003894:	4630      	mov	r0, r6
 8003896:	f7fd f97d 	bl	8000b94 <__aeabi_d2uiz>
 800389a:	2800      	cmp	r0, #0
 800389c:	bf08      	it	eq
 800389e:	2001      	moveq	r0, #1
 80038a0:	f7fc fe40 	bl	8000524 <__aeabi_ui2d>
 80038a4:	9b07      	ldr	r3, [sp, #28]
 80038a6:	4606      	mov	r6, r0
 80038a8:	460f      	mov	r7, r1
 80038aa:	b923      	cbnz	r3, 80038b6 <_strtod_r+0xa86>
 80038ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80038b0:	9010      	str	r0, [sp, #64]	; 0x40
 80038b2:	9311      	str	r3, [sp, #68]	; 0x44
 80038b4:	e001      	b.n	80038ba <_strtod_r+0xa8a>
 80038b6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80038ba:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80038be:	9a06      	ldr	r2, [sp, #24]
 80038c0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 80038c4:	ebc2 0903 	rsb	r9, r2, r3
 80038c8:	ed9d 0b08 	vldr	d0, [sp, #32]
 80038cc:	f001 fa56 	bl	8004d7c <__ulp>
 80038d0:	4640      	mov	r0, r8
 80038d2:	ec53 2b10 	vmov	r2, r3, d0
 80038d6:	4649      	mov	r1, r9
 80038d8:	f7fc fe9a 	bl	8000610 <__aeabi_dmul>
 80038dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038e0:	f7fc fce4 	bl	80002ac <__adddf3>
 80038e4:	4682      	mov	sl, r0
 80038e6:	468b      	mov	fp, r1
 80038e8:	9b03      	ldr	r3, [sp, #12]
 80038ea:	bba3      	cbnz	r3, 8003956 <_strtod_r+0xb26>
 80038ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80038f0:	0d1b      	lsrs	r3, r3, #20
 80038f2:	9a06      	ldr	r2, [sp, #24]
 80038f4:	051b      	lsls	r3, r3, #20
 80038f6:	429a      	cmp	r2, r3
 80038f8:	46d8      	mov	r8, fp
 80038fa:	d12c      	bne.n	8003956 <_strtod_r+0xb26>
 80038fc:	4639      	mov	r1, r7
 80038fe:	4630      	mov	r0, r6
 8003900:	f7fd f920 	bl	8000b44 <__aeabi_d2iz>
 8003904:	f7fc fe1e 	bl	8000544 <__aeabi_i2d>
 8003908:	460b      	mov	r3, r1
 800390a:	4602      	mov	r2, r0
 800390c:	4639      	mov	r1, r7
 800390e:	4630      	mov	r0, r6
 8003910:	f7fc fcca 	bl	80002a8 <__aeabi_dsub>
 8003914:	9b07      	ldr	r3, [sp, #28]
 8003916:	4606      	mov	r6, r0
 8003918:	460f      	mov	r7, r1
 800391a:	b92b      	cbnz	r3, 8003928 <_strtod_r+0xaf8>
 800391c:	f1ba 0f00 	cmp.w	sl, #0
 8003920:	d102      	bne.n	8003928 <_strtod_r+0xaf8>
 8003922:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003926:	b183      	cbz	r3, 800394a <_strtod_r+0xb1a>
 8003928:	a335      	add	r3, pc, #212	; (adr r3, 8003a00 <_strtod_r+0xbd0>)
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	4630      	mov	r0, r6
 8003930:	4639      	mov	r1, r7
 8003932:	f7fd f8df 	bl	8000af4 <__aeabi_dcmplt>
 8003936:	2800      	cmp	r0, #0
 8003938:	d131      	bne.n	800399e <_strtod_r+0xb6e>
 800393a:	a333      	add	r3, pc, #204	; (adr r3, 8003a08 <_strtod_r+0xbd8>)
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	4630      	mov	r0, r6
 8003942:	4639      	mov	r1, r7
 8003944:	f7fd f8f4 	bl	8000b30 <__aeabi_dcmpgt>
 8003948:	e004      	b.n	8003954 <_strtod_r+0xb24>
 800394a:	a331      	add	r3, pc, #196	; (adr r3, 8003a10 <_strtod_r+0xbe0>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	f7fd f8d0 	bl	8000af4 <__aeabi_dcmplt>
 8003954:	bb18      	cbnz	r0, 800399e <_strtod_r+0xb6e>
 8003956:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003958:	9802      	ldr	r0, [sp, #8]
 800395a:	f000 ff7d 	bl	8004858 <_Bfree>
 800395e:	9904      	ldr	r1, [sp, #16]
 8003960:	9802      	ldr	r0, [sp, #8]
 8003962:	f000 ff79 	bl	8004858 <_Bfree>
 8003966:	4629      	mov	r1, r5
 8003968:	9802      	ldr	r0, [sp, #8]
 800396a:	f000 ff75 	bl	8004858 <_Bfree>
 800396e:	4621      	mov	r1, r4
 8003970:	9802      	ldr	r0, [sp, #8]
 8003972:	f000 ff71 	bl	8004858 <_Bfree>
 8003976:	e56d      	b.n	8003454 <_strtod_r+0x624>
 8003978:	9b03      	ldr	r3, [sp, #12]
 800397a:	b183      	cbz	r3, 800399e <_strtod_r+0xb6e>
 800397c:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <_strtod_r+0xbfc>)
 800397e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003980:	2300      	movs	r3, #0
 8003982:	930a      	str	r3, [sp, #40]	; 0x28
 8003984:	4650      	mov	r0, sl
 8003986:	4659      	mov	r1, fp
 8003988:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800398c:	f7fc fe40 	bl	8000610 <__aeabi_dmul>
 8003990:	4682      	mov	sl, r0
 8003992:	468b      	mov	fp, r1
 8003994:	b919      	cbnz	r1, 800399e <_strtod_r+0xb6e>
 8003996:	b910      	cbnz	r0, 800399e <_strtod_r+0xb6e>
 8003998:	9a02      	ldr	r2, [sp, #8]
 800399a:	2322      	movs	r3, #34	; 0x22
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80039a0:	9802      	ldr	r0, [sp, #8]
 80039a2:	f000 ff59 	bl	8004858 <_Bfree>
 80039a6:	9904      	ldr	r1, [sp, #16]
 80039a8:	9802      	ldr	r0, [sp, #8]
 80039aa:	f000 ff55 	bl	8004858 <_Bfree>
 80039ae:	4629      	mov	r1, r5
 80039b0:	9802      	ldr	r0, [sp, #8]
 80039b2:	f000 ff51 	bl	8004858 <_Bfree>
 80039b6:	9905      	ldr	r1, [sp, #20]
 80039b8:	9802      	ldr	r0, [sp, #8]
 80039ba:	f000 ff4d 	bl	8004858 <_Bfree>
 80039be:	4621      	mov	r1, r4
 80039c0:	9802      	ldr	r0, [sp, #8]
 80039c2:	f000 ff49 	bl	8004858 <_Bfree>
 80039c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80039c8:	b113      	cbz	r3, 80039d0 <_strtod_r+0xba0>
 80039ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80039cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039d2:	b11b      	cbz	r3, 80039dc <_strtod_r+0xbac>
 80039d4:	4652      	mov	r2, sl
 80039d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80039da:	e007      	b.n	80039ec <_strtod_r+0xbbc>
 80039dc:	4652      	mov	r2, sl
 80039de:	465b      	mov	r3, fp
 80039e0:	e004      	b.n	80039ec <_strtod_r+0xbbc>
 80039e2:	2500      	movs	r5, #0
 80039e4:	462a      	mov	r2, r5
 80039e6:	2101      	movs	r1, #1
 80039e8:	f7ff bb41 	b.w	800306e <_strtod_r+0x23e>
 80039ec:	ec43 2b10 	vmov	d0, r2, r3
 80039f0:	b01d      	add	sp, #116	; 0x74
 80039f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f6:	bf00      	nop
 80039f8:	ffc00000 	.word	0xffc00000
 80039fc:	41dfffff 	.word	0x41dfffff
 8003a00:	94a03595 	.word	0x94a03595
 8003a04:	3fdfffff 	.word	0x3fdfffff
 8003a08:	35afe535 	.word	0x35afe535
 8003a0c:	3fe00000 	.word	0x3fe00000
 8003a10:	94a03595 	.word	0x94a03595
 8003a14:	3fcfffff 	.word	0x3fcfffff
 8003a18:	3ff00000 	.word	0x3ff00000
 8003a1c:	3fe00000 	.word	0x3fe00000
 8003a20:	7fe00000 	.word	0x7fe00000
 8003a24:	7c9fffff 	.word	0x7c9fffff
 8003a28:	7fefffff 	.word	0x7fefffff
 8003a2c:	39500000 	.word	0x39500000

08003a30 <strtod>:
 8003a30:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <strtod+0xc>)
 8003a32:	460a      	mov	r2, r1
 8003a34:	4601      	mov	r1, r0
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	f7ff b9fa 	b.w	8002e30 <_strtod_r>
 8003a3c:	200000c8 	.word	0x200000c8

08003a40 <strtok>:
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <strtok+0x60>)
 8003a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a46:	681d      	ldr	r5, [r3, #0]
 8003a48:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003a4a:	4606      	mov	r6, r0
 8003a4c:	460f      	mov	r7, r1
 8003a4e:	b9fc      	cbnz	r4, 8003a90 <strtok+0x50>
 8003a50:	2050      	movs	r0, #80	; 0x50
 8003a52:	f7fe feb5 	bl	80027c0 <malloc>
 8003a56:	65a8      	str	r0, [r5, #88]	; 0x58
 8003a58:	6084      	str	r4, [r0, #8]
 8003a5a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a5c:	6004      	str	r4, [r0, #0]
 8003a5e:	6044      	str	r4, [r0, #4]
 8003a60:	611c      	str	r4, [r3, #16]
 8003a62:	60dc      	str	r4, [r3, #12]
 8003a64:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a66:	619c      	str	r4, [r3, #24]
 8003a68:	615c      	str	r4, [r3, #20]
 8003a6a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a6c:	62dc      	str	r4, [r3, #44]	; 0x2c
 8003a6e:	629c      	str	r4, [r3, #40]	; 0x28
 8003a70:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a72:	635c      	str	r4, [r3, #52]	; 0x34
 8003a74:	631c      	str	r4, [r3, #48]	; 0x30
 8003a76:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a78:	63dc      	str	r4, [r3, #60]	; 0x3c
 8003a7a:	639c      	str	r4, [r3, #56]	; 0x38
 8003a7c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a7e:	645c      	str	r4, [r3, #68]	; 0x44
 8003a80:	641c      	str	r4, [r3, #64]	; 0x40
 8003a82:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a84:	64dc      	str	r4, [r3, #76]	; 0x4c
 8003a86:	649c      	str	r4, [r3, #72]	; 0x48
 8003a88:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a8a:	771c      	strb	r4, [r3, #28]
 8003a8c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003a8e:	625c      	str	r4, [r3, #36]	; 0x24
 8003a90:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003a92:	4639      	mov	r1, r7
 8003a94:	4630      	mov	r0, r6
 8003a96:	2301      	movs	r3, #1
 8003a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9c:	f000 b802 	b.w	8003aa4 <__strtok_r>
 8003aa0:	200000c8 	.word	0x200000c8

08003aa4 <__strtok_r>:
 8003aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa6:	b948      	cbnz	r0, 8003abc <__strtok_r+0x18>
 8003aa8:	6810      	ldr	r0, [r2, #0]
 8003aaa:	b938      	cbnz	r0, 8003abc <__strtok_r+0x18>
 8003aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aae:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ab2:	b15e      	cbz	r6, 8003acc <__strtok_r+0x28>
 8003ab4:	42b5      	cmp	r5, r6
 8003ab6:	d1fa      	bne.n	8003aae <__strtok_r+0xa>
 8003ab8:	b12b      	cbz	r3, 8003ac6 <__strtok_r+0x22>
 8003aba:	4620      	mov	r0, r4
 8003abc:	4604      	mov	r4, r0
 8003abe:	460f      	mov	r7, r1
 8003ac0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003ac4:	e7f3      	b.n	8003aae <__strtok_r+0xa>
 8003ac6:	6014      	str	r4, [r2, #0]
 8003ac8:	7003      	strb	r3, [r0, #0]
 8003aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003acc:	b94d      	cbnz	r5, 8003ae2 <__strtok_r+0x3e>
 8003ace:	6015      	str	r5, [r2, #0]
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ad8:	42b5      	cmp	r5, r6
 8003ada:	d007      	beq.n	8003aec <__strtok_r+0x48>
 8003adc:	2e00      	cmp	r6, #0
 8003ade:	d1f9      	bne.n	8003ad4 <__strtok_r+0x30>
 8003ae0:	461c      	mov	r4, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	460f      	mov	r7, r1
 8003ae6:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003aea:	e7f3      	b.n	8003ad4 <__strtok_r+0x30>
 8003aec:	b115      	cbz	r5, 8003af4 <__strtok_r+0x50>
 8003aee:	2100      	movs	r1, #0
 8003af0:	7021      	strb	r1, [r4, #0]
 8003af2:	e000      	b.n	8003af6 <__strtok_r+0x52>
 8003af4:	462b      	mov	r3, r5
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003afc <time>:
 8003afc:	b513      	push	{r0, r1, r4, lr}
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <time+0x24>)
 8003b00:	4604      	mov	r4, r0
 8003b02:	2200      	movs	r2, #0
 8003b04:	4669      	mov	r1, sp
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	f000 fdb2 	bl	8004670 <_gettimeofday_r>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	db03      	blt.n	8003b18 <time+0x1c>
 8003b10:	9800      	ldr	r0, [sp, #0]
 8003b12:	b11c      	cbz	r4, 8003b1c <time+0x20>
 8003b14:	6020      	str	r0, [r4, #0]
 8003b16:	e001      	b.n	8003b1c <time+0x20>
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd10      	pop	{r4, pc}
 8003b20:	200000c8 	.word	0x200000c8

08003b24 <__tzcalc_limits>:
 8003b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b28:	4604      	mov	r4, r0
 8003b2a:	f000 fdb3 	bl	8004694 <__gettzinfo>
 8003b2e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8003b32:	429c      	cmp	r4, r3
 8003b34:	f340 8096 	ble.w	8003c64 <__tzcalc_limits+0x140>
 8003b38:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8003b3c:	18e3      	adds	r3, r4, r3
 8003b3e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8003b42:	109b      	asrs	r3, r3, #2
 8003b44:	f240 156d 	movw	r5, #365	; 0x16d
 8003b48:	fb05 3502 	mla	r5, r5, r2, r3
 8003b4c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8003b50:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003b54:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b58:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8003b5c:	442b      	add	r3, r5
 8003b5e:	18a5      	adds	r5, r4, r2
 8003b60:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003b64:	fb95 f5f2 	sdiv	r5, r5, r2
 8003b68:	441d      	add	r5, r3
 8003b6a:	2364      	movs	r3, #100	; 0x64
 8003b6c:	fb94 f7f2 	sdiv	r7, r4, r2
 8003b70:	fb94 f6f3 	sdiv	r6, r4, r3
 8003b74:	fb02 4717 	mls	r7, r2, r7, r4
 8003b78:	fb03 4616 	mls	r6, r3, r6, r4
 8003b7c:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8003b80:	fab7 fe87 	clz	lr, r7
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	f004 0303 	and.w	r3, r4, #3
 8003b8a:	6044      	str	r4, [r0, #4]
 8003b8c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8003b90:	4601      	mov	r1, r0
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	f04f 0c07 	mov.w	ip, #7
 8003b98:	7a0b      	ldrb	r3, [r1, #8]
 8003b9a:	2b4a      	cmp	r3, #74	; 0x4a
 8003b9c:	d10e      	bne.n	8003bbc <__tzcalc_limits+0x98>
 8003b9e:	694b      	ldr	r3, [r1, #20]
 8003ba0:	9a00      	ldr	r2, [sp, #0]
 8003ba2:	18ec      	adds	r4, r5, r3
 8003ba4:	b902      	cbnz	r2, 8003ba8 <__tzcalc_limits+0x84>
 8003ba6:	b906      	cbnz	r6, 8003baa <__tzcalc_limits+0x86>
 8003ba8:	b927      	cbnz	r7, 8003bb4 <__tzcalc_limits+0x90>
 8003baa:	2b3b      	cmp	r3, #59	; 0x3b
 8003bac:	bfd4      	ite	le
 8003bae:	2300      	movle	r3, #0
 8003bb0:	2301      	movgt	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <__tzcalc_limits+0x92>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4423      	add	r3, r4
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	e03f      	b.n	8003c3c <__tzcalc_limits+0x118>
 8003bbc:	2b44      	cmp	r3, #68	; 0x44
 8003bbe:	d102      	bne.n	8003bc6 <__tzcalc_limits+0xa2>
 8003bc0:	694b      	ldr	r3, [r1, #20]
 8003bc2:	442b      	add	r3, r5
 8003bc4:	e03a      	b.n	8003c3c <__tzcalc_limits+0x118>
 8003bc6:	9b00      	ldr	r3, [sp, #0]
 8003bc8:	b92b      	cbnz	r3, 8003bd6 <__tzcalc_limits+0xb2>
 8003bca:	2e00      	cmp	r6, #0
 8003bcc:	bf0c      	ite	eq
 8003bce:	46f0      	moveq	r8, lr
 8003bd0:	f04f 0801 	movne.w	r8, #1
 8003bd4:	e000      	b.n	8003bd8 <__tzcalc_limits+0xb4>
 8003bd6:	46f0      	mov	r8, lr
 8003bd8:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <__tzcalc_limits+0x148>)
 8003bda:	68cc      	ldr	r4, [r1, #12]
 8003bdc:	2230      	movs	r2, #48	; 0x30
 8003bde:	fb02 3808 	mla	r8, r2, r8, r3
 8003be2:	f1a8 0a04 	sub.w	sl, r8, #4
 8003be6:	46a9      	mov	r9, r5
 8003be8:	2301      	movs	r3, #1
 8003bea:	42a3      	cmp	r3, r4
 8003bec:	da04      	bge.n	8003bf8 <__tzcalc_limits+0xd4>
 8003bee:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	44d9      	add	r9, fp
 8003bf6:	e7f8      	b.n	8003bea <__tzcalc_limits+0xc6>
 8003bf8:	f109 0304 	add.w	r3, r9, #4
 8003bfc:	fb93 fbfc 	sdiv	fp, r3, ip
 8003c00:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8003c04:	2c01      	cmp	r4, #1
 8003c06:	ebca 0a03 	rsb	sl, sl, r3
 8003c0a:	694b      	ldr	r3, [r1, #20]
 8003c0c:	bfb8      	it	lt
 8003c0e:	2401      	movlt	r4, #1
 8003c10:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003c14:	ebb3 0a0a 	subs.w	sl, r3, sl
 8003c18:	690b      	ldr	r3, [r1, #16]
 8003c1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003c1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c22:	bf48      	it	mi
 8003c24:	f10a 0a07 	addmi.w	sl, sl, #7
 8003c28:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003c2c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8003c30:	4453      	add	r3, sl
 8003c32:	42a3      	cmp	r3, r4
 8003c34:	db01      	blt.n	8003c3a <__tzcalc_limits+0x116>
 8003c36:	3b07      	subs	r3, #7
 8003c38:	e7fb      	b.n	8003c32 <__tzcalc_limits+0x10e>
 8003c3a:	444b      	add	r3, r9
 8003c3c:	698c      	ldr	r4, [r1, #24]
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <__tzcalc_limits+0x14c>)
 8003c40:	fb02 4303 	mla	r3, r2, r3, r4
 8003c44:	6a0c      	ldr	r4, [r1, #32]
 8003c46:	4423      	add	r3, r4
 8003c48:	f841 3f1c 	str.w	r3, [r1, #28]!
 8003c4c:	9b01      	ldr	r3, [sp, #4]
 8003c4e:	4299      	cmp	r1, r3
 8003c50:	d1a2      	bne.n	8003b98 <__tzcalc_limits+0x74>
 8003c52:	69c3      	ldr	r3, [r0, #28]
 8003c54:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003c56:	4293      	cmp	r3, r2
 8003c58:	bfac      	ite	ge
 8003c5a:	2300      	movge	r3, #0
 8003c5c:	2301      	movlt	r3, #1
 8003c5e:	6003      	str	r3, [r0, #0]
 8003c60:	2001      	movs	r0, #1
 8003c62:	e000      	b.n	8003c66 <__tzcalc_limits+0x142>
 8003c64:	2000      	movs	r0, #0
 8003c66:	b003      	add	sp, #12
 8003c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c6c:	08005ad4 	.word	0x08005ad4
 8003c70:	00015180 	.word	0x00015180

08003c74 <__tz_lock>:
 8003c74:	4770      	bx	lr

08003c76 <__tz_unlock>:
 8003c76:	4770      	bx	lr

08003c78 <_tzset_unlocked>:
 8003c78:	4b01      	ldr	r3, [pc, #4]	; (8003c80 <_tzset_unlocked+0x8>)
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	f000 b802 	b.w	8003c84 <_tzset_unlocked_r>
 8003c80:	200000c8 	.word	0x200000c8

08003c84 <_tzset_unlocked_r>:
 8003c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c88:	b08d      	sub	sp, #52	; 0x34
 8003c8a:	4607      	mov	r7, r0
 8003c8c:	f000 fd02 	bl	8004694 <__gettzinfo>
 8003c90:	49b0      	ldr	r1, [pc, #704]	; (8003f54 <_tzset_unlocked_r+0x2d0>)
 8003c92:	4eb1      	ldr	r6, [pc, #708]	; (8003f58 <_tzset_unlocked_r+0x2d4>)
 8003c94:	4604      	mov	r4, r0
 8003c96:	4638      	mov	r0, r7
 8003c98:	f000 fce2 	bl	8004660 <_getenv_r>
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	b960      	cbnz	r0, 8003cba <_tzset_unlocked_r+0x36>
 8003ca0:	4bae      	ldr	r3, [pc, #696]	; (8003f5c <_tzset_unlocked_r+0x2d8>)
 8003ca2:	4aaf      	ldr	r2, [pc, #700]	; (8003f60 <_tzset_unlocked_r+0x2dc>)
 8003ca4:	6018      	str	r0, [r3, #0]
 8003ca6:	4baf      	ldr	r3, [pc, #700]	; (8003f64 <_tzset_unlocked_r+0x2e0>)
 8003ca8:	6018      	str	r0, [r3, #0]
 8003caa:	4baf      	ldr	r3, [pc, #700]	; (8003f68 <_tzset_unlocked_r+0x2e4>)
 8003cac:	6830      	ldr	r0, [r6, #0]
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	f7fe fd8d 	bl	80027d0 <free>
 8003cb6:	6035      	str	r5, [r6, #0]
 8003cb8:	e148      	b.n	8003f4c <_tzset_unlocked_r+0x2c8>
 8003cba:	6831      	ldr	r1, [r6, #0]
 8003cbc:	b979      	cbnz	r1, 8003cde <_tzset_unlocked_r+0x5a>
 8003cbe:	6830      	ldr	r0, [r6, #0]
 8003cc0:	f7fe fd86 	bl	80027d0 <free>
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f7fc fa8d 	bl	80001e4 <strlen>
 8003cca:	1c41      	adds	r1, r0, #1
 8003ccc:	4638      	mov	r0, r7
 8003cce:	f7ff f823 	bl	8002d18 <_malloc_r>
 8003cd2:	6030      	str	r0, [r6, #0]
 8003cd4:	b148      	cbz	r0, 8003cea <_tzset_unlocked_r+0x66>
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	f001 f9b4 	bl	8005044 <strcpy>
 8003cdc:	e005      	b.n	8003cea <_tzset_unlocked_r+0x66>
 8003cde:	f7fc fa77 	bl	80001d0 <strcmp>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	f000 8132 	beq.w	8003f4c <_tzset_unlocked_r+0x2c8>
 8003ce8:	e7e9      	b.n	8003cbe <_tzset_unlocked_r+0x3a>
 8003cea:	782b      	ldrb	r3, [r5, #0]
 8003cec:	4a9f      	ldr	r2, [pc, #636]	; (8003f6c <_tzset_unlocked_r+0x2e8>)
 8003cee:	49a0      	ldr	r1, [pc, #640]	; (8003f70 <_tzset_unlocked_r+0x2ec>)
 8003cf0:	2b3a      	cmp	r3, #58	; 0x3a
 8003cf2:	bf08      	it	eq
 8003cf4:	3501      	addeq	r5, #1
 8003cf6:	ae0a      	add	r6, sp, #40	; 0x28
 8003cf8:	4633      	mov	r3, r6
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f001 f976 	bl	8004fec <siscanf>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	f340 8123 	ble.w	8003f4c <_tzset_unlocked_r+0x2c8>
 8003d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d08:	18ef      	adds	r7, r5, r3
 8003d0a:	5ceb      	ldrb	r3, [r5, r3]
 8003d0c:	2b2d      	cmp	r3, #45	; 0x2d
 8003d0e:	d103      	bne.n	8003d18 <_tzset_unlocked_r+0x94>
 8003d10:	3701      	adds	r7, #1
 8003d12:	f04f 35ff 	mov.w	r5, #4294967295
 8003d16:	e003      	b.n	8003d20 <_tzset_unlocked_r+0x9c>
 8003d18:	2b2b      	cmp	r3, #43	; 0x2b
 8003d1a:	bf08      	it	eq
 8003d1c:	3701      	addeq	r7, #1
 8003d1e:	2501      	movs	r5, #1
 8003d20:	f10d 0a20 	add.w	sl, sp, #32
 8003d24:	f10d 0b1e 	add.w	fp, sp, #30
 8003d28:	f04f 0800 	mov.w	r8, #0
 8003d2c:	9603      	str	r6, [sp, #12]
 8003d2e:	f8cd a008 	str.w	sl, [sp, #8]
 8003d32:	9601      	str	r6, [sp, #4]
 8003d34:	f8cd b000 	str.w	fp, [sp]
 8003d38:	4633      	mov	r3, r6
 8003d3a:	aa07      	add	r2, sp, #28
 8003d3c:	498d      	ldr	r1, [pc, #564]	; (8003f74 <_tzset_unlocked_r+0x2f0>)
 8003d3e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8003d42:	4638      	mov	r0, r7
 8003d44:	f8ad 8020 	strh.w	r8, [sp, #32]
 8003d48:	f001 f950 	bl	8004fec <siscanf>
 8003d4c:	4540      	cmp	r0, r8
 8003d4e:	f340 80fd 	ble.w	8003f4c <_tzset_unlocked_r+0x2c8>
 8003d52:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8003d56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8003d5a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8003f80 <_tzset_unlocked_r+0x2fc>
 8003d5e:	213c      	movs	r1, #60	; 0x3c
 8003d60:	fb01 3302 	mla	r3, r1, r2, r3
 8003d64:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8003d68:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003d6c:	fb01 3302 	mla	r3, r1, r2, r3
 8003d70:	435d      	muls	r5, r3
 8003d72:	6225      	str	r5, [r4, #32]
 8003d74:	4d7c      	ldr	r5, [pc, #496]	; (8003f68 <_tzset_unlocked_r+0x2e4>)
 8003d76:	4b7d      	ldr	r3, [pc, #500]	; (8003f6c <_tzset_unlocked_r+0x2e8>)
 8003d78:	602b      	str	r3, [r5, #0]
 8003d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d7c:	497c      	ldr	r1, [pc, #496]	; (8003f70 <_tzset_unlocked_r+0x2ec>)
 8003d7e:	441f      	add	r7, r3
 8003d80:	464a      	mov	r2, r9
 8003d82:	4633      	mov	r3, r6
 8003d84:	4638      	mov	r0, r7
 8003d86:	f001 f931 	bl	8004fec <siscanf>
 8003d8a:	4540      	cmp	r0, r8
 8003d8c:	dc08      	bgt.n	8003da0 <_tzset_unlocked_r+0x11c>
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	606b      	str	r3, [r5, #4]
 8003d92:	4b72      	ldr	r3, [pc, #456]	; (8003f5c <_tzset_unlocked_r+0x2d8>)
 8003d94:	6a22      	ldr	r2, [r4, #32]
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	4b72      	ldr	r3, [pc, #456]	; (8003f64 <_tzset_unlocked_r+0x2e0>)
 8003d9a:	f8c3 8000 	str.w	r8, [r3]
 8003d9e:	e0d5      	b.n	8003f4c <_tzset_unlocked_r+0x2c8>
 8003da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003da2:	f8c5 9004 	str.w	r9, [r5, #4]
 8003da6:	18fd      	adds	r5, r7, r3
 8003da8:	5cfb      	ldrb	r3, [r7, r3]
 8003daa:	2b2d      	cmp	r3, #45	; 0x2d
 8003dac:	d103      	bne.n	8003db6 <_tzset_unlocked_r+0x132>
 8003dae:	3501      	adds	r5, #1
 8003db0:	f04f 37ff 	mov.w	r7, #4294967295
 8003db4:	e003      	b.n	8003dbe <_tzset_unlocked_r+0x13a>
 8003db6:	2b2b      	cmp	r3, #43	; 0x2b
 8003db8:	bf08      	it	eq
 8003dba:	3501      	addeq	r5, #1
 8003dbc:	2701      	movs	r7, #1
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003dc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003dc8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003dcc:	930a      	str	r3, [sp, #40]	; 0x28
 8003dce:	9603      	str	r6, [sp, #12]
 8003dd0:	f8cd a008 	str.w	sl, [sp, #8]
 8003dd4:	9601      	str	r6, [sp, #4]
 8003dd6:	f8cd b000 	str.w	fp, [sp]
 8003dda:	4633      	mov	r3, r6
 8003ddc:	aa07      	add	r2, sp, #28
 8003dde:	4965      	ldr	r1, [pc, #404]	; (8003f74 <_tzset_unlocked_r+0x2f0>)
 8003de0:	4628      	mov	r0, r5
 8003de2:	f001 f903 	bl	8004fec <siscanf>
 8003de6:	2800      	cmp	r0, #0
 8003de8:	dc04      	bgt.n	8003df4 <_tzset_unlocked_r+0x170>
 8003dea:	6a23      	ldr	r3, [r4, #32]
 8003dec:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8003df0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003df2:	e00e      	b.n	8003e12 <_tzset_unlocked_r+0x18e>
 8003df4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8003df8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8003dfc:	213c      	movs	r1, #60	; 0x3c
 8003dfe:	fb01 3302 	mla	r3, r1, r2, r3
 8003e02:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8003e06:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003e0a:	fb01 3302 	mla	r3, r1, r2, r3
 8003e0e:	435f      	muls	r7, r3
 8003e10:	63e7      	str	r7, [r4, #60]	; 0x3c
 8003e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e14:	4627      	mov	r7, r4
 8003e16:	441d      	add	r5, r3
 8003e18:	f04f 0900 	mov.w	r9, #0
 8003e1c:	782b      	ldrb	r3, [r5, #0]
 8003e1e:	2b2c      	cmp	r3, #44	; 0x2c
 8003e20:	bf08      	it	eq
 8003e22:	3501      	addeq	r5, #1
 8003e24:	f895 8000 	ldrb.w	r8, [r5]
 8003e28:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8003e2c:	d126      	bne.n	8003e7c <_tzset_unlocked_r+0x1f8>
 8003e2e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8003e32:	9302      	str	r3, [sp, #8]
 8003e34:	ab09      	add	r3, sp, #36	; 0x24
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	9603      	str	r6, [sp, #12]
 8003e3a:	9601      	str	r6, [sp, #4]
 8003e3c:	4633      	mov	r3, r6
 8003e3e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8003e42:	494d      	ldr	r1, [pc, #308]	; (8003f78 <_tzset_unlocked_r+0x2f4>)
 8003e44:	4628      	mov	r0, r5
 8003e46:	f001 f8d1 	bl	8004fec <siscanf>
 8003e4a:	2803      	cmp	r0, #3
 8003e4c:	d17e      	bne.n	8003f4c <_tzset_unlocked_r+0x2c8>
 8003e4e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8003e52:	1e4b      	subs	r3, r1, #1
 8003e54:	2b0b      	cmp	r3, #11
 8003e56:	d879      	bhi.n	8003f4c <_tzset_unlocked_r+0x2c8>
 8003e58:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8003e5c:	1e53      	subs	r3, r2, #1
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d874      	bhi.n	8003f4c <_tzset_unlocked_r+0x2c8>
 8003e62:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8003e66:	2b06      	cmp	r3, #6
 8003e68:	d870      	bhi.n	8003f4c <_tzset_unlocked_r+0x2c8>
 8003e6a:	f887 8008 	strb.w	r8, [r7, #8]
 8003e6e:	60f9      	str	r1, [r7, #12]
 8003e70:	613a      	str	r2, [r7, #16]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e76:	eb05 0803 	add.w	r8, r5, r3
 8003e7a:	e02a      	b.n	8003ed2 <_tzset_unlocked_r+0x24e>
 8003e7c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8003e80:	bf06      	itte	eq
 8003e82:	3501      	addeq	r5, #1
 8003e84:	4643      	moveq	r3, r8
 8003e86:	2344      	movne	r3, #68	; 0x44
 8003e88:	220a      	movs	r2, #10
 8003e8a:	a90b      	add	r1, sp, #44	; 0x2c
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	9305      	str	r3, [sp, #20]
 8003e90:	f001 f974 	bl	800517c <strtoul>
 8003e94:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003e98:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8003e9c:	4545      	cmp	r5, r8
 8003e9e:	9b05      	ldr	r3, [sp, #20]
 8003ea0:	d114      	bne.n	8003ecc <_tzset_unlocked_r+0x248>
 8003ea2:	234d      	movs	r3, #77	; 0x4d
 8003ea4:	f1b9 0f00 	cmp.w	r9, #0
 8003ea8:	d107      	bne.n	8003eba <_tzset_unlocked_r+0x236>
 8003eaa:	7223      	strb	r3, [r4, #8]
 8003eac:	2303      	movs	r3, #3
 8003eae:	60e3      	str	r3, [r4, #12]
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	6123      	str	r3, [r4, #16]
 8003eb4:	f8c4 9014 	str.w	r9, [r4, #20]
 8003eb8:	e00b      	b.n	8003ed2 <_tzset_unlocked_r+0x24e>
 8003eba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003ebe:	230b      	movs	r3, #11
 8003ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	6323      	str	r3, [r4, #48]	; 0x30
 8003eca:	e002      	b.n	8003ed2 <_tzset_unlocked_r+0x24e>
 8003ecc:	b280      	uxth	r0, r0
 8003ece:	723b      	strb	r3, [r7, #8]
 8003ed0:	6178      	str	r0, [r7, #20]
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003ede:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ee4:	f898 3000 	ldrb.w	r3, [r8]
 8003ee8:	2b2f      	cmp	r3, #47	; 0x2f
 8003eea:	d10b      	bne.n	8003f04 <_tzset_unlocked_r+0x280>
 8003eec:	9603      	str	r6, [sp, #12]
 8003eee:	f8cd a008 	str.w	sl, [sp, #8]
 8003ef2:	9601      	str	r6, [sp, #4]
 8003ef4:	f8cd b000 	str.w	fp, [sp]
 8003ef8:	4633      	mov	r3, r6
 8003efa:	aa07      	add	r2, sp, #28
 8003efc:	491f      	ldr	r1, [pc, #124]	; (8003f7c <_tzset_unlocked_r+0x2f8>)
 8003efe:	4640      	mov	r0, r8
 8003f00:	f001 f874 	bl	8004fec <siscanf>
 8003f04:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8003f08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8003f0c:	213c      	movs	r1, #60	; 0x3c
 8003f0e:	fb01 3302 	mla	r3, r1, r2, r3
 8003f12:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8003f16:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003f1a:	fb01 3302 	mla	r3, r1, r2, r3
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003f22:	f109 0901 	add.w	r9, r9, #1
 8003f26:	f1b9 0f02 	cmp.w	r9, #2
 8003f2a:	4445      	add	r5, r8
 8003f2c:	f107 071c 	add.w	r7, r7, #28
 8003f30:	f47f af74 	bne.w	8003e1c <_tzset_unlocked_r+0x198>
 8003f34:	6860      	ldr	r0, [r4, #4]
 8003f36:	f7ff fdf5 	bl	8003b24 <__tzcalc_limits>
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <_tzset_unlocked_r+0x2d8>)
 8003f3c:	6a22      	ldr	r2, [r4, #32]
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <_tzset_unlocked_r+0x2e0>)
 8003f46:	bf18      	it	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	b00d      	add	sp, #52	; 0x34
 8003f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	08005b90 	.word	0x08005b90
 8003f58:	20000148 	.word	0x20000148
 8003f5c:	20000150 	.word	0x20000150
 8003f60:	08005b93 	.word	0x08005b93
 8003f64:	2000014c 	.word	0x2000014c
 8003f68:	20000020 	.word	0x20000020
 8003f6c:	2000013b 	.word	0x2000013b
 8003f70:	08005b97 	.word	0x08005b97
 8003f74:	08005bba 	.word	0x08005bba
 8003f78:	08005ba6 	.word	0x08005ba6
 8003f7c:	08005bb9 	.word	0x08005bb9
 8003f80:	20000130 	.word	0x20000130

08003f84 <div>:
 8003f84:	2900      	cmp	r1, #0
 8003f86:	b510      	push	{r4, lr}
 8003f88:	fb91 f4f2 	sdiv	r4, r1, r2
 8003f8c:	fb02 1314 	mls	r3, r2, r4, r1
 8003f90:	db04      	blt.n	8003f9c <div+0x18>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	da07      	bge.n	8003fa6 <div+0x22>
 8003f96:	3401      	adds	r4, #1
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	e004      	b.n	8003fa6 <div+0x22>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bfc4      	itt	gt
 8003fa0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8003fa4:	189b      	addgt	r3, r3, r2
 8003fa6:	6004      	str	r4, [r0, #0]
 8003fa8:	6043      	str	r3, [r0, #4]
 8003faa:	bd10      	pop	{r4, pc}

08003fac <rshift>:
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	6906      	ldr	r6, [r0, #16]
 8003fb0:	114b      	asrs	r3, r1, #5
 8003fb2:	42b3      	cmp	r3, r6
 8003fb4:	f100 0514 	add.w	r5, r0, #20
 8003fb8:	da27      	bge.n	800400a <rshift+0x5e>
 8003fba:	f011 011f 	ands.w	r1, r1, #31
 8003fbe:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8003fc2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8003fc6:	d101      	bne.n	8003fcc <rshift+0x20>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	e016      	b.n	8003ffa <rshift+0x4e>
 8003fcc:	1d14      	adds	r4, r2, #4
 8003fce:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8003fd2:	f1c1 0e20 	rsb	lr, r1, #32
 8003fd6:	40ca      	lsrs	r2, r1
 8003fd8:	462b      	mov	r3, r5
 8003fda:	42b4      	cmp	r4, r6
 8003fdc:	d209      	bcs.n	8003ff2 <rshift+0x46>
 8003fde:	6827      	ldr	r7, [r4, #0]
 8003fe0:	fa07 f70e 	lsl.w	r7, r7, lr
 8003fe4:	433a      	orrs	r2, r7
 8003fe6:	f843 2b04 	str.w	r2, [r3], #4
 8003fea:	f854 2b04 	ldr.w	r2, [r4], #4
 8003fee:	40ca      	lsrs	r2, r1
 8003ff0:	e7f3      	b.n	8003fda <rshift+0x2e>
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	b152      	cbz	r2, 800400c <rshift+0x60>
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	e008      	b.n	800400c <rshift+0x60>
 8003ffa:	42b2      	cmp	r2, r6
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	d205      	bcs.n	800400c <rshift+0x60>
 8004000:	f852 3b04 	ldr.w	r3, [r2], #4
 8004004:	f841 3b04 	str.w	r3, [r1], #4
 8004008:	e7f7      	b.n	8003ffa <rshift+0x4e>
 800400a:	462b      	mov	r3, r5
 800400c:	1b5b      	subs	r3, r3, r5
 800400e:	109b      	asrs	r3, r3, #2
 8004010:	6103      	str	r3, [r0, #16]
 8004012:	b903      	cbnz	r3, 8004016 <rshift+0x6a>
 8004014:	6143      	str	r3, [r0, #20]
 8004016:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004018 <__hexdig_fun>:
 8004018:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800401c:	2b09      	cmp	r3, #9
 800401e:	d801      	bhi.n	8004024 <__hexdig_fun+0xc>
 8004020:	3820      	subs	r0, #32
 8004022:	e00a      	b.n	800403a <__hexdig_fun+0x22>
 8004024:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004028:	2b05      	cmp	r3, #5
 800402a:	d801      	bhi.n	8004030 <__hexdig_fun+0x18>
 800402c:	3847      	subs	r0, #71	; 0x47
 800402e:	e004      	b.n	800403a <__hexdig_fun+0x22>
 8004030:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004034:	2b05      	cmp	r3, #5
 8004036:	d802      	bhi.n	800403e <__hexdig_fun+0x26>
 8004038:	3827      	subs	r0, #39	; 0x27
 800403a:	b2c0      	uxtb	r0, r0
 800403c:	4770      	bx	lr
 800403e:	2000      	movs	r0, #0
 8004040:	4770      	bx	lr

08004042 <__gethex>:
 8004042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004046:	b08b      	sub	sp, #44	; 0x2c
 8004048:	468a      	mov	sl, r1
 800404a:	4690      	mov	r8, r2
 800404c:	9306      	str	r3, [sp, #24]
 800404e:	9002      	str	r0, [sp, #8]
 8004050:	f000 fbbc 	bl	80047cc <_localeconv_r>
 8004054:	6803      	ldr	r3, [r0, #0]
 8004056:	9303      	str	r3, [sp, #12]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc f8c3 	bl	80001e4 <strlen>
 800405e:	9b03      	ldr	r3, [sp, #12]
 8004060:	9001      	str	r0, [sp, #4]
 8004062:	4403      	add	r3, r0
 8004064:	f04f 0b00 	mov.w	fp, #0
 8004068:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800406c:	9307      	str	r3, [sp, #28]
 800406e:	f8da 3000 	ldr.w	r3, [sl]
 8004072:	3302      	adds	r3, #2
 8004074:	461f      	mov	r7, r3
 8004076:	f813 0b01 	ldrb.w	r0, [r3], #1
 800407a:	2830      	cmp	r0, #48	; 0x30
 800407c:	d102      	bne.n	8004084 <__gethex+0x42>
 800407e:	f10b 0b01 	add.w	fp, fp, #1
 8004082:	e7f7      	b.n	8004074 <__gethex+0x32>
 8004084:	f7ff ffc8 	bl	8004018 <__hexdig_fun>
 8004088:	4604      	mov	r4, r0
 800408a:	b9e0      	cbnz	r0, 80040c6 <__gethex+0x84>
 800408c:	9a01      	ldr	r2, [sp, #4]
 800408e:	9903      	ldr	r1, [sp, #12]
 8004090:	4638      	mov	r0, r7
 8004092:	f000 ffdf 	bl	8005054 <strncmp>
 8004096:	2800      	cmp	r0, #0
 8004098:	d134      	bne.n	8004104 <__gethex+0xc2>
 800409a:	9b01      	ldr	r3, [sp, #4]
 800409c:	5cf8      	ldrb	r0, [r7, r3]
 800409e:	18fe      	adds	r6, r7, r3
 80040a0:	f7ff ffba 	bl	8004018 <__hexdig_fun>
 80040a4:	b380      	cbz	r0, 8004108 <__gethex+0xc6>
 80040a6:	4633      	mov	r3, r6
 80040a8:	7818      	ldrb	r0, [r3, #0]
 80040aa:	2830      	cmp	r0, #48	; 0x30
 80040ac:	461f      	mov	r7, r3
 80040ae:	f103 0301 	add.w	r3, r3, #1
 80040b2:	d0f9      	beq.n	80040a8 <__gethex+0x66>
 80040b4:	f7ff ffb0 	bl	8004018 <__hexdig_fun>
 80040b8:	fab0 f580 	clz	r5, r0
 80040bc:	096d      	lsrs	r5, r5, #5
 80040be:	4634      	mov	r4, r6
 80040c0:	f04f 0b01 	mov.w	fp, #1
 80040c4:	e001      	b.n	80040ca <__gethex+0x88>
 80040c6:	2500      	movs	r5, #0
 80040c8:	462c      	mov	r4, r5
 80040ca:	463a      	mov	r2, r7
 80040cc:	4616      	mov	r6, r2
 80040ce:	3201      	adds	r2, #1
 80040d0:	7830      	ldrb	r0, [r6, #0]
 80040d2:	f7ff ffa1 	bl	8004018 <__hexdig_fun>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d1f8      	bne.n	80040cc <__gethex+0x8a>
 80040da:	9a01      	ldr	r2, [sp, #4]
 80040dc:	9903      	ldr	r1, [sp, #12]
 80040de:	4630      	mov	r0, r6
 80040e0:	f000 ffb8 	bl	8005054 <strncmp>
 80040e4:	b950      	cbnz	r0, 80040fc <__gethex+0xba>
 80040e6:	b954      	cbnz	r4, 80040fe <__gethex+0xbc>
 80040e8:	9b01      	ldr	r3, [sp, #4]
 80040ea:	18f4      	adds	r4, r6, r3
 80040ec:	4622      	mov	r2, r4
 80040ee:	4616      	mov	r6, r2
 80040f0:	3201      	adds	r2, #1
 80040f2:	7830      	ldrb	r0, [r6, #0]
 80040f4:	f7ff ff90 	bl	8004018 <__hexdig_fun>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d1f8      	bne.n	80040ee <__gethex+0xac>
 80040fc:	b134      	cbz	r4, 800410c <__gethex+0xca>
 80040fe:	1ba4      	subs	r4, r4, r6
 8004100:	00a4      	lsls	r4, r4, #2
 8004102:	e003      	b.n	800410c <__gethex+0xca>
 8004104:	463e      	mov	r6, r7
 8004106:	e000      	b.n	800410a <__gethex+0xc8>
 8004108:	4604      	mov	r4, r0
 800410a:	2501      	movs	r5, #1
 800410c:	7833      	ldrb	r3, [r6, #0]
 800410e:	2b50      	cmp	r3, #80	; 0x50
 8004110:	d001      	beq.n	8004116 <__gethex+0xd4>
 8004112:	2b70      	cmp	r3, #112	; 0x70
 8004114:	d12a      	bne.n	800416c <__gethex+0x12a>
 8004116:	7873      	ldrb	r3, [r6, #1]
 8004118:	2b2b      	cmp	r3, #43	; 0x2b
 800411a:	d008      	beq.n	800412e <__gethex+0xec>
 800411c:	2b2d      	cmp	r3, #45	; 0x2d
 800411e:	d003      	beq.n	8004128 <__gethex+0xe6>
 8004120:	1c71      	adds	r1, r6, #1
 8004122:	f04f 0900 	mov.w	r9, #0
 8004126:	e005      	b.n	8004134 <__gethex+0xf2>
 8004128:	f04f 0901 	mov.w	r9, #1
 800412c:	e001      	b.n	8004132 <__gethex+0xf0>
 800412e:	f04f 0900 	mov.w	r9, #0
 8004132:	1cb1      	adds	r1, r6, #2
 8004134:	7808      	ldrb	r0, [r1, #0]
 8004136:	f7ff ff6f 	bl	8004018 <__hexdig_fun>
 800413a:	1e43      	subs	r3, r0, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b18      	cmp	r3, #24
 8004140:	d814      	bhi.n	800416c <__gethex+0x12a>
 8004142:	f1a0 0210 	sub.w	r2, r0, #16
 8004146:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800414a:	f7ff ff65 	bl	8004018 <__hexdig_fun>
 800414e:	1e43      	subs	r3, r0, #1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b18      	cmp	r3, #24
 8004154:	d804      	bhi.n	8004160 <__gethex+0x11e>
 8004156:	230a      	movs	r3, #10
 8004158:	fb03 0202 	mla	r2, r3, r2, r0
 800415c:	3a10      	subs	r2, #16
 800415e:	e7f2      	b.n	8004146 <__gethex+0x104>
 8004160:	f1b9 0f00 	cmp.w	r9, #0
 8004164:	d000      	beq.n	8004168 <__gethex+0x126>
 8004166:	4252      	negs	r2, r2
 8004168:	4414      	add	r4, r2
 800416a:	e000      	b.n	800416e <__gethex+0x12c>
 800416c:	4631      	mov	r1, r6
 800416e:	f8ca 1000 	str.w	r1, [sl]
 8004172:	b12d      	cbz	r5, 8004180 <__gethex+0x13e>
 8004174:	f1bb 0f00 	cmp.w	fp, #0
 8004178:	bf14      	ite	ne
 800417a:	2000      	movne	r0, #0
 800417c:	2006      	moveq	r0, #6
 800417e:	e17c      	b.n	800447a <__gethex+0x438>
 8004180:	1bf3      	subs	r3, r6, r7
 8004182:	3b01      	subs	r3, #1
 8004184:	4629      	mov	r1, r5
 8004186:	2b07      	cmp	r3, #7
 8004188:	dd02      	ble.n	8004190 <__gethex+0x14e>
 800418a:	3101      	adds	r1, #1
 800418c:	105b      	asrs	r3, r3, #1
 800418e:	e7fa      	b.n	8004186 <__gethex+0x144>
 8004190:	9802      	ldr	r0, [sp, #8]
 8004192:	f000 fb2c 	bl	80047ee <_Balloc>
 8004196:	9b01      	ldr	r3, [sp, #4]
 8004198:	f100 0a14 	add.w	sl, r0, #20
 800419c:	f04f 0900 	mov.w	r9, #0
 80041a0:	f1c3 0301 	rsb	r3, r3, #1
 80041a4:	4605      	mov	r5, r0
 80041a6:	f8cd a010 	str.w	sl, [sp, #16]
 80041aa:	46cb      	mov	fp, r9
 80041ac:	9308      	str	r3, [sp, #32]
 80041ae:	42b7      	cmp	r7, r6
 80041b0:	d22f      	bcs.n	8004212 <__gethex+0x1d0>
 80041b2:	1e73      	subs	r3, r6, #1
 80041b4:	9305      	str	r3, [sp, #20]
 80041b6:	9a07      	ldr	r2, [sp, #28]
 80041b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00b      	beq.n	80041d8 <__gethex+0x196>
 80041c0:	f1bb 0f20 	cmp.w	fp, #32
 80041c4:	d116      	bne.n	80041f4 <__gethex+0x1b2>
 80041c6:	9b04      	ldr	r3, [sp, #16]
 80041c8:	f8c3 9000 	str.w	r9, [r3]
 80041cc:	3304      	adds	r3, #4
 80041ce:	f04f 0900 	mov.w	r9, #0
 80041d2:	9304      	str	r3, [sp, #16]
 80041d4:	46cb      	mov	fp, r9
 80041d6:	e00d      	b.n	80041f4 <__gethex+0x1b2>
 80041d8:	9b05      	ldr	r3, [sp, #20]
 80041da:	9a08      	ldr	r2, [sp, #32]
 80041dc:	4413      	add	r3, r2
 80041de:	429f      	cmp	r7, r3
 80041e0:	d8ee      	bhi.n	80041c0 <__gethex+0x17e>
 80041e2:	4618      	mov	r0, r3
 80041e4:	9a01      	ldr	r2, [sp, #4]
 80041e6:	9903      	ldr	r1, [sp, #12]
 80041e8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ea:	f000 ff33 	bl	8005054 <strncmp>
 80041ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f0:	b168      	cbz	r0, 800420e <__gethex+0x1cc>
 80041f2:	e7e5      	b.n	80041c0 <__gethex+0x17e>
 80041f4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80041f8:	f7ff ff0e 	bl	8004018 <__hexdig_fun>
 80041fc:	f000 000f 	and.w	r0, r0, #15
 8004200:	fa00 f00b 	lsl.w	r0, r0, fp
 8004204:	9b05      	ldr	r3, [sp, #20]
 8004206:	ea49 0900 	orr.w	r9, r9, r0
 800420a:	f10b 0b04 	add.w	fp, fp, #4
 800420e:	461e      	mov	r6, r3
 8004210:	e7cd      	b.n	80041ae <__gethex+0x16c>
 8004212:	9804      	ldr	r0, [sp, #16]
 8004214:	f840 9b04 	str.w	r9, [r0], #4
 8004218:	ebca 0000 	rsb	r0, sl, r0
 800421c:	1080      	asrs	r0, r0, #2
 800421e:	6128      	str	r0, [r5, #16]
 8004220:	0147      	lsls	r7, r0, #5
 8004222:	4648      	mov	r0, r9
 8004224:	f000 fba8 	bl	8004978 <__hi0bits>
 8004228:	f8d8 6000 	ldr.w	r6, [r8]
 800422c:	1a38      	subs	r0, r7, r0
 800422e:	42b0      	cmp	r0, r6
 8004230:	dd26      	ble.n	8004280 <__gethex+0x23e>
 8004232:	1b87      	subs	r7, r0, r6
 8004234:	4639      	mov	r1, r7
 8004236:	4628      	mov	r0, r5
 8004238:	f000 fea7 	bl	8004f8a <__any_on>
 800423c:	b1c8      	cbz	r0, 8004272 <__gethex+0x230>
 800423e:	1e7b      	subs	r3, r7, #1
 8004240:	1159      	asrs	r1, r3, #5
 8004242:	f003 021f 	and.w	r2, r3, #31
 8004246:	f04f 0901 	mov.w	r9, #1
 800424a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800424e:	fa09 f202 	lsl.w	r2, r9, r2
 8004252:	420a      	tst	r2, r1
 8004254:	d00e      	beq.n	8004274 <__gethex+0x232>
 8004256:	454b      	cmp	r3, r9
 8004258:	dc02      	bgt.n	8004260 <__gethex+0x21e>
 800425a:	f04f 0902 	mov.w	r9, #2
 800425e:	e009      	b.n	8004274 <__gethex+0x232>
 8004260:	1eb9      	subs	r1, r7, #2
 8004262:	4628      	mov	r0, r5
 8004264:	f000 fe91 	bl	8004f8a <__any_on>
 8004268:	2800      	cmp	r0, #0
 800426a:	d0f6      	beq.n	800425a <__gethex+0x218>
 800426c:	f04f 0903 	mov.w	r9, #3
 8004270:	e000      	b.n	8004274 <__gethex+0x232>
 8004272:	4681      	mov	r9, r0
 8004274:	4639      	mov	r1, r7
 8004276:	4628      	mov	r0, r5
 8004278:	f7ff fe98 	bl	8003fac <rshift>
 800427c:	443c      	add	r4, r7
 800427e:	e00c      	b.n	800429a <__gethex+0x258>
 8004280:	da09      	bge.n	8004296 <__gethex+0x254>
 8004282:	1a37      	subs	r7, r6, r0
 8004284:	4629      	mov	r1, r5
 8004286:	463a      	mov	r2, r7
 8004288:	9802      	ldr	r0, [sp, #8]
 800428a:	f000 fcab 	bl	8004be4 <__lshift>
 800428e:	1be4      	subs	r4, r4, r7
 8004290:	4605      	mov	r5, r0
 8004292:	f100 0a14 	add.w	sl, r0, #20
 8004296:	f04f 0900 	mov.w	r9, #0
 800429a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800429e:	429c      	cmp	r4, r3
 80042a0:	dd08      	ble.n	80042b4 <__gethex+0x272>
 80042a2:	9802      	ldr	r0, [sp, #8]
 80042a4:	4629      	mov	r1, r5
 80042a6:	f000 fad7 	bl	8004858 <_Bfree>
 80042aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80042ac:	2300      	movs	r3, #0
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	20a3      	movs	r0, #163	; 0xa3
 80042b2:	e0e2      	b.n	800447a <__gethex+0x438>
 80042b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80042b8:	4284      	cmp	r4, r0
 80042ba:	da53      	bge.n	8004364 <__gethex+0x322>
 80042bc:	1b04      	subs	r4, r0, r4
 80042be:	42a6      	cmp	r6, r4
 80042c0:	dc2e      	bgt.n	8004320 <__gethex+0x2de>
 80042c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d01a      	beq.n	8004300 <__gethex+0x2be>
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d01c      	beq.n	8004308 <__gethex+0x2c6>
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d11d      	bne.n	800430e <__gethex+0x2cc>
 80042d2:	42a6      	cmp	r6, r4
 80042d4:	d11b      	bne.n	800430e <__gethex+0x2cc>
 80042d6:	2e01      	cmp	r6, #1
 80042d8:	dc0b      	bgt.n	80042f2 <__gethex+0x2b0>
 80042da:	9a06      	ldr	r2, [sp, #24]
 80042dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	2301      	movs	r3, #1
 80042e4:	612b      	str	r3, [r5, #16]
 80042e6:	f8ca 3000 	str.w	r3, [sl]
 80042ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80042ec:	2062      	movs	r0, #98	; 0x62
 80042ee:	601d      	str	r5, [r3, #0]
 80042f0:	e0c3      	b.n	800447a <__gethex+0x438>
 80042f2:	1e71      	subs	r1, r6, #1
 80042f4:	4628      	mov	r0, r5
 80042f6:	f000 fe48 	bl	8004f8a <__any_on>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d1ed      	bne.n	80042da <__gethex+0x298>
 80042fe:	e006      	b.n	800430e <__gethex+0x2cc>
 8004300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0e9      	beq.n	80042da <__gethex+0x298>
 8004306:	e002      	b.n	800430e <__gethex+0x2cc>
 8004308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <__gethex+0x298>
 800430e:	9802      	ldr	r0, [sp, #8]
 8004310:	4629      	mov	r1, r5
 8004312:	f000 faa1 	bl	8004858 <_Bfree>
 8004316:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004318:	2300      	movs	r3, #0
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	2050      	movs	r0, #80	; 0x50
 800431e:	e0ac      	b.n	800447a <__gethex+0x438>
 8004320:	1e67      	subs	r7, r4, #1
 8004322:	f1b9 0f00 	cmp.w	r9, #0
 8004326:	d106      	bne.n	8004336 <__gethex+0x2f4>
 8004328:	b13f      	cbz	r7, 800433a <__gethex+0x2f8>
 800432a:	4639      	mov	r1, r7
 800432c:	4628      	mov	r0, r5
 800432e:	f000 fe2c 	bl	8004f8a <__any_on>
 8004332:	4681      	mov	r9, r0
 8004334:	e001      	b.n	800433a <__gethex+0x2f8>
 8004336:	f04f 0901 	mov.w	r9, #1
 800433a:	117a      	asrs	r2, r7, #5
 800433c:	2301      	movs	r3, #1
 800433e:	f007 071f 	and.w	r7, r7, #31
 8004342:	fa03 f707 	lsl.w	r7, r3, r7
 8004346:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 800434a:	4621      	mov	r1, r4
 800434c:	421f      	tst	r7, r3
 800434e:	4628      	mov	r0, r5
 8004350:	bf18      	it	ne
 8004352:	f049 0902 	orrne.w	r9, r9, #2
 8004356:	1b36      	subs	r6, r6, r4
 8004358:	f7ff fe28 	bl	8003fac <rshift>
 800435c:	2702      	movs	r7, #2
 800435e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8004362:	e000      	b.n	8004366 <__gethex+0x324>
 8004364:	2701      	movs	r7, #1
 8004366:	f1b9 0f00 	cmp.w	r9, #0
 800436a:	f000 8081 	beq.w	8004470 <__gethex+0x42e>
 800436e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d00e      	beq.n	8004394 <__gethex+0x352>
 8004376:	2b03      	cmp	r3, #3
 8004378:	d010      	beq.n	800439c <__gethex+0x35a>
 800437a:	2b01      	cmp	r3, #1
 800437c:	d176      	bne.n	800446c <__gethex+0x42a>
 800437e:	f019 0f02 	tst.w	r9, #2
 8004382:	d073      	beq.n	800446c <__gethex+0x42a>
 8004384:	f8da 0000 	ldr.w	r0, [sl]
 8004388:	ea49 0900 	orr.w	r9, r9, r0
 800438c:	f019 0f01 	tst.w	r9, #1
 8004390:	d107      	bne.n	80043a2 <__gethex+0x360>
 8004392:	e06b      	b.n	800446c <__gethex+0x42a>
 8004394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004396:	f1c3 0301 	rsb	r3, r3, #1
 800439a:	9315      	str	r3, [sp, #84]	; 0x54
 800439c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d064      	beq.n	800446c <__gethex+0x42a>
 80043a2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80043a6:	f105 0314 	add.w	r3, r5, #20
 80043aa:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80043ae:	eb03 0109 	add.w	r1, r3, r9
 80043b2:	2000      	movs	r0, #0
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80043ba:	d002      	beq.n	80043c2 <__gethex+0x380>
 80043bc:	3201      	adds	r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e020      	b.n	8004404 <__gethex+0x3c2>
 80043c2:	f843 0b04 	str.w	r0, [r3], #4
 80043c6:	4299      	cmp	r1, r3
 80043c8:	d8f4      	bhi.n	80043b4 <__gethex+0x372>
 80043ca:	68ab      	ldr	r3, [r5, #8]
 80043cc:	459a      	cmp	sl, r3
 80043ce:	db12      	blt.n	80043f6 <__gethex+0x3b4>
 80043d0:	6869      	ldr	r1, [r5, #4]
 80043d2:	9802      	ldr	r0, [sp, #8]
 80043d4:	3101      	adds	r1, #1
 80043d6:	f000 fa0a 	bl	80047ee <_Balloc>
 80043da:	692a      	ldr	r2, [r5, #16]
 80043dc:	3202      	adds	r2, #2
 80043de:	f105 010c 	add.w	r1, r5, #12
 80043e2:	4683      	mov	fp, r0
 80043e4:	0092      	lsls	r2, r2, #2
 80043e6:	300c      	adds	r0, #12
 80043e8:	f000 f9f4 	bl	80047d4 <memcpy>
 80043ec:	4629      	mov	r1, r5
 80043ee:	9802      	ldr	r0, [sp, #8]
 80043f0:	f000 fa32 	bl	8004858 <_Bfree>
 80043f4:	465d      	mov	r5, fp
 80043f6:	692b      	ldr	r3, [r5, #16]
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80043fe:	612a      	str	r2, [r5, #16]
 8004400:	2201      	movs	r2, #1
 8004402:	615a      	str	r2, [r3, #20]
 8004404:	2f02      	cmp	r7, #2
 8004406:	f105 0214 	add.w	r2, r5, #20
 800440a:	d111      	bne.n	8004430 <__gethex+0x3ee>
 800440c:	f8d8 3000 	ldr.w	r3, [r8]
 8004410:	3b01      	subs	r3, #1
 8004412:	429e      	cmp	r6, r3
 8004414:	d127      	bne.n	8004466 <__gethex+0x424>
 8004416:	1171      	asrs	r1, r6, #5
 8004418:	2301      	movs	r3, #1
 800441a:	f006 061f 	and.w	r6, r6, #31
 800441e:	fa03 f606 	lsl.w	r6, r3, r6
 8004422:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004426:	421e      	tst	r6, r3
 8004428:	bf0c      	ite	eq
 800442a:	2702      	moveq	r7, #2
 800442c:	2701      	movne	r7, #1
 800442e:	e01a      	b.n	8004466 <__gethex+0x424>
 8004430:	692b      	ldr	r3, [r5, #16]
 8004432:	459a      	cmp	sl, r3
 8004434:	da0a      	bge.n	800444c <__gethex+0x40a>
 8004436:	2101      	movs	r1, #1
 8004438:	4628      	mov	r0, r5
 800443a:	f7ff fdb7 	bl	8003fac <rshift>
 800443e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004442:	3401      	adds	r4, #1
 8004444:	429c      	cmp	r4, r3
 8004446:	f73f af2c 	bgt.w	80042a2 <__gethex+0x260>
 800444a:	e00b      	b.n	8004464 <__gethex+0x422>
 800444c:	f016 061f 	ands.w	r6, r6, #31
 8004450:	d008      	beq.n	8004464 <__gethex+0x422>
 8004452:	4491      	add	r9, r2
 8004454:	f1c6 0620 	rsb	r6, r6, #32
 8004458:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800445c:	f000 fa8c 	bl	8004978 <__hi0bits>
 8004460:	42b0      	cmp	r0, r6
 8004462:	dbe8      	blt.n	8004436 <__gethex+0x3f4>
 8004464:	2701      	movs	r7, #1
 8004466:	f047 0720 	orr.w	r7, r7, #32
 800446a:	e001      	b.n	8004470 <__gethex+0x42e>
 800446c:	f047 0710 	orr.w	r7, r7, #16
 8004470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004472:	601d      	str	r5, [r3, #0]
 8004474:	9b06      	ldr	r3, [sp, #24]
 8004476:	4638      	mov	r0, r7
 8004478:	601c      	str	r4, [r3, #0]
 800447a:	b00b      	add	sp, #44	; 0x2c
 800447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004480 <L_shift>:
 8004480:	f1c2 0208 	rsb	r2, r2, #8
 8004484:	0092      	lsls	r2, r2, #2
 8004486:	b570      	push	{r4, r5, r6, lr}
 8004488:	f1c2 0620 	rsb	r6, r2, #32
 800448c:	6843      	ldr	r3, [r0, #4]
 800448e:	6805      	ldr	r5, [r0, #0]
 8004490:	fa03 f406 	lsl.w	r4, r3, r6
 8004494:	432c      	orrs	r4, r5
 8004496:	40d3      	lsrs	r3, r2
 8004498:	6004      	str	r4, [r0, #0]
 800449a:	f840 3f04 	str.w	r3, [r0, #4]!
 800449e:	4288      	cmp	r0, r1
 80044a0:	d3f4      	bcc.n	800448c <L_shift+0xc>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}

080044a4 <__match>:
 80044a4:	b530      	push	{r4, r5, lr}
 80044a6:	6803      	ldr	r3, [r0, #0]
 80044a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ac:	3301      	adds	r3, #1
 80044ae:	b14c      	cbz	r4, 80044c4 <__match+0x20>
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80044b6:	2d19      	cmp	r5, #25
 80044b8:	bf98      	it	ls
 80044ba:	3220      	addls	r2, #32
 80044bc:	42a2      	cmp	r2, r4
 80044be:	d0f3      	beq.n	80044a8 <__match+0x4>
 80044c0:	2000      	movs	r0, #0
 80044c2:	bd30      	pop	{r4, r5, pc}
 80044c4:	6003      	str	r3, [r0, #0]
 80044c6:	2001      	movs	r0, #1
 80044c8:	bd30      	pop	{r4, r5, pc}

080044ca <__hexnan>:
 80044ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ce:	680b      	ldr	r3, [r1, #0]
 80044d0:	f8d0 b000 	ldr.w	fp, [r0]
 80044d4:	115e      	asrs	r6, r3, #5
 80044d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80044da:	f013 031f 	ands.w	r3, r3, #31
 80044de:	b085      	sub	sp, #20
 80044e0:	bf18      	it	ne
 80044e2:	3604      	addne	r6, #4
 80044e4:	1f35      	subs	r5, r6, #4
 80044e6:	4617      	mov	r7, r2
 80044e8:	2200      	movs	r2, #0
 80044ea:	4682      	mov	sl, r0
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80044f2:	46a8      	mov	r8, r5
 80044f4:	462c      	mov	r4, r5
 80044f6:	9200      	str	r2, [sp, #0]
 80044f8:	4691      	mov	r9, r2
 80044fa:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80044fe:	2900      	cmp	r1, #0
 8004500:	d03c      	beq.n	800457c <__hexnan+0xb2>
 8004502:	4608      	mov	r0, r1
 8004504:	9203      	str	r2, [sp, #12]
 8004506:	9102      	str	r1, [sp, #8]
 8004508:	f7ff fd86 	bl	8004018 <__hexdig_fun>
 800450c:	9a03      	ldr	r2, [sp, #12]
 800450e:	bb00      	cbnz	r0, 8004552 <__hexnan+0x88>
 8004510:	9902      	ldr	r1, [sp, #8]
 8004512:	2920      	cmp	r1, #32
 8004514:	d816      	bhi.n	8004544 <__hexnan+0x7a>
 8004516:	9b00      	ldr	r3, [sp, #0]
 8004518:	4599      	cmp	r9, r3
 800451a:	ddee      	ble.n	80044fa <__hexnan+0x30>
 800451c:	4544      	cmp	r4, r8
 800451e:	d205      	bcs.n	800452c <__hexnan+0x62>
 8004520:	2a07      	cmp	r2, #7
 8004522:	dc03      	bgt.n	800452c <__hexnan+0x62>
 8004524:	4641      	mov	r1, r8
 8004526:	4620      	mov	r0, r4
 8004528:	f7ff ffaa 	bl	8004480 <L_shift>
 800452c:	42bc      	cmp	r4, r7
 800452e:	d923      	bls.n	8004578 <__hexnan+0xae>
 8004530:	2300      	movs	r3, #0
 8004532:	f1a4 0804 	sub.w	r8, r4, #4
 8004536:	f844 3c04 	str.w	r3, [r4, #-4]
 800453a:	f8cd 9000 	str.w	r9, [sp]
 800453e:	4644      	mov	r4, r8
 8004540:	461a      	mov	r2, r3
 8004542:	e7da      	b.n	80044fa <__hexnan+0x30>
 8004544:	2929      	cmp	r1, #41	; 0x29
 8004546:	d148      	bne.n	80045da <__hexnan+0x110>
 8004548:	f10b 0301 	add.w	r3, fp, #1
 800454c:	f8ca 3000 	str.w	r3, [sl]
 8004550:	e014      	b.n	800457c <__hexnan+0xb2>
 8004552:	3201      	adds	r2, #1
 8004554:	2a08      	cmp	r2, #8
 8004556:	f109 0901 	add.w	r9, r9, #1
 800455a:	dd06      	ble.n	800456a <__hexnan+0xa0>
 800455c:	42bc      	cmp	r4, r7
 800455e:	d9cc      	bls.n	80044fa <__hexnan+0x30>
 8004560:	2300      	movs	r3, #0
 8004562:	f844 3c04 	str.w	r3, [r4, #-4]
 8004566:	2201      	movs	r2, #1
 8004568:	3c04      	subs	r4, #4
 800456a:	6821      	ldr	r1, [r4, #0]
 800456c:	f000 000f 	and.w	r0, r0, #15
 8004570:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8004574:	6020      	str	r0, [r4, #0]
 8004576:	e7c0      	b.n	80044fa <__hexnan+0x30>
 8004578:	2208      	movs	r2, #8
 800457a:	e7be      	b.n	80044fa <__hexnan+0x30>
 800457c:	f1b9 0f00 	cmp.w	r9, #0
 8004580:	d02b      	beq.n	80045da <__hexnan+0x110>
 8004582:	4544      	cmp	r4, r8
 8004584:	d205      	bcs.n	8004592 <__hexnan+0xc8>
 8004586:	2a07      	cmp	r2, #7
 8004588:	dc03      	bgt.n	8004592 <__hexnan+0xc8>
 800458a:	4641      	mov	r1, r8
 800458c:	4620      	mov	r0, r4
 800458e:	f7ff ff77 	bl	8004480 <L_shift>
 8004592:	42bc      	cmp	r4, r7
 8004594:	d90c      	bls.n	80045b0 <__hexnan+0xe6>
 8004596:	463b      	mov	r3, r7
 8004598:	f854 2b04 	ldr.w	r2, [r4], #4
 800459c:	f843 2b04 	str.w	r2, [r3], #4
 80045a0:	42a5      	cmp	r5, r4
 80045a2:	d2f9      	bcs.n	8004598 <__hexnan+0xce>
 80045a4:	2200      	movs	r2, #0
 80045a6:	f843 2b04 	str.w	r2, [r3], #4
 80045aa:	429d      	cmp	r5, r3
 80045ac:	d2fb      	bcs.n	80045a6 <__hexnan+0xdc>
 80045ae:	e00b      	b.n	80045c8 <__hexnan+0xfe>
 80045b0:	9b01      	ldr	r3, [sp, #4]
 80045b2:	b14b      	cbz	r3, 80045c8 <__hexnan+0xfe>
 80045b4:	f1c3 0220 	rsb	r2, r3, #32
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295
 80045bc:	40d3      	lsrs	r3, r2
 80045be:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80045c2:	4013      	ands	r3, r2
 80045c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	b943      	cbnz	r3, 80045de <__hexnan+0x114>
 80045cc:	42bd      	cmp	r5, r7
 80045ce:	d102      	bne.n	80045d6 <__hexnan+0x10c>
 80045d0:	2301      	movs	r3, #1
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	e003      	b.n	80045de <__hexnan+0x114>
 80045d6:	3d04      	subs	r5, #4
 80045d8:	e7f6      	b.n	80045c8 <__hexnan+0xfe>
 80045da:	2004      	movs	r0, #4
 80045dc:	e000      	b.n	80045e0 <__hexnan+0x116>
 80045de:	2005      	movs	r0, #5
 80045e0:	b005      	add	sp, #20
 80045e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080045e8 <_findenv_r>:
 80045e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	4607      	mov	r7, r0
 80045ee:	468b      	mov	fp, r1
 80045f0:	4690      	mov	r8, r2
 80045f2:	f000 fdcd 	bl	8005190 <__env_lock>
 80045f6:	4b19      	ldr	r3, [pc, #100]	; (800465c <_findenv_r+0x74>)
 80045f8:	681d      	ldr	r5, [r3, #0]
 80045fa:	469a      	mov	sl, r3
 80045fc:	b13d      	cbz	r5, 800460e <_findenv_r+0x26>
 80045fe:	465c      	mov	r4, fp
 8004600:	4623      	mov	r3, r4
 8004602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004606:	b142      	cbz	r2, 800461a <_findenv_r+0x32>
 8004608:	2a3d      	cmp	r2, #61	; 0x3d
 800460a:	461c      	mov	r4, r3
 800460c:	d1f8      	bne.n	8004600 <_findenv_r+0x18>
 800460e:	4638      	mov	r0, r7
 8004610:	f000 fdbf 	bl	8005192 <__env_unlock>
 8004614:	2000      	movs	r0, #0
 8004616:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461a:	ebcb 0404 	rsb	r4, fp, r4
 800461e:	46a9      	mov	r9, r5
 8004620:	f859 0b04 	ldr.w	r0, [r9], #4
 8004624:	2800      	cmp	r0, #0
 8004626:	d0f2      	beq.n	800460e <_findenv_r+0x26>
 8004628:	4622      	mov	r2, r4
 800462a:	4659      	mov	r1, fp
 800462c:	f000 fd12 	bl	8005054 <strncmp>
 8004630:	b988      	cbnz	r0, 8004656 <_findenv_r+0x6e>
 8004632:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8004636:	191e      	adds	r6, r3, r4
 8004638:	5d1b      	ldrb	r3, [r3, r4]
 800463a:	2b3d      	cmp	r3, #61	; 0x3d
 800463c:	d10b      	bne.n	8004656 <_findenv_r+0x6e>
 800463e:	f8da 3000 	ldr.w	r3, [sl]
 8004642:	1aed      	subs	r5, r5, r3
 8004644:	10ad      	asrs	r5, r5, #2
 8004646:	4638      	mov	r0, r7
 8004648:	f8c8 5000 	str.w	r5, [r8]
 800464c:	f000 fda1 	bl	8005192 <__env_unlock>
 8004650:	1c70      	adds	r0, r6, #1
 8004652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004656:	464d      	mov	r5, r9
 8004658:	e7e1      	b.n	800461e <_findenv_r+0x36>
 800465a:	bf00      	nop
 800465c:	20000108 	.word	0x20000108

08004660 <_getenv_r>:
 8004660:	b507      	push	{r0, r1, r2, lr}
 8004662:	aa01      	add	r2, sp, #4
 8004664:	f7ff ffc0 	bl	80045e8 <_findenv_r>
 8004668:	b003      	add	sp, #12
 800466a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004670 <_gettimeofday_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4c07      	ldr	r4, [pc, #28]	; (8004690 <_gettimeofday_r+0x20>)
 8004674:	2300      	movs	r3, #0
 8004676:	4605      	mov	r5, r0
 8004678:	4608      	mov	r0, r1
 800467a:	4611      	mov	r1, r2
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	f001 f9bb 	bl	80059f8 <_gettimeofday>
 8004682:	1c43      	adds	r3, r0, #1
 8004684:	d102      	bne.n	800468c <_gettimeofday_r+0x1c>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	b103      	cbz	r3, 800468c <_gettimeofday_r+0x1c>
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	bd38      	pop	{r3, r4, r5, pc}
 800468e:	bf00      	nop
 8004690:	20001120 	.word	0x20001120

08004694 <__gettzinfo>:
 8004694:	4800      	ldr	r0, [pc, #0]	; (8004698 <__gettzinfo+0x4>)
 8004696:	4770      	bx	lr
 8004698:	20000028 	.word	0x20000028

0800469c <gmtime_r>:
 800469c:	6802      	ldr	r2, [r0, #0]
 800469e:	4b47      	ldr	r3, [pc, #284]	; (80047bc <gmtime_r+0x120>)
 80046a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a2:	fb92 f4f3 	sdiv	r4, r2, r3
 80046a6:	fb03 2214 	mls	r2, r3, r4, r2
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	bfbc      	itt	lt
 80046ae:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80046b2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80046b6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80046ba:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80046be:	fb92 f3f0 	sdiv	r3, r2, r0
 80046c2:	fb00 2213 	mls	r2, r0, r3, r2
 80046c6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80046ca:	bfac      	ite	ge
 80046cc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80046d0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80046d4:	608b      	str	r3, [r1, #8]
 80046d6:	fb92 f3f0 	sdiv	r3, r2, r0
 80046da:	fb00 2213 	mls	r2, r0, r3, r2
 80046de:	604b      	str	r3, [r1, #4]
 80046e0:	600a      	str	r2, [r1, #0]
 80046e2:	2307      	movs	r3, #7
 80046e4:	1ce2      	adds	r2, r4, #3
 80046e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80046ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	618b      	str	r3, [r1, #24]
 80046f2:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <gmtime_r+0x124>)
 80046f4:	4d33      	ldr	r5, [pc, #204]	; (80047c4 <gmtime_r+0x128>)
 80046f6:	fb94 f5f5 	sdiv	r5, r4, r5
 80046fa:	fb03 4405 	mla	r4, r3, r5, r4
 80046fe:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8004702:	fbb4 f2f2 	udiv	r2, r4, r2
 8004706:	4422      	add	r2, r4
 8004708:	f240 57b4 	movw	r7, #1460	; 0x5b4
 800470c:	fbb4 f3f7 	udiv	r3, r4, r7
 8004710:	1ad2      	subs	r2, r2, r3
 8004712:	482d      	ldr	r0, [pc, #180]	; (80047c8 <gmtime_r+0x12c>)
 8004714:	fbb4 f0f0 	udiv	r0, r4, r0
 8004718:	f648 6694 	movw	r6, #36500	; 0x8e94
 800471c:	1a13      	subs	r3, r2, r0
 800471e:	fbb3 f6f6 	udiv	r6, r3, r6
 8004722:	4434      	add	r4, r6
 8004724:	f240 126d 	movw	r2, #365	; 0x16d
 8004728:	fbb3 f0f2 	udiv	r0, r3, r2
 800472c:	fbb3 f3f7 	udiv	r3, r3, r7
 8004730:	1ae3      	subs	r3, r4, r3
 8004732:	fb02 3310 	mls	r3, r2, r0, r3
 8004736:	2499      	movs	r4, #153	; 0x99
 8004738:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800473c:	3202      	adds	r2, #2
 800473e:	fbb2 f2f4 	udiv	r2, r2, r4
 8004742:	2a0a      	cmp	r2, #10
 8004744:	fb04 f402 	mul.w	r4, r4, r2
 8004748:	f104 0602 	add.w	r6, r4, #2
 800474c:	f04f 0405 	mov.w	r4, #5
 8004750:	fbb6 f4f4 	udiv	r4, r6, r4
 8004754:	bf34      	ite	cc
 8004756:	2602      	movcc	r6, #2
 8004758:	f06f 0609 	mvncs.w	r6, #9
 800475c:	4416      	add	r6, r2
 800475e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004762:	fb02 0505 	mla	r5, r2, r5, r0
 8004766:	1c5f      	adds	r7, r3, #1
 8004768:	2e01      	cmp	r6, #1
 800476a:	bf98      	it	ls
 800476c:	3501      	addls	r5, #1
 800476e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8004772:	eba7 0704 	sub.w	r7, r7, r4
 8004776:	d302      	bcc.n	800477e <gmtime_r+0xe2>
 8004778:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 800477c:	e014      	b.n	80047a8 <gmtime_r+0x10c>
 800477e:	0782      	lsls	r2, r0, #30
 8004780:	d105      	bne.n	800478e <gmtime_r+0xf2>
 8004782:	2464      	movs	r4, #100	; 0x64
 8004784:	fbb0 f2f4 	udiv	r2, r0, r4
 8004788:	fb04 0212 	mls	r2, r4, r2, r0
 800478c:	b94a      	cbnz	r2, 80047a2 <gmtime_r+0x106>
 800478e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004792:	fbb0 f4f2 	udiv	r4, r0, r2
 8004796:	fb02 0014 	mls	r0, r2, r4, r0
 800479a:	fab0 f280 	clz	r2, r0
 800479e:	0952      	lsrs	r2, r2, #5
 80047a0:	e000      	b.n	80047a4 <gmtime_r+0x108>
 80047a2:	2201      	movs	r2, #1
 80047a4:	333b      	adds	r3, #59	; 0x3b
 80047a6:	441a      	add	r2, r3
 80047a8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80047ac:	2300      	movs	r3, #0
 80047ae:	61ca      	str	r2, [r1, #28]
 80047b0:	614d      	str	r5, [r1, #20]
 80047b2:	610e      	str	r6, [r1, #16]
 80047b4:	60cf      	str	r7, [r1, #12]
 80047b6:	620b      	str	r3, [r1, #32]
 80047b8:	4608      	mov	r0, r1
 80047ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047bc:	00015180 	.word	0x00015180
 80047c0:	fffdc54f 	.word	0xfffdc54f
 80047c4:	00023ab1 	.word	0x00023ab1
 80047c8:	00023ab0 	.word	0x00023ab0

080047cc <_localeconv_r>:
 80047cc:	4800      	ldr	r0, [pc, #0]	; (80047d0 <_localeconv_r+0x4>)
 80047ce:	4770      	bx	lr
 80047d0:	200000cc 	.word	0x200000cc

080047d4 <memcpy>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	1e43      	subs	r3, r0, #1
 80047d8:	440a      	add	r2, r1
 80047da:	4291      	cmp	r1, r2
 80047dc:	d004      	beq.n	80047e8 <memcpy+0x14>
 80047de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e6:	e7f8      	b.n	80047da <memcpy+0x6>
 80047e8:	bd10      	pop	{r4, pc}

080047ea <__malloc_lock>:
 80047ea:	4770      	bx	lr

080047ec <__malloc_unlock>:
 80047ec:	4770      	bx	lr

080047ee <_Balloc>:
 80047ee:	b570      	push	{r4, r5, r6, lr}
 80047f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80047f2:	4604      	mov	r4, r0
 80047f4:	460e      	mov	r6, r1
 80047f6:	b93d      	cbnz	r5, 8004808 <_Balloc+0x1a>
 80047f8:	2010      	movs	r0, #16
 80047fa:	f7fd ffe1 	bl	80027c0 <malloc>
 80047fe:	6260      	str	r0, [r4, #36]	; 0x24
 8004800:	6045      	str	r5, [r0, #4]
 8004802:	6085      	str	r5, [r0, #8]
 8004804:	6005      	str	r5, [r0, #0]
 8004806:	60c5      	str	r5, [r0, #12]
 8004808:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800480a:	68eb      	ldr	r3, [r5, #12]
 800480c:	b143      	cbz	r3, 8004820 <_Balloc+0x32>
 800480e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004816:	b178      	cbz	r0, 8004838 <_Balloc+0x4a>
 8004818:	6802      	ldr	r2, [r0, #0]
 800481a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800481e:	e017      	b.n	8004850 <_Balloc+0x62>
 8004820:	2221      	movs	r2, #33	; 0x21
 8004822:	2104      	movs	r1, #4
 8004824:	4620      	mov	r0, r4
 8004826:	f000 fbd2 	bl	8004fce <_calloc_r>
 800482a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800482c:	60e8      	str	r0, [r5, #12]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ec      	bne.n	800480e <_Balloc+0x20>
 8004834:	2000      	movs	r0, #0
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f506 	lsl.w	r5, r1, r6
 800483e:	1d6a      	adds	r2, r5, #5
 8004840:	0092      	lsls	r2, r2, #2
 8004842:	4620      	mov	r0, r4
 8004844:	f000 fbc3 	bl	8004fce <_calloc_r>
 8004848:	2800      	cmp	r0, #0
 800484a:	d0f3      	beq.n	8004834 <_Balloc+0x46>
 800484c:	6046      	str	r6, [r0, #4]
 800484e:	6085      	str	r5, [r0, #8]
 8004850:	2300      	movs	r3, #0
 8004852:	6103      	str	r3, [r0, #16]
 8004854:	60c3      	str	r3, [r0, #12]
 8004856:	bd70      	pop	{r4, r5, r6, pc}

08004858 <_Bfree>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800485c:	4606      	mov	r6, r0
 800485e:	460d      	mov	r5, r1
 8004860:	b93c      	cbnz	r4, 8004872 <_Bfree+0x1a>
 8004862:	2010      	movs	r0, #16
 8004864:	f7fd ffac 	bl	80027c0 <malloc>
 8004868:	6270      	str	r0, [r6, #36]	; 0x24
 800486a:	6044      	str	r4, [r0, #4]
 800486c:	6084      	str	r4, [r0, #8]
 800486e:	6004      	str	r4, [r0, #0]
 8004870:	60c4      	str	r4, [r0, #12]
 8004872:	b13d      	cbz	r5, 8004884 <_Bfree+0x2c>
 8004874:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004876:	686a      	ldr	r2, [r5, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800487e:	6029      	str	r1, [r5, #0]
 8004880:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004884:	bd70      	pop	{r4, r5, r6, pc}

08004886 <__multadd>:
 8004886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488a:	690d      	ldr	r5, [r1, #16]
 800488c:	461f      	mov	r7, r3
 800488e:	4606      	mov	r6, r0
 8004890:	460c      	mov	r4, r1
 8004892:	f101 0e14 	add.w	lr, r1, #20
 8004896:	2300      	movs	r3, #0
 8004898:	f8de 0000 	ldr.w	r0, [lr]
 800489c:	b281      	uxth	r1, r0
 800489e:	fb02 7101 	mla	r1, r2, r1, r7
 80048a2:	0c0f      	lsrs	r7, r1, #16
 80048a4:	0c00      	lsrs	r0, r0, #16
 80048a6:	fb02 7000 	mla	r0, r2, r0, r7
 80048aa:	b289      	uxth	r1, r1
 80048ac:	3301      	adds	r3, #1
 80048ae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80048b2:	429d      	cmp	r5, r3
 80048b4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80048b8:	f84e 1b04 	str.w	r1, [lr], #4
 80048bc:	dcec      	bgt.n	8004898 <__multadd+0x12>
 80048be:	b1d7      	cbz	r7, 80048f6 <__multadd+0x70>
 80048c0:	68a3      	ldr	r3, [r4, #8]
 80048c2:	429d      	cmp	r5, r3
 80048c4:	db12      	blt.n	80048ec <__multadd+0x66>
 80048c6:	6861      	ldr	r1, [r4, #4]
 80048c8:	4630      	mov	r0, r6
 80048ca:	3101      	adds	r1, #1
 80048cc:	f7ff ff8f 	bl	80047ee <_Balloc>
 80048d0:	6922      	ldr	r2, [r4, #16]
 80048d2:	3202      	adds	r2, #2
 80048d4:	f104 010c 	add.w	r1, r4, #12
 80048d8:	4680      	mov	r8, r0
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	300c      	adds	r0, #12
 80048de:	f7ff ff79 	bl	80047d4 <memcpy>
 80048e2:	4621      	mov	r1, r4
 80048e4:	4630      	mov	r0, r6
 80048e6:	f7ff ffb7 	bl	8004858 <_Bfree>
 80048ea:	4644      	mov	r4, r8
 80048ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048f0:	3501      	adds	r5, #1
 80048f2:	615f      	str	r7, [r3, #20]
 80048f4:	6125      	str	r5, [r4, #16]
 80048f6:	4620      	mov	r0, r4
 80048f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080048fc <__s2b>:
 80048fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004900:	460c      	mov	r4, r1
 8004902:	4615      	mov	r5, r2
 8004904:	461f      	mov	r7, r3
 8004906:	2209      	movs	r2, #9
 8004908:	3308      	adds	r3, #8
 800490a:	4606      	mov	r6, r0
 800490c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004910:	2100      	movs	r1, #0
 8004912:	2201      	movs	r2, #1
 8004914:	429a      	cmp	r2, r3
 8004916:	da02      	bge.n	800491e <__s2b+0x22>
 8004918:	0052      	lsls	r2, r2, #1
 800491a:	3101      	adds	r1, #1
 800491c:	e7fa      	b.n	8004914 <__s2b+0x18>
 800491e:	4630      	mov	r0, r6
 8004920:	f7ff ff65 	bl	80047ee <_Balloc>
 8004924:	9b08      	ldr	r3, [sp, #32]
 8004926:	6143      	str	r3, [r0, #20]
 8004928:	2d09      	cmp	r5, #9
 800492a:	f04f 0301 	mov.w	r3, #1
 800492e:	6103      	str	r3, [r0, #16]
 8004930:	dd11      	ble.n	8004956 <__s2b+0x5a>
 8004932:	f104 0809 	add.w	r8, r4, #9
 8004936:	46c1      	mov	r9, r8
 8004938:	442c      	add	r4, r5
 800493a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800493e:	4601      	mov	r1, r0
 8004940:	3b30      	subs	r3, #48	; 0x30
 8004942:	220a      	movs	r2, #10
 8004944:	4630      	mov	r0, r6
 8004946:	f7ff ff9e 	bl	8004886 <__multadd>
 800494a:	45a1      	cmp	r9, r4
 800494c:	d1f5      	bne.n	800493a <__s2b+0x3e>
 800494e:	eb08 0405 	add.w	r4, r8, r5
 8004952:	3c08      	subs	r4, #8
 8004954:	e001      	b.n	800495a <__s2b+0x5e>
 8004956:	340a      	adds	r4, #10
 8004958:	2509      	movs	r5, #9
 800495a:	1b2d      	subs	r5, r5, r4
 800495c:	1963      	adds	r3, r4, r5
 800495e:	429f      	cmp	r7, r3
 8004960:	dd08      	ble.n	8004974 <__s2b+0x78>
 8004962:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004966:	4601      	mov	r1, r0
 8004968:	3b30      	subs	r3, #48	; 0x30
 800496a:	220a      	movs	r2, #10
 800496c:	4630      	mov	r0, r6
 800496e:	f7ff ff8a 	bl	8004886 <__multadd>
 8004972:	e7f3      	b.n	800495c <__s2b+0x60>
 8004974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004978 <__hi0bits>:
 8004978:	0c03      	lsrs	r3, r0, #16
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	b913      	cbnz	r3, 8004984 <__hi0bits+0xc>
 800497e:	0400      	lsls	r0, r0, #16
 8004980:	2310      	movs	r3, #16
 8004982:	e000      	b.n	8004986 <__hi0bits+0xe>
 8004984:	2300      	movs	r3, #0
 8004986:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800498a:	bf04      	itt	eq
 800498c:	0200      	lsleq	r0, r0, #8
 800498e:	3308      	addeq	r3, #8
 8004990:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004994:	bf04      	itt	eq
 8004996:	0100      	lsleq	r0, r0, #4
 8004998:	3304      	addeq	r3, #4
 800499a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800499e:	bf04      	itt	eq
 80049a0:	0080      	lsleq	r0, r0, #2
 80049a2:	3302      	addeq	r3, #2
 80049a4:	2800      	cmp	r0, #0
 80049a6:	db03      	blt.n	80049b0 <__hi0bits+0x38>
 80049a8:	0042      	lsls	r2, r0, #1
 80049aa:	d503      	bpl.n	80049b4 <__hi0bits+0x3c>
 80049ac:	1c58      	adds	r0, r3, #1
 80049ae:	4770      	bx	lr
 80049b0:	4618      	mov	r0, r3
 80049b2:	4770      	bx	lr
 80049b4:	2020      	movs	r0, #32
 80049b6:	4770      	bx	lr

080049b8 <__lo0bits>:
 80049b8:	6803      	ldr	r3, [r0, #0]
 80049ba:	f013 0207 	ands.w	r2, r3, #7
 80049be:	d00b      	beq.n	80049d8 <__lo0bits+0x20>
 80049c0:	07d9      	lsls	r1, r3, #31
 80049c2:	d422      	bmi.n	8004a0a <__lo0bits+0x52>
 80049c4:	079a      	lsls	r2, r3, #30
 80049c6:	bf4b      	itete	mi
 80049c8:	085b      	lsrmi	r3, r3, #1
 80049ca:	089b      	lsrpl	r3, r3, #2
 80049cc:	6003      	strmi	r3, [r0, #0]
 80049ce:	6003      	strpl	r3, [r0, #0]
 80049d0:	bf4c      	ite	mi
 80049d2:	2001      	movmi	r0, #1
 80049d4:	2002      	movpl	r0, #2
 80049d6:	4770      	bx	lr
 80049d8:	b299      	uxth	r1, r3
 80049da:	b909      	cbnz	r1, 80049e0 <__lo0bits+0x28>
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	2210      	movs	r2, #16
 80049e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80049e4:	bf04      	itt	eq
 80049e6:	0a1b      	lsreq	r3, r3, #8
 80049e8:	3208      	addeq	r2, #8
 80049ea:	0719      	lsls	r1, r3, #28
 80049ec:	bf04      	itt	eq
 80049ee:	091b      	lsreq	r3, r3, #4
 80049f0:	3204      	addeq	r2, #4
 80049f2:	0799      	lsls	r1, r3, #30
 80049f4:	bf04      	itt	eq
 80049f6:	089b      	lsreq	r3, r3, #2
 80049f8:	3202      	addeq	r2, #2
 80049fa:	07d9      	lsls	r1, r3, #31
 80049fc:	d402      	bmi.n	8004a04 <__lo0bits+0x4c>
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	d005      	beq.n	8004a0e <__lo0bits+0x56>
 8004a02:	3201      	adds	r2, #1
 8004a04:	6003      	str	r3, [r0, #0]
 8004a06:	4610      	mov	r0, r2
 8004a08:	4770      	bx	lr
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	4770      	bx	lr
 8004a0e:	2020      	movs	r0, #32
 8004a10:	4770      	bx	lr

08004a12 <__i2b>:
 8004a12:	b510      	push	{r4, lr}
 8004a14:	460c      	mov	r4, r1
 8004a16:	2101      	movs	r1, #1
 8004a18:	f7ff fee9 	bl	80047ee <_Balloc>
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	6144      	str	r4, [r0, #20]
 8004a20:	6102      	str	r2, [r0, #16]
 8004a22:	bd10      	pop	{r4, pc}

08004a24 <__multiply>:
 8004a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a28:	4614      	mov	r4, r2
 8004a2a:	690a      	ldr	r2, [r1, #16]
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	bfb8      	it	lt
 8004a32:	460b      	movlt	r3, r1
 8004a34:	4688      	mov	r8, r1
 8004a36:	bfbc      	itt	lt
 8004a38:	46a0      	movlt	r8, r4
 8004a3a:	461c      	movlt	r4, r3
 8004a3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004a40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004a44:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004a48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004a4c:	eb07 0609 	add.w	r6, r7, r9
 8004a50:	429e      	cmp	r6, r3
 8004a52:	bfc8      	it	gt
 8004a54:	3101      	addgt	r1, #1
 8004a56:	f7ff feca 	bl	80047ee <_Balloc>
 8004a5a:	f100 0514 	add.w	r5, r0, #20
 8004a5e:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8004a62:	462b      	mov	r3, r5
 8004a64:	2200      	movs	r2, #0
 8004a66:	4563      	cmp	r3, ip
 8004a68:	d202      	bcs.n	8004a70 <__multiply+0x4c>
 8004a6a:	f843 2b04 	str.w	r2, [r3], #4
 8004a6e:	e7fa      	b.n	8004a66 <__multiply+0x42>
 8004a70:	f104 0214 	add.w	r2, r4, #20
 8004a74:	f108 0114 	add.w	r1, r8, #20
 8004a78:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004a7c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	9b00      	ldr	r3, [sp, #0]
 8004a84:	9201      	str	r2, [sp, #4]
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d957      	bls.n	8004b3a <__multiply+0x116>
 8004a8a:	f8b2 b000 	ldrh.w	fp, [r2]
 8004a8e:	f1bb 0f00 	cmp.w	fp, #0
 8004a92:	d023      	beq.n	8004adc <__multiply+0xb8>
 8004a94:	4689      	mov	r9, r1
 8004a96:	46ae      	mov	lr, r5
 8004a98:	f04f 0800 	mov.w	r8, #0
 8004a9c:	f859 4b04 	ldr.w	r4, [r9], #4
 8004aa0:	f8be a000 	ldrh.w	sl, [lr]
 8004aa4:	b2a3      	uxth	r3, r4
 8004aa6:	fb0b a303 	mla	r3, fp, r3, sl
 8004aaa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004aae:	f8de 4000 	ldr.w	r4, [lr]
 8004ab2:	4443      	add	r3, r8
 8004ab4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004ab8:	fb0b 840a 	mla	r4, fp, sl, r8
 8004abc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004ac0:	46f2      	mov	sl, lr
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004ac8:	454f      	cmp	r7, r9
 8004aca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004ace:	f84a 3b04 	str.w	r3, [sl], #4
 8004ad2:	d901      	bls.n	8004ad8 <__multiply+0xb4>
 8004ad4:	46d6      	mov	lr, sl
 8004ad6:	e7e1      	b.n	8004a9c <__multiply+0x78>
 8004ad8:	f8ce 8004 	str.w	r8, [lr, #4]
 8004adc:	9b01      	ldr	r3, [sp, #4]
 8004ade:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004ae2:	3204      	adds	r2, #4
 8004ae4:	f1ba 0f00 	cmp.w	sl, #0
 8004ae8:	d021      	beq.n	8004b2e <__multiply+0x10a>
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	462c      	mov	r4, r5
 8004aee:	4689      	mov	r9, r1
 8004af0:	f04f 0800 	mov.w	r8, #0
 8004af4:	f8b9 e000 	ldrh.w	lr, [r9]
 8004af8:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8004afc:	fb0a be0e 	mla	lr, sl, lr, fp
 8004b00:	44f0      	add	r8, lr
 8004b02:	46a3      	mov	fp, r4
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004b0a:	f84b 3b04 	str.w	r3, [fp], #4
 8004b0e:	f859 3b04 	ldr.w	r3, [r9], #4
 8004b12:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	fb0a e303 	mla	r3, sl, r3, lr
 8004b1c:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8004b20:	454f      	cmp	r7, r9
 8004b22:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8004b26:	d901      	bls.n	8004b2c <__multiply+0x108>
 8004b28:	465c      	mov	r4, fp
 8004b2a:	e7e3      	b.n	8004af4 <__multiply+0xd0>
 8004b2c:	6063      	str	r3, [r4, #4]
 8004b2e:	3504      	adds	r5, #4
 8004b30:	e7a7      	b.n	8004a82 <__multiply+0x5e>
 8004b32:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8004b36:	b913      	cbnz	r3, 8004b3e <__multiply+0x11a>
 8004b38:	3e01      	subs	r6, #1
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	dcf9      	bgt.n	8004b32 <__multiply+0x10e>
 8004b3e:	6106      	str	r6, [r0, #16]
 8004b40:	b003      	add	sp, #12
 8004b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004b48 <__pow5mult>:
 8004b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b4c:	4615      	mov	r5, r2
 8004b4e:	f012 0203 	ands.w	r2, r2, #3
 8004b52:	4606      	mov	r6, r0
 8004b54:	460f      	mov	r7, r1
 8004b56:	d007      	beq.n	8004b68 <__pow5mult+0x20>
 8004b58:	3a01      	subs	r2, #1
 8004b5a:	4c21      	ldr	r4, [pc, #132]	; (8004be0 <__pow5mult+0x98>)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b62:	f7ff fe90 	bl	8004886 <__multadd>
 8004b66:	4607      	mov	r7, r0
 8004b68:	10ad      	asrs	r5, r5, #2
 8004b6a:	d036      	beq.n	8004bda <__pow5mult+0x92>
 8004b6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b6e:	b93c      	cbnz	r4, 8004b80 <__pow5mult+0x38>
 8004b70:	2010      	movs	r0, #16
 8004b72:	f7fd fe25 	bl	80027c0 <malloc>
 8004b76:	6270      	str	r0, [r6, #36]	; 0x24
 8004b78:	6044      	str	r4, [r0, #4]
 8004b7a:	6084      	str	r4, [r0, #8]
 8004b7c:	6004      	str	r4, [r0, #0]
 8004b7e:	60c4      	str	r4, [r0, #12]
 8004b80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b88:	b94c      	cbnz	r4, 8004b9e <__pow5mult+0x56>
 8004b8a:	f240 2171 	movw	r1, #625	; 0x271
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f7ff ff3f 	bl	8004a12 <__i2b>
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	6003      	str	r3, [r0, #0]
 8004b9e:	f04f 0800 	mov.w	r8, #0
 8004ba2:	07eb      	lsls	r3, r5, #31
 8004ba4:	d50a      	bpl.n	8004bbc <__pow5mult+0x74>
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	4622      	mov	r2, r4
 8004baa:	4630      	mov	r0, r6
 8004bac:	f7ff ff3a 	bl	8004a24 <__multiply>
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	4681      	mov	r9, r0
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f7ff fe4f 	bl	8004858 <_Bfree>
 8004bba:	464f      	mov	r7, r9
 8004bbc:	106d      	asrs	r5, r5, #1
 8004bbe:	d00c      	beq.n	8004bda <__pow5mult+0x92>
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	b108      	cbz	r0, 8004bc8 <__pow5mult+0x80>
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	e7ec      	b.n	8004ba2 <__pow5mult+0x5a>
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7ff ff29 	bl	8004a24 <__multiply>
 8004bd2:	6020      	str	r0, [r4, #0]
 8004bd4:	f8c0 8000 	str.w	r8, [r0]
 8004bd8:	e7f4      	b.n	8004bc4 <__pow5mult+0x7c>
 8004bda:	4638      	mov	r0, r7
 8004bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be0:	08005cc8 	.word	0x08005cc8

08004be4 <__lshift>:
 8004be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	460c      	mov	r4, r1
 8004bea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004bee:	6926      	ldr	r6, [r4, #16]
 8004bf0:	6849      	ldr	r1, [r1, #4]
 8004bf2:	68a3      	ldr	r3, [r4, #8]
 8004bf4:	4456      	add	r6, sl
 8004bf6:	4607      	mov	r7, r0
 8004bf8:	4691      	mov	r9, r2
 8004bfa:	1c75      	adds	r5, r6, #1
 8004bfc:	42ab      	cmp	r3, r5
 8004bfe:	da02      	bge.n	8004c06 <__lshift+0x22>
 8004c00:	3101      	adds	r1, #1
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	e7fa      	b.n	8004bfc <__lshift+0x18>
 8004c06:	4638      	mov	r0, r7
 8004c08:	f7ff fdf1 	bl	80047ee <_Balloc>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4680      	mov	r8, r0
 8004c10:	f100 0114 	add.w	r1, r0, #20
 8004c14:	461a      	mov	r2, r3
 8004c16:	4553      	cmp	r3, sl
 8004c18:	da03      	bge.n	8004c22 <__lshift+0x3e>
 8004c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	e7f9      	b.n	8004c16 <__lshift+0x32>
 8004c22:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8004c26:	6920      	ldr	r0, [r4, #16]
 8004c28:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004c2c:	f019 091f 	ands.w	r9, r9, #31
 8004c30:	f104 0114 	add.w	r1, r4, #20
 8004c34:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004c38:	d014      	beq.n	8004c64 <__lshift+0x80>
 8004c3a:	f1c9 0c20 	rsb	ip, r9, #32
 8004c3e:	2200      	movs	r2, #0
 8004c40:	6808      	ldr	r0, [r1, #0]
 8004c42:	fa00 f009 	lsl.w	r0, r0, r9
 8004c46:	4302      	orrs	r2, r0
 8004c48:	469a      	mov	sl, r3
 8004c4a:	f843 2b04 	str.w	r2, [r3], #4
 8004c4e:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c52:	458e      	cmp	lr, r1
 8004c54:	fa22 f20c 	lsr.w	r2, r2, ip
 8004c58:	d8f2      	bhi.n	8004c40 <__lshift+0x5c>
 8004c5a:	f8ca 2004 	str.w	r2, [sl, #4]
 8004c5e:	b142      	cbz	r2, 8004c72 <__lshift+0x8e>
 8004c60:	1cb5      	adds	r5, r6, #2
 8004c62:	e006      	b.n	8004c72 <__lshift+0x8e>
 8004c64:	3b04      	subs	r3, #4
 8004c66:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c6a:	f843 2f04 	str.w	r2, [r3, #4]!
 8004c6e:	458e      	cmp	lr, r1
 8004c70:	d8f9      	bhi.n	8004c66 <__lshift+0x82>
 8004c72:	3d01      	subs	r5, #1
 8004c74:	4638      	mov	r0, r7
 8004c76:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	f7ff fdec 	bl	8004858 <_Bfree>
 8004c80:	4640      	mov	r0, r8
 8004c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c86 <__mcmp>:
 8004c86:	6903      	ldr	r3, [r0, #16]
 8004c88:	690a      	ldr	r2, [r1, #16]
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	d111      	bne.n	8004cb4 <__mcmp+0x2e>
 8004c90:	0092      	lsls	r2, r2, #2
 8004c92:	3014      	adds	r0, #20
 8004c94:	3114      	adds	r1, #20
 8004c96:	1883      	adds	r3, r0, r2
 8004c98:	440a      	add	r2, r1
 8004c9a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004c9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004ca2:	428c      	cmp	r4, r1
 8004ca4:	d002      	beq.n	8004cac <__mcmp+0x26>
 8004ca6:	d307      	bcc.n	8004cb8 <__mcmp+0x32>
 8004ca8:	2001      	movs	r0, #1
 8004caa:	bd10      	pop	{r4, pc}
 8004cac:	4298      	cmp	r0, r3
 8004cae:	d3f4      	bcc.n	8004c9a <__mcmp+0x14>
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	bd10      	pop	{r4, pc}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd10      	pop	{r4, pc}
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	bd10      	pop	{r4, pc}

08004cbe <__mdiff>:
 8004cbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4620      	mov	r0, r4
 8004cca:	4615      	mov	r5, r2
 8004ccc:	f7ff ffdb 	bl	8004c86 <__mcmp>
 8004cd0:	1e06      	subs	r6, r0, #0
 8004cd2:	d108      	bne.n	8004ce6 <__mdiff+0x28>
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f7ff fd89 	bl	80047ee <_Balloc>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	6103      	str	r3, [r0, #16]
 8004ce0:	6146      	str	r6, [r0, #20]
 8004ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce6:	bfbc      	itt	lt
 8004ce8:	4623      	movlt	r3, r4
 8004cea:	462c      	movlt	r4, r5
 8004cec:	4638      	mov	r0, r7
 8004cee:	6861      	ldr	r1, [r4, #4]
 8004cf0:	bfba      	itte	lt
 8004cf2:	461d      	movlt	r5, r3
 8004cf4:	2601      	movlt	r6, #1
 8004cf6:	2600      	movge	r6, #0
 8004cf8:	f7ff fd79 	bl	80047ee <_Balloc>
 8004cfc:	692b      	ldr	r3, [r5, #16]
 8004cfe:	60c6      	str	r6, [r0, #12]
 8004d00:	6926      	ldr	r6, [r4, #16]
 8004d02:	f105 0914 	add.w	r9, r5, #20
 8004d06:	3414      	adds	r4, #20
 8004d08:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8004d0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004d10:	f100 0514 	add.w	r5, r0, #20
 8004d14:	f04f 0c00 	mov.w	ip, #0
 8004d18:	f854 3b04 	ldr.w	r3, [r4], #4
 8004d1c:	f859 2b04 	ldr.w	r2, [r9], #4
 8004d20:	fa1c f183 	uxtah	r1, ip, r3
 8004d24:	fa1f fe82 	uxth.w	lr, r2
 8004d28:	0c12      	lsrs	r2, r2, #16
 8004d2a:	ebce 0101 	rsb	r1, lr, r1
 8004d2e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8004d32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004d36:	b289      	uxth	r1, r1
 8004d38:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004d3c:	45c8      	cmp	r8, r9
 8004d3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004d42:	46a6      	mov	lr, r4
 8004d44:	f845 3b04 	str.w	r3, [r5], #4
 8004d48:	d8e6      	bhi.n	8004d18 <__mdiff+0x5a>
 8004d4a:	45be      	cmp	lr, r7
 8004d4c:	d20e      	bcs.n	8004d6c <__mdiff+0xae>
 8004d4e:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004d52:	fa1c f281 	uxtah	r2, ip, r1
 8004d56:	1413      	asrs	r3, r2, #16
 8004d58:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8004d5c:	b292      	uxth	r2, r2
 8004d5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004d66:	f845 2b04 	str.w	r2, [r5], #4
 8004d6a:	e7ee      	b.n	8004d4a <__mdiff+0x8c>
 8004d6c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004d70:	b90b      	cbnz	r3, 8004d76 <__mdiff+0xb8>
 8004d72:	3e01      	subs	r6, #1
 8004d74:	e7fa      	b.n	8004d6c <__mdiff+0xae>
 8004d76:	6106      	str	r6, [r0, #16]
 8004d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004d7c <__ulp>:
 8004d7c:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <__ulp+0x4c>)
 8004d7e:	ee10 2a90 	vmov	r2, s1
 8004d82:	401a      	ands	r2, r3
 8004d84:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	dd02      	ble.n	8004d92 <__ulp+0x16>
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	4619      	mov	r1, r3
 8004d90:	e017      	b.n	8004dc2 <__ulp+0x46>
 8004d92:	425b      	negs	r3, r3
 8004d94:	151b      	asrs	r3, r3, #20
 8004d96:	2b13      	cmp	r3, #19
 8004d98:	f04f 0000 	mov.w	r0, #0
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	dc04      	bgt.n	8004dac <__ulp+0x30>
 8004da2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004da6:	fa42 f103 	asr.w	r1, r2, r3
 8004daa:	e00a      	b.n	8004dc2 <__ulp+0x46>
 8004dac:	3b14      	subs	r3, #20
 8004dae:	2b1e      	cmp	r3, #30
 8004db0:	f04f 0201 	mov.w	r2, #1
 8004db4:	bfda      	itte	le
 8004db6:	f1c3 031f 	rsble	r3, r3, #31
 8004dba:	fa02 f303 	lslle.w	r3, r2, r3
 8004dbe:	4613      	movgt	r3, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	ec41 0b10 	vmov	d0, r0, r1
 8004dc6:	4770      	bx	lr
 8004dc8:	7ff00000 	.word	0x7ff00000

08004dcc <__b2d>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	6905      	ldr	r5, [r0, #16]
 8004dd0:	f100 0614 	add.w	r6, r0, #20
 8004dd4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8004dd8:	1f2f      	subs	r7, r5, #4
 8004dda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7ff fdca 	bl	8004978 <__hi0bits>
 8004de4:	f1c0 0320 	rsb	r3, r0, #32
 8004de8:	280a      	cmp	r0, #10
 8004dea:	600b      	str	r3, [r1, #0]
 8004dec:	dc14      	bgt.n	8004e18 <__b2d+0x4c>
 8004dee:	f1c0 0e0b 	rsb	lr, r0, #11
 8004df2:	fa24 f10e 	lsr.w	r1, r4, lr
 8004df6:	42be      	cmp	r6, r7
 8004df8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8004dfc:	bf34      	ite	cc
 8004dfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8004e02:	2100      	movcs	r1, #0
 8004e04:	3015      	adds	r0, #21
 8004e06:	fa04 f000 	lsl.w	r0, r4, r0
 8004e0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8004e0e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004e12:	ea40 0201 	orr.w	r2, r0, r1
 8004e16:	e023      	b.n	8004e60 <__b2d+0x94>
 8004e18:	42be      	cmp	r6, r7
 8004e1a:	bf3a      	itte	cc
 8004e1c:	f1a5 0708 	subcc.w	r7, r5, #8
 8004e20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8004e24:	2100      	movcs	r1, #0
 8004e26:	380b      	subs	r0, #11
 8004e28:	d015      	beq.n	8004e56 <__b2d+0x8a>
 8004e2a:	4084      	lsls	r4, r0
 8004e2c:	f1c0 0520 	rsb	r5, r0, #32
 8004e30:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8004e34:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8004e38:	42b7      	cmp	r7, r6
 8004e3a:	fa21 fe05 	lsr.w	lr, r1, r5
 8004e3e:	ea44 030e 	orr.w	r3, r4, lr
 8004e42:	bf8c      	ite	hi
 8004e44:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8004e48:	2400      	movls	r4, #0
 8004e4a:	fa01 f000 	lsl.w	r0, r1, r0
 8004e4e:	40ec      	lsrs	r4, r5
 8004e50:	ea40 0204 	orr.w	r2, r0, r4
 8004e54:	e004      	b.n	8004e60 <__b2d+0x94>
 8004e56:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8004e5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004e5e:	460a      	mov	r2, r1
 8004e60:	ec43 2b10 	vmov	d0, r2, r3
 8004e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e66 <__d2b>:
 8004e66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e6a:	460e      	mov	r6, r1
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	ec59 8b10 	vmov	r8, r9, d0
 8004e72:	4615      	mov	r5, r2
 8004e74:	f7ff fcbb 	bl	80047ee <_Balloc>
 8004e78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e82:	b10c      	cbz	r4, 8004e88 <__d2b+0x22>
 8004e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	f1b8 0f00 	cmp.w	r8, #0
 8004e8e:	d019      	beq.n	8004ec4 <__d2b+0x5e>
 8004e90:	a802      	add	r0, sp, #8
 8004e92:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004e96:	f7ff fd8f 	bl	80049b8 <__lo0bits>
 8004e9a:	9b00      	ldr	r3, [sp, #0]
 8004e9c:	b148      	cbz	r0, 8004eb2 <__d2b+0x4c>
 8004e9e:	9a01      	ldr	r2, [sp, #4]
 8004ea0:	f1c0 0120 	rsb	r1, r0, #32
 8004ea4:	fa02 f101 	lsl.w	r1, r2, r1
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	40c2      	lsrs	r2, r0
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	9201      	str	r2, [sp, #4]
 8004eb0:	e000      	b.n	8004eb4 <__d2b+0x4e>
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	9b01      	ldr	r3, [sp, #4]
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf14      	ite	ne
 8004ebc:	2102      	movne	r1, #2
 8004ebe:	2101      	moveq	r1, #1
 8004ec0:	6139      	str	r1, [r7, #16]
 8004ec2:	e007      	b.n	8004ed4 <__d2b+0x6e>
 8004ec4:	a801      	add	r0, sp, #4
 8004ec6:	f7ff fd77 	bl	80049b8 <__lo0bits>
 8004eca:	9b01      	ldr	r3, [sp, #4]
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	2101      	movs	r1, #1
 8004ed0:	6139      	str	r1, [r7, #16]
 8004ed2:	3020      	adds	r0, #32
 8004ed4:	b134      	cbz	r4, 8004ee4 <__d2b+0x7e>
 8004ed6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004eda:	4404      	add	r4, r0
 8004edc:	6034      	str	r4, [r6, #0]
 8004ede:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004ee2:	e009      	b.n	8004ef8 <__d2b+0x92>
 8004ee4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004ee8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004eec:	6030      	str	r0, [r6, #0]
 8004eee:	6918      	ldr	r0, [r3, #16]
 8004ef0:	f7ff fd42 	bl	8004978 <__hi0bits>
 8004ef4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004ef8:	6028      	str	r0, [r5, #0]
 8004efa:	4638      	mov	r0, r7
 8004efc:	b003      	add	sp, #12
 8004efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004f02 <__ratio>:
 8004f02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f06:	4688      	mov	r8, r1
 8004f08:	4669      	mov	r1, sp
 8004f0a:	4681      	mov	r9, r0
 8004f0c:	f7ff ff5e 	bl	8004dcc <__b2d>
 8004f10:	a901      	add	r1, sp, #4
 8004f12:	4640      	mov	r0, r8
 8004f14:	ec55 4b10 	vmov	r4, r5, d0
 8004f18:	f7ff ff58 	bl	8004dcc <__b2d>
 8004f1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004f20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004f24:	1a9a      	subs	r2, r3, r2
 8004f26:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8004f2a:	1ac9      	subs	r1, r1, r3
 8004f2c:	ec57 6b10 	vmov	r6, r7, d0
 8004f30:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bfcc      	ite	gt
 8004f38:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8004f3c:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8004f40:	4632      	mov	r2, r6
 8004f42:	463b      	mov	r3, r7
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	f7fb fc8c 	bl	8000864 <__aeabi_ddiv>
 8004f4c:	ec41 0b10 	vmov	d0, r0, r1
 8004f50:	b003      	add	sp, #12
 8004f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004f56 <__copybits>:
 8004f56:	3901      	subs	r1, #1
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	1149      	asrs	r1, r1, #5
 8004f5c:	6914      	ldr	r4, [r2, #16]
 8004f5e:	3101      	adds	r1, #1
 8004f60:	f102 0314 	add.w	r3, r2, #20
 8004f64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	4602      	mov	r2, r0
 8004f70:	d204      	bcs.n	8004f7c <__copybits+0x26>
 8004f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f76:	f840 2b04 	str.w	r2, [r0], #4
 8004f7a:	e7f7      	b.n	8004f6c <__copybits+0x16>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	428a      	cmp	r2, r1
 8004f80:	d202      	bcs.n	8004f88 <__copybits+0x32>
 8004f82:	f842 3b04 	str.w	r3, [r2], #4
 8004f86:	e7fa      	b.n	8004f7e <__copybits+0x28>
 8004f88:	bd10      	pop	{r4, pc}

08004f8a <__any_on>:
 8004f8a:	f100 0214 	add.w	r2, r0, #20
 8004f8e:	6900      	ldr	r0, [r0, #16]
 8004f90:	114b      	asrs	r3, r1, #5
 8004f92:	4298      	cmp	r0, r3
 8004f94:	b510      	push	{r4, lr}
 8004f96:	db0c      	blt.n	8004fb2 <__any_on+0x28>
 8004f98:	dd0c      	ble.n	8004fb4 <__any_on+0x2a>
 8004f9a:	f011 011f 	ands.w	r1, r1, #31
 8004f9e:	d009      	beq.n	8004fb4 <__any_on+0x2a>
 8004fa0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004fa4:	fa24 f001 	lsr.w	r0, r4, r1
 8004fa8:	fa00 f101 	lsl.w	r1, r0, r1
 8004fac:	428c      	cmp	r4, r1
 8004fae:	d10c      	bne.n	8004fca <__any_on+0x40>
 8004fb0:	e000      	b.n	8004fb4 <__any_on+0x2a>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d904      	bls.n	8004fc6 <__any_on+0x3c>
 8004fbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	d0f9      	beq.n	8004fb8 <__any_on+0x2e>
 8004fc4:	e001      	b.n	8004fca <__any_on+0x40>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	bd10      	pop	{r4, pc}
 8004fca:	2001      	movs	r0, #1
 8004fcc:	bd10      	pop	{r4, pc}

08004fce <_calloc_r>:
 8004fce:	b538      	push	{r3, r4, r5, lr}
 8004fd0:	fb02 f401 	mul.w	r4, r2, r1
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	f7fd fe9f 	bl	8002d18 <_malloc_r>
 8004fda:	4605      	mov	r5, r0
 8004fdc:	b118      	cbz	r0, 8004fe6 <_calloc_r+0x18>
 8004fde:	4622      	mov	r2, r4
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f000 f8d7 	bl	8005194 <memset>
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	bd38      	pop	{r3, r4, r5, pc}
	...

08004fec <siscanf>:
 8004fec:	b40e      	push	{r1, r2, r3}
 8004fee:	b530      	push	{r4, r5, lr}
 8004ff0:	b09c      	sub	sp, #112	; 0x70
 8004ff2:	ac1f      	add	r4, sp, #124	; 0x7c
 8004ff4:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004ff8:	f854 5b04 	ldr.w	r5, [r4], #4
 8004ffc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005000:	9002      	str	r0, [sp, #8]
 8005002:	9006      	str	r0, [sp, #24]
 8005004:	f7fb f8ee 	bl	80001e4 <strlen>
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <siscanf+0x4c>)
 800500a:	9003      	str	r0, [sp, #12]
 800500c:	9007      	str	r0, [sp, #28]
 800500e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005010:	480a      	ldr	r0, [pc, #40]	; (800503c <siscanf+0x50>)
 8005012:	9401      	str	r4, [sp, #4]
 8005014:	2300      	movs	r3, #0
 8005016:	930f      	str	r3, [sp, #60]	; 0x3c
 8005018:	9314      	str	r3, [sp, #80]	; 0x50
 800501a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800501e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005022:	462a      	mov	r2, r5
 8005024:	4623      	mov	r3, r4
 8005026:	a902      	add	r1, sp, #8
 8005028:	6800      	ldr	r0, [r0, #0]
 800502a:	f000 f917 	bl	800525c <__ssvfiscanf_r>
 800502e:	b01c      	add	sp, #112	; 0x70
 8005030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005034:	b003      	add	sp, #12
 8005036:	4770      	bx	lr
 8005038:	08005041 	.word	0x08005041
 800503c:	200000c8 	.word	0x200000c8

08005040 <__seofread>:
 8005040:	2000      	movs	r0, #0
 8005042:	4770      	bx	lr

08005044 <strcpy>:
 8005044:	4603      	mov	r3, r0
 8005046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800504a:	f803 2b01 	strb.w	r2, [r3], #1
 800504e:	2a00      	cmp	r2, #0
 8005050:	d1f9      	bne.n	8005046 <strcpy+0x2>
 8005052:	4770      	bx	lr

08005054 <strncmp>:
 8005054:	b530      	push	{r4, r5, lr}
 8005056:	b182      	cbz	r2, 800507a <strncmp+0x26>
 8005058:	1e45      	subs	r5, r0, #1
 800505a:	3901      	subs	r1, #1
 800505c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8005060:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005064:	42a3      	cmp	r3, r4
 8005066:	d106      	bne.n	8005076 <strncmp+0x22>
 8005068:	43ec      	mvns	r4, r5
 800506a:	4414      	add	r4, r2
 800506c:	42e0      	cmn	r0, r4
 800506e:	d001      	beq.n	8005074 <strncmp+0x20>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f3      	bne.n	800505c <strncmp+0x8>
 8005074:	461c      	mov	r4, r3
 8005076:	1b18      	subs	r0, r3, r4
 8005078:	bd30      	pop	{r4, r5, pc}
 800507a:	4610      	mov	r0, r2
 800507c:	bd30      	pop	{r4, r5, pc}
	...

08005080 <_strtoul_r>:
 8005080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005084:	4680      	mov	r8, r0
 8005086:	483c      	ldr	r0, [pc, #240]	; (8005178 <_strtoul_r+0xf8>)
 8005088:	f8d0 9000 	ldr.w	r9, [r0]
 800508c:	460e      	mov	r6, r1
 800508e:	4635      	mov	r5, r6
 8005090:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005094:	eb09 0004 	add.w	r0, r9, r4
 8005098:	7840      	ldrb	r0, [r0, #1]
 800509a:	f000 0008 	and.w	r0, r0, #8
 800509e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80050a2:	b108      	cbz	r0, 80050a8 <_strtoul_r+0x28>
 80050a4:	462e      	mov	r6, r5
 80050a6:	e7f2      	b.n	800508e <_strtoul_r+0xe>
 80050a8:	2c2d      	cmp	r4, #45	; 0x2d
 80050aa:	d103      	bne.n	80050b4 <_strtoul_r+0x34>
 80050ac:	1cb5      	adds	r5, r6, #2
 80050ae:	7874      	ldrb	r4, [r6, #1]
 80050b0:	2701      	movs	r7, #1
 80050b2:	e003      	b.n	80050bc <_strtoul_r+0x3c>
 80050b4:	2c2b      	cmp	r4, #43	; 0x2b
 80050b6:	bf04      	itt	eq
 80050b8:	7874      	ldrbeq	r4, [r6, #1]
 80050ba:	1cb5      	addeq	r5, r6, #2
 80050bc:	b113      	cbz	r3, 80050c4 <_strtoul_r+0x44>
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d10a      	bne.n	80050d8 <_strtoul_r+0x58>
 80050c2:	e053      	b.n	800516c <_strtoul_r+0xec>
 80050c4:	2c30      	cmp	r4, #48	; 0x30
 80050c6:	d14f      	bne.n	8005168 <_strtoul_r+0xe8>
 80050c8:	7828      	ldrb	r0, [r5, #0]
 80050ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80050ce:	2858      	cmp	r0, #88	; 0x58
 80050d0:	d145      	bne.n	800515e <_strtoul_r+0xde>
 80050d2:	786c      	ldrb	r4, [r5, #1]
 80050d4:	2310      	movs	r3, #16
 80050d6:	3502      	adds	r5, #2
 80050d8:	f04f 3cff 	mov.w	ip, #4294967295
 80050dc:	2600      	movs	r6, #0
 80050de:	fbbc fcf3 	udiv	ip, ip, r3
 80050e2:	fb03 fa0c 	mul.w	sl, r3, ip
 80050e6:	ea6f 0a0a 	mvn.w	sl, sl
 80050ea:	4630      	mov	r0, r6
 80050ec:	eb09 0e04 	add.w	lr, r9, r4
 80050f0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80050f4:	f01e 0f04 	tst.w	lr, #4
 80050f8:	d001      	beq.n	80050fe <_strtoul_r+0x7e>
 80050fa:	3c30      	subs	r4, #48	; 0x30
 80050fc:	e00b      	b.n	8005116 <_strtoul_r+0x96>
 80050fe:	f01e 0e03 	ands.w	lr, lr, #3
 8005102:	d01a      	beq.n	800513a <_strtoul_r+0xba>
 8005104:	f1be 0f01 	cmp.w	lr, #1
 8005108:	bf0c      	ite	eq
 800510a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 800510e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8005112:	ebce 0404 	rsb	r4, lr, r4
 8005116:	42a3      	cmp	r3, r4
 8005118:	dd0f      	ble.n	800513a <_strtoul_r+0xba>
 800511a:	2e00      	cmp	r6, #0
 800511c:	db08      	blt.n	8005130 <_strtoul_r+0xb0>
 800511e:	4560      	cmp	r0, ip
 8005120:	d806      	bhi.n	8005130 <_strtoul_r+0xb0>
 8005122:	d101      	bne.n	8005128 <_strtoul_r+0xa8>
 8005124:	4554      	cmp	r4, sl
 8005126:	dc03      	bgt.n	8005130 <_strtoul_r+0xb0>
 8005128:	fb03 4000 	mla	r0, r3, r0, r4
 800512c:	2601      	movs	r6, #1
 800512e:	e001      	b.n	8005134 <_strtoul_r+0xb4>
 8005130:	f04f 36ff 	mov.w	r6, #4294967295
 8005134:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005138:	e7d8      	b.n	80050ec <_strtoul_r+0x6c>
 800513a:	2e00      	cmp	r6, #0
 800513c:	da07      	bge.n	800514e <_strtoul_r+0xce>
 800513e:	2322      	movs	r3, #34	; 0x22
 8005140:	f8c8 3000 	str.w	r3, [r8]
 8005144:	f04f 30ff 	mov.w	r0, #4294967295
 8005148:	b92a      	cbnz	r2, 8005156 <_strtoul_r+0xd6>
 800514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514e:	b107      	cbz	r7, 8005152 <_strtoul_r+0xd2>
 8005150:	4240      	negs	r0, r0
 8005152:	b172      	cbz	r2, 8005172 <_strtoul_r+0xf2>
 8005154:	b106      	cbz	r6, 8005158 <_strtoul_r+0xd8>
 8005156:	1e69      	subs	r1, r5, #1
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515e:	2430      	movs	r4, #48	; 0x30
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1b9      	bne.n	80050d8 <_strtoul_r+0x58>
 8005164:	2308      	movs	r3, #8
 8005166:	e7b7      	b.n	80050d8 <_strtoul_r+0x58>
 8005168:	230a      	movs	r3, #10
 800516a:	e7b5      	b.n	80050d8 <_strtoul_r+0x58>
 800516c:	2c30      	cmp	r4, #48	; 0x30
 800516e:	d0ab      	beq.n	80050c8 <_strtoul_r+0x48>
 8005170:	e7b2      	b.n	80050d8 <_strtoul_r+0x58>
 8005172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005176:	bf00      	nop
 8005178:	20000104 	.word	0x20000104

0800517c <strtoul>:
 800517c:	4613      	mov	r3, r2
 800517e:	460a      	mov	r2, r1
 8005180:	4601      	mov	r1, r0
 8005182:	4802      	ldr	r0, [pc, #8]	; (800518c <strtoul+0x10>)
 8005184:	6800      	ldr	r0, [r0, #0]
 8005186:	f7ff bf7b 	b.w	8005080 <_strtoul_r>
 800518a:	bf00      	nop
 800518c:	200000c8 	.word	0x200000c8

08005190 <__env_lock>:
 8005190:	4770      	bx	lr

08005192 <__env_unlock>:
 8005192:	4770      	bx	lr

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d002      	beq.n	80051a2 <memset+0xe>
 800519c:	f803 1b01 	strb.w	r1, [r3], #1
 80051a0:	e7fa      	b.n	8005198 <memset+0x4>
 80051a2:	4770      	bx	lr

080051a4 <_sungetc_r>:
 80051a4:	1c4b      	adds	r3, r1, #1
 80051a6:	b570      	push	{r4, r5, r6, lr}
 80051a8:	460e      	mov	r6, r1
 80051aa:	4614      	mov	r4, r2
 80051ac:	d102      	bne.n	80051b4 <_sungetc_r+0x10>
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	8993      	ldrh	r3, [r2, #12]
 80051b6:	f023 0320 	bic.w	r3, r3, #32
 80051ba:	8193      	strh	r3, [r2, #12]
 80051bc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80051be:	6852      	ldr	r2, [r2, #4]
 80051c0:	b2cd      	uxtb	r5, r1
 80051c2:	b183      	cbz	r3, 80051e6 <_sungetc_r+0x42>
 80051c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051c6:	429a      	cmp	r2, r3
 80051c8:	da07      	bge.n	80051da <_sungetc_r+0x36>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	1e5a      	subs	r2, r3, #1
 80051ce:	6022      	str	r2, [r4, #0]
 80051d0:	f803 6c01 	strb.w	r6, [r3, #-1]
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	3301      	adds	r3, #1
 80051d8:	e01f      	b.n	800521a <_sungetc_r+0x76>
 80051da:	4621      	mov	r1, r4
 80051dc:	f000 fba0 	bl	8005920 <__submore>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d0f2      	beq.n	80051ca <_sungetc_r+0x26>
 80051e4:	e7e3      	b.n	80051ae <_sungetc_r+0xa>
 80051e6:	6921      	ldr	r1, [r4, #16]
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	b151      	cbz	r1, 8005202 <_sungetc_r+0x5e>
 80051ec:	4299      	cmp	r1, r3
 80051ee:	d208      	bcs.n	8005202 <_sungetc_r+0x5e>
 80051f0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80051f4:	428d      	cmp	r5, r1
 80051f6:	d104      	bne.n	8005202 <_sungetc_r+0x5e>
 80051f8:	3b01      	subs	r3, #1
 80051fa:	3201      	adds	r2, #1
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	6062      	str	r2, [r4, #4]
 8005200:	e00c      	b.n	800521c <_sungetc_r+0x78>
 8005202:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005208:	6363      	str	r3, [r4, #52]	; 0x34
 800520a:	2303      	movs	r3, #3
 800520c:	63a3      	str	r3, [r4, #56]	; 0x38
 800520e:	4623      	mov	r3, r4
 8005210:	6422      	str	r2, [r4, #64]	; 0x40
 8005212:	f803 6f46 	strb.w	r6, [r3, #70]!
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	2301      	movs	r3, #1
 800521a:	6063      	str	r3, [r4, #4]
 800521c:	4628      	mov	r0, r5
 800521e:	bd70      	pop	{r4, r5, r6, pc}

08005220 <__ssrefill_r>:
 8005220:	b510      	push	{r4, lr}
 8005222:	460c      	mov	r4, r1
 8005224:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005226:	b169      	cbz	r1, 8005244 <__ssrefill_r+0x24>
 8005228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800522c:	4299      	cmp	r1, r3
 800522e:	d001      	beq.n	8005234 <__ssrefill_r+0x14>
 8005230:	f7fd fd24 	bl	8002c7c <_free_r>
 8005234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	2000      	movs	r0, #0
 800523a:	6360      	str	r0, [r4, #52]	; 0x34
 800523c:	b113      	cbz	r3, 8005244 <__ssrefill_r+0x24>
 800523e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd10      	pop	{r4, pc}
 8005244:	6923      	ldr	r3, [r4, #16]
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	2300      	movs	r3, #0
 800524a:	6063      	str	r3, [r4, #4]
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	f043 0320 	orr.w	r3, r3, #32
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	bd10      	pop	{r4, pc}
	...

0800525c <__ssvfiscanf_r>:
 800525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8005264:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005500 <__ssvfiscanf_r+0x2a4>
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	2300      	movs	r3, #0
 800526c:	9346      	str	r3, [sp, #280]	; 0x118
 800526e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005270:	4b9f      	ldr	r3, [pc, #636]	; (80054f0 <__ssvfiscanf_r+0x294>)
 8005272:	93a2      	str	r3, [sp, #648]	; 0x288
 8005274:	f10d 080c 	add.w	r8, sp, #12
 8005278:	4b9e      	ldr	r3, [pc, #632]	; (80054f4 <__ssvfiscanf_r+0x298>)
 800527a:	f8df b27c 	ldr.w	fp, [pc, #636]	; 80054f8 <__ssvfiscanf_r+0x29c>
 800527e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8005282:	4607      	mov	r7, r0
 8005284:	460d      	mov	r5, r1
 8005286:	93a3      	str	r3, [sp, #652]	; 0x28c
 8005288:	46ca      	mov	sl, r9
 800528a:	7814      	ldrb	r4, [r2, #0]
 800528c:	2c00      	cmp	r4, #0
 800528e:	f000 8127 	beq.w	80054e0 <__ssvfiscanf_r+0x284>
 8005292:	f8d9 3000 	ldr.w	r3, [r9]
 8005296:	4423      	add	r3, r4
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80052a2:	b1f3      	cbz	r3, 80052e2 <__ssvfiscanf_r+0x86>
 80052a4:	686b      	ldr	r3, [r5, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dd10      	ble.n	80052cc <__ssvfiscanf_r+0x70>
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	f8da 0000 	ldr.w	r0, [sl]
 80052b0:	7819      	ldrb	r1, [r3, #0]
 80052b2:	4401      	add	r1, r0
 80052b4:	7849      	ldrb	r1, [r1, #1]
 80052b6:	070c      	lsls	r4, r1, #28
 80052b8:	d510      	bpl.n	80052dc <__ssvfiscanf_r+0x80>
 80052ba:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80052bc:	3101      	adds	r1, #1
 80052be:	9147      	str	r1, [sp, #284]	; 0x11c
 80052c0:	6869      	ldr	r1, [r5, #4]
 80052c2:	3301      	adds	r3, #1
 80052c4:	3901      	subs	r1, #1
 80052c6:	6069      	str	r1, [r5, #4]
 80052c8:	602b      	str	r3, [r5, #0]
 80052ca:	e7eb      	b.n	80052a4 <__ssvfiscanf_r+0x48>
 80052cc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80052ce:	9200      	str	r2, [sp, #0]
 80052d0:	4629      	mov	r1, r5
 80052d2:	4638      	mov	r0, r7
 80052d4:	4798      	blx	r3
 80052d6:	9a00      	ldr	r2, [sp, #0]
 80052d8:	2800      	cmp	r0, #0
 80052da:	d0e6      	beq.n	80052aa <__ssvfiscanf_r+0x4e>
 80052dc:	1c56      	adds	r6, r2, #1
 80052de:	4632      	mov	r2, r6
 80052e0:	e7d3      	b.n	800528a <__ssvfiscanf_r+0x2e>
 80052e2:	2c25      	cmp	r4, #37	; 0x25
 80052e4:	f102 0601 	add.w	r6, r2, #1
 80052e8:	d152      	bne.n	8005390 <__ssvfiscanf_r+0x134>
 80052ea:	9143      	str	r1, [sp, #268]	; 0x10c
 80052ec:	9145      	str	r1, [sp, #276]	; 0x114
 80052ee:	7853      	ldrb	r3, [r2, #1]
 80052f0:	2b2a      	cmp	r3, #42	; 0x2a
 80052f2:	bf02      	ittt	eq
 80052f4:	2310      	moveq	r3, #16
 80052f6:	1c96      	addeq	r6, r2, #2
 80052f8:	9343      	streq	r3, [sp, #268]	; 0x10c
 80052fa:	220a      	movs	r2, #10
 80052fc:	7831      	ldrb	r1, [r6, #0]
 80052fe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005302:	2b09      	cmp	r3, #9
 8005304:	4634      	mov	r4, r6
 8005306:	f106 0601 	add.w	r6, r6, #1
 800530a:	d805      	bhi.n	8005318 <__ssvfiscanf_r+0xbc>
 800530c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800530e:	fb02 1303 	mla	r3, r2, r3, r1
 8005312:	3b30      	subs	r3, #48	; 0x30
 8005314:	9345      	str	r3, [sp, #276]	; 0x114
 8005316:	e7f1      	b.n	80052fc <__ssvfiscanf_r+0xa0>
 8005318:	2203      	movs	r2, #3
 800531a:	4877      	ldr	r0, [pc, #476]	; (80054f8 <__ssvfiscanf_r+0x29c>)
 800531c:	f7fa ff70 	bl	8000200 <memchr>
 8005320:	b140      	cbz	r0, 8005334 <__ssvfiscanf_r+0xd8>
 8005322:	2301      	movs	r3, #1
 8005324:	ebcb 0000 	rsb	r0, fp, r0
 8005328:	fa03 f000 	lsl.w	r0, r3, r0
 800532c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800532e:	4303      	orrs	r3, r0
 8005330:	9343      	str	r3, [sp, #268]	; 0x10c
 8005332:	4634      	mov	r4, r6
 8005334:	1c66      	adds	r6, r4, #1
 8005336:	7824      	ldrb	r4, [r4, #0]
 8005338:	2c67      	cmp	r4, #103	; 0x67
 800533a:	d816      	bhi.n	800536a <__ssvfiscanf_r+0x10e>
 800533c:	2c65      	cmp	r4, #101	; 0x65
 800533e:	d27f      	bcs.n	8005440 <__ssvfiscanf_r+0x1e4>
 8005340:	2c47      	cmp	r4, #71	; 0x47
 8005342:	d807      	bhi.n	8005354 <__ssvfiscanf_r+0xf8>
 8005344:	2c45      	cmp	r4, #69	; 0x45
 8005346:	d27b      	bcs.n	8005440 <__ssvfiscanf_r+0x1e4>
 8005348:	2c00      	cmp	r4, #0
 800534a:	f000 80cb 	beq.w	80054e4 <__ssvfiscanf_r+0x288>
 800534e:	2c25      	cmp	r4, #37	; 0x25
 8005350:	d01e      	beq.n	8005390 <__ssvfiscanf_r+0x134>
 8005352:	e077      	b.n	8005444 <__ssvfiscanf_r+0x1e8>
 8005354:	2c5b      	cmp	r4, #91	; 0x5b
 8005356:	d051      	beq.n	80053fc <__ssvfiscanf_r+0x1a0>
 8005358:	d802      	bhi.n	8005360 <__ssvfiscanf_r+0x104>
 800535a:	2c58      	cmp	r4, #88	; 0x58
 800535c:	d03e      	beq.n	80053dc <__ssvfiscanf_r+0x180>
 800535e:	e071      	b.n	8005444 <__ssvfiscanf_r+0x1e8>
 8005360:	2c63      	cmp	r4, #99	; 0x63
 8005362:	d057      	beq.n	8005414 <__ssvfiscanf_r+0x1b8>
 8005364:	2c64      	cmp	r4, #100	; 0x64
 8005366:	d03f      	beq.n	80053e8 <__ssvfiscanf_r+0x18c>
 8005368:	e06c      	b.n	8005444 <__ssvfiscanf_r+0x1e8>
 800536a:	2c70      	cmp	r4, #112	; 0x70
 800536c:	d032      	beq.n	80053d4 <__ssvfiscanf_r+0x178>
 800536e:	d807      	bhi.n	8005380 <__ssvfiscanf_r+0x124>
 8005370:	2c6e      	cmp	r4, #110	; 0x6e
 8005372:	d055      	beq.n	8005420 <__ssvfiscanf_r+0x1c4>
 8005374:	d83a      	bhi.n	80053ec <__ssvfiscanf_r+0x190>
 8005376:	2c69      	cmp	r4, #105	; 0x69
 8005378:	d164      	bne.n	8005444 <__ssvfiscanf_r+0x1e8>
 800537a:	2300      	movs	r3, #0
 800537c:	9344      	str	r3, [sp, #272]	; 0x110
 800537e:	e03b      	b.n	80053f8 <__ssvfiscanf_r+0x19c>
 8005380:	2c75      	cmp	r4, #117	; 0x75
 8005382:	d031      	beq.n	80053e8 <__ssvfiscanf_r+0x18c>
 8005384:	2c78      	cmp	r4, #120	; 0x78
 8005386:	d029      	beq.n	80053dc <__ssvfiscanf_r+0x180>
 8005388:	2c73      	cmp	r4, #115	; 0x73
 800538a:	d15b      	bne.n	8005444 <__ssvfiscanf_r+0x1e8>
 800538c:	2302      	movs	r3, #2
 800538e:	e03f      	b.n	8005410 <__ssvfiscanf_r+0x1b4>
 8005390:	686b      	ldr	r3, [r5, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	dd0d      	ble.n	80053b2 <__ssvfiscanf_r+0x156>
 8005396:	682b      	ldr	r3, [r5, #0]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	4294      	cmp	r4, r2
 800539c:	f040 80a0 	bne.w	80054e0 <__ssvfiscanf_r+0x284>
 80053a0:	3301      	adds	r3, #1
 80053a2:	686a      	ldr	r2, [r5, #4]
 80053a4:	602b      	str	r3, [r5, #0]
 80053a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80053a8:	3a01      	subs	r2, #1
 80053aa:	3301      	adds	r3, #1
 80053ac:	606a      	str	r2, [r5, #4]
 80053ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80053b0:	e795      	b.n	80052de <__ssvfiscanf_r+0x82>
 80053b2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80053b4:	4629      	mov	r1, r5
 80053b6:	4638      	mov	r0, r7
 80053b8:	4798      	blx	r3
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d0eb      	beq.n	8005396 <__ssvfiscanf_r+0x13a>
 80053be:	9846      	ldr	r0, [sp, #280]	; 0x118
 80053c0:	2800      	cmp	r0, #0
 80053c2:	f000 808f 	beq.w	80054e4 <__ssvfiscanf_r+0x288>
 80053c6:	89ab      	ldrh	r3, [r5, #12]
 80053c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80053cc:	bf18      	it	ne
 80053ce:	f04f 30ff 	movne.w	r0, #4294967295
 80053d2:	e089      	b.n	80054e8 <__ssvfiscanf_r+0x28c>
 80053d4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80053d6:	f043 0320 	orr.w	r3, r3, #32
 80053da:	9343      	str	r3, [sp, #268]	; 0x10c
 80053dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80053de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053e2:	9343      	str	r3, [sp, #268]	; 0x10c
 80053e4:	2310      	movs	r3, #16
 80053e6:	e002      	b.n	80053ee <__ssvfiscanf_r+0x192>
 80053e8:	230a      	movs	r3, #10
 80053ea:	e000      	b.n	80053ee <__ssvfiscanf_r+0x192>
 80053ec:	2308      	movs	r3, #8
 80053ee:	2c6e      	cmp	r4, #110	; 0x6e
 80053f0:	9344      	str	r3, [sp, #272]	; 0x110
 80053f2:	dd01      	ble.n	80053f8 <__ssvfiscanf_r+0x19c>
 80053f4:	2304      	movs	r3, #4
 80053f6:	e00b      	b.n	8005410 <__ssvfiscanf_r+0x1b4>
 80053f8:	2303      	movs	r3, #3
 80053fa:	e009      	b.n	8005410 <__ssvfiscanf_r+0x1b4>
 80053fc:	4631      	mov	r1, r6
 80053fe:	4640      	mov	r0, r8
 8005400:	f000 f9d6 	bl	80057b0 <__sccl>
 8005404:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800540a:	9343      	str	r3, [sp, #268]	; 0x10c
 800540c:	4606      	mov	r6, r0
 800540e:	2301      	movs	r3, #1
 8005410:	9349      	str	r3, [sp, #292]	; 0x124
 8005412:	e01b      	b.n	800544c <__ssvfiscanf_r+0x1f0>
 8005414:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800541a:	9343      	str	r3, [sp, #268]	; 0x10c
 800541c:	2300      	movs	r3, #0
 800541e:	e7f7      	b.n	8005410 <__ssvfiscanf_r+0x1b4>
 8005420:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005422:	06d0      	lsls	r0, r2, #27
 8005424:	f53f af5b 	bmi.w	80052de <__ssvfiscanf_r+0x82>
 8005428:	f012 0f01 	tst.w	r2, #1
 800542c:	9a01      	ldr	r2, [sp, #4]
 800542e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005430:	f102 0104 	add.w	r1, r2, #4
 8005434:	9101      	str	r1, [sp, #4]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	bf14      	ite	ne
 800543a:	8013      	strhne	r3, [r2, #0]
 800543c:	6013      	streq	r3, [r2, #0]
 800543e:	e74e      	b.n	80052de <__ssvfiscanf_r+0x82>
 8005440:	2305      	movs	r3, #5
 8005442:	e7e5      	b.n	8005410 <__ssvfiscanf_r+0x1b4>
 8005444:	2303      	movs	r3, #3
 8005446:	9349      	str	r3, [sp, #292]	; 0x124
 8005448:	230a      	movs	r3, #10
 800544a:	9344      	str	r3, [sp, #272]	; 0x110
 800544c:	686b      	ldr	r3, [r5, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	dd03      	ble.n	800545a <__ssvfiscanf_r+0x1fe>
 8005452:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005454:	0659      	lsls	r1, r3, #25
 8005456:	d511      	bpl.n	800547c <__ssvfiscanf_r+0x220>
 8005458:	e018      	b.n	800548c <__ssvfiscanf_r+0x230>
 800545a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800545c:	4629      	mov	r1, r5
 800545e:	4638      	mov	r0, r7
 8005460:	4798      	blx	r3
 8005462:	2800      	cmp	r0, #0
 8005464:	d0f5      	beq.n	8005452 <__ssvfiscanf_r+0x1f6>
 8005466:	e7aa      	b.n	80053be <__ssvfiscanf_r+0x162>
 8005468:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800546a:	3201      	adds	r2, #1
 800546c:	9247      	str	r2, [sp, #284]	; 0x11c
 800546e:	686a      	ldr	r2, [r5, #4]
 8005470:	3a01      	subs	r2, #1
 8005472:	2a00      	cmp	r2, #0
 8005474:	606a      	str	r2, [r5, #4]
 8005476:	dd13      	ble.n	80054a0 <__ssvfiscanf_r+0x244>
 8005478:	3301      	adds	r3, #1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	f8da 1000 	ldr.w	r1, [sl]
 8005482:	781a      	ldrb	r2, [r3, #0]
 8005484:	440a      	add	r2, r1
 8005486:	7852      	ldrb	r2, [r2, #1]
 8005488:	0712      	lsls	r2, r2, #28
 800548a:	d4ed      	bmi.n	8005468 <__ssvfiscanf_r+0x20c>
 800548c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800548e:	2b02      	cmp	r3, #2
 8005490:	dc0d      	bgt.n	80054ae <__ssvfiscanf_r+0x252>
 8005492:	ab01      	add	r3, sp, #4
 8005494:	462a      	mov	r2, r5
 8005496:	a943      	add	r1, sp, #268	; 0x10c
 8005498:	4638      	mov	r0, r7
 800549a:	f000 f833 	bl	8005504 <_scanf_chars>
 800549e:	e019      	b.n	80054d4 <__ssvfiscanf_r+0x278>
 80054a0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80054a2:	4629      	mov	r1, r5
 80054a4:	4638      	mov	r0, r7
 80054a6:	4798      	blx	r3
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d0e7      	beq.n	800547c <__ssvfiscanf_r+0x220>
 80054ac:	e787      	b.n	80053be <__ssvfiscanf_r+0x162>
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	dc06      	bgt.n	80054c0 <__ssvfiscanf_r+0x264>
 80054b2:	ab01      	add	r3, sp, #4
 80054b4:	462a      	mov	r2, r5
 80054b6:	a943      	add	r1, sp, #268	; 0x10c
 80054b8:	4638      	mov	r0, r7
 80054ba:	f000 f887 	bl	80055cc <_scanf_i>
 80054be:	e009      	b.n	80054d4 <__ssvfiscanf_r+0x278>
 80054c0:	4b0e      	ldr	r3, [pc, #56]	; (80054fc <__ssvfiscanf_r+0x2a0>)
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f43f af0b 	beq.w	80052de <__ssvfiscanf_r+0x82>
 80054c8:	ab01      	add	r3, sp, #4
 80054ca:	462a      	mov	r2, r5
 80054cc:	a943      	add	r1, sp, #268	; 0x10c
 80054ce:	4638      	mov	r0, r7
 80054d0:	f3af 8000 	nop.w
 80054d4:	2801      	cmp	r0, #1
 80054d6:	d003      	beq.n	80054e0 <__ssvfiscanf_r+0x284>
 80054d8:	2802      	cmp	r0, #2
 80054da:	f47f af00 	bne.w	80052de <__ssvfiscanf_r+0x82>
 80054de:	e76e      	b.n	80053be <__ssvfiscanf_r+0x162>
 80054e0:	9846      	ldr	r0, [sp, #280]	; 0x118
 80054e2:	e001      	b.n	80054e8 <__ssvfiscanf_r+0x28c>
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295
 80054e8:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80054ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f0:	080051a5 	.word	0x080051a5
 80054f4:	08005221 	.word	0x08005221
 80054f8:	08005dd5 	.word	0x08005dd5
 80054fc:	00000000 	.word	0x00000000
 8005500:	20000104 	.word	0x20000104

08005504 <_scanf_chars>:
 8005504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005508:	4615      	mov	r5, r2
 800550a:	688a      	ldr	r2, [r1, #8]
 800550c:	4680      	mov	r8, r0
 800550e:	460c      	mov	r4, r1
 8005510:	b932      	cbnz	r2, 8005520 <_scanf_chars+0x1c>
 8005512:	698a      	ldr	r2, [r1, #24]
 8005514:	2a00      	cmp	r2, #0
 8005516:	bf0c      	ite	eq
 8005518:	2201      	moveq	r2, #1
 800551a:	f04f 32ff 	movne.w	r2, #4294967295
 800551e:	608a      	str	r2, [r1, #8]
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80055c8 <_scanf_chars+0xc4>
 8005526:	06d1      	lsls	r1, r2, #27
 8005528:	bf5f      	itttt	pl
 800552a:	681a      	ldrpl	r2, [r3, #0]
 800552c:	1d11      	addpl	r1, r2, #4
 800552e:	6019      	strpl	r1, [r3, #0]
 8005530:	6817      	ldrpl	r7, [r2, #0]
 8005532:	2600      	movs	r6, #0
 8005534:	69a0      	ldr	r0, [r4, #24]
 8005536:	bb00      	cbnz	r0, 800557a <_scanf_chars+0x76>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	06da      	lsls	r2, r3, #27
 800553c:	bf5e      	ittt	pl
 800553e:	682b      	ldrpl	r3, [r5, #0]
 8005540:	781b      	ldrbpl	r3, [r3, #0]
 8005542:	703b      	strbpl	r3, [r7, #0]
 8005544:	682a      	ldr	r2, [r5, #0]
 8005546:	686b      	ldr	r3, [r5, #4]
 8005548:	f102 0201 	add.w	r2, r2, #1
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	68a2      	ldr	r2, [r4, #8]
 8005550:	f103 33ff 	add.w	r3, r3, #4294967295
 8005554:	f102 32ff 	add.w	r2, r2, #4294967295
 8005558:	606b      	str	r3, [r5, #4]
 800555a:	f106 0601 	add.w	r6, r6, #1
 800555e:	bf58      	it	pl
 8005560:	3701      	addpl	r7, #1
 8005562:	60a2      	str	r2, [r4, #8]
 8005564:	b1e2      	cbz	r2, 80055a0 <_scanf_chars+0x9c>
 8005566:	2b00      	cmp	r3, #0
 8005568:	dce4      	bgt.n	8005534 <_scanf_chars+0x30>
 800556a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800556e:	4629      	mov	r1, r5
 8005570:	4640      	mov	r0, r8
 8005572:	4798      	blx	r3
 8005574:	2800      	cmp	r0, #0
 8005576:	d0dd      	beq.n	8005534 <_scanf_chars+0x30>
 8005578:	e012      	b.n	80055a0 <_scanf_chars+0x9c>
 800557a:	2801      	cmp	r0, #1
 800557c:	d106      	bne.n	800558c <_scanf_chars+0x88>
 800557e:	682b      	ldr	r3, [r5, #0]
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	6963      	ldr	r3, [r4, #20]
 8005584:	5c9b      	ldrb	r3, [r3, r2]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1d6      	bne.n	8005538 <_scanf_chars+0x34>
 800558a:	e019      	b.n	80055c0 <_scanf_chars+0xbc>
 800558c:	2802      	cmp	r0, #2
 800558e:	d107      	bne.n	80055a0 <_scanf_chars+0x9c>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	f8d9 2000 	ldr.w	r2, [r9]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	4413      	add	r3, r2
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	071b      	lsls	r3, r3, #28
 800559e:	d5cb      	bpl.n	8005538 <_scanf_chars+0x34>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	f013 0310 	ands.w	r3, r3, #16
 80055a6:	d105      	bne.n	80055b4 <_scanf_chars+0xb0>
 80055a8:	68e2      	ldr	r2, [r4, #12]
 80055aa:	3201      	adds	r2, #1
 80055ac:	60e2      	str	r2, [r4, #12]
 80055ae:	69a2      	ldr	r2, [r4, #24]
 80055b0:	b102      	cbz	r2, 80055b4 <_scanf_chars+0xb0>
 80055b2:	703b      	strb	r3, [r7, #0]
 80055b4:	6923      	ldr	r3, [r4, #16]
 80055b6:	441e      	add	r6, r3
 80055b8:	6126      	str	r6, [r4, #16]
 80055ba:	2000      	movs	r0, #0
 80055bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c0:	2e00      	cmp	r6, #0
 80055c2:	d1ed      	bne.n	80055a0 <_scanf_chars+0x9c>
 80055c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c8:	20000104 	.word	0x20000104

080055cc <_scanf_i>:
 80055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	469a      	mov	sl, r3
 80055d2:	4b73      	ldr	r3, [pc, #460]	; (80057a0 <_scanf_i+0x1d4>)
 80055d4:	460c      	mov	r4, r1
 80055d6:	4683      	mov	fp, r0
 80055d8:	4616      	mov	r6, r2
 80055da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055de:	b087      	sub	sp, #28
 80055e0:	ab03      	add	r3, sp, #12
 80055e2:	68a7      	ldr	r7, [r4, #8]
 80055e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055e8:	4b6e      	ldr	r3, [pc, #440]	; (80057a4 <_scanf_i+0x1d8>)
 80055ea:	69a1      	ldr	r1, [r4, #24]
 80055ec:	4a6e      	ldr	r2, [pc, #440]	; (80057a8 <_scanf_i+0x1dc>)
 80055ee:	2903      	cmp	r1, #3
 80055f0:	bf18      	it	ne
 80055f2:	461a      	movne	r2, r3
 80055f4:	1e7b      	subs	r3, r7, #1
 80055f6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80055fa:	bf84      	itt	hi
 80055fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005600:	60a3      	strhi	r3, [r4, #8]
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	9200      	str	r2, [sp, #0]
 8005606:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800560a:	bf88      	it	hi
 800560c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005610:	f104 091c 	add.w	r9, r4, #28
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bf8c      	ite	hi
 8005618:	197f      	addhi	r7, r7, r5
 800561a:	2700      	movls	r7, #0
 800561c:	464b      	mov	r3, r9
 800561e:	f04f 0800 	mov.w	r8, #0
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	6831      	ldr	r1, [r6, #0]
 8005626:	ab03      	add	r3, sp, #12
 8005628:	2202      	movs	r2, #2
 800562a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800562e:	7809      	ldrb	r1, [r1, #0]
 8005630:	f7fa fde6 	bl	8000200 <memchr>
 8005634:	9b01      	ldr	r3, [sp, #4]
 8005636:	2800      	cmp	r0, #0
 8005638:	d033      	beq.n	80056a2 <_scanf_i+0xd6>
 800563a:	f1b8 0f01 	cmp.w	r8, #1
 800563e:	d10b      	bne.n	8005658 <_scanf_i+0x8c>
 8005640:	6862      	ldr	r2, [r4, #4]
 8005642:	b92a      	cbnz	r2, 8005650 <_scanf_i+0x84>
 8005644:	2208      	movs	r2, #8
 8005646:	6062      	str	r2, [r4, #4]
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564e:	6022      	str	r2, [r4, #0]
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005656:	e00c      	b.n	8005672 <_scanf_i+0xa6>
 8005658:	f1b8 0f02 	cmp.w	r8, #2
 800565c:	d10a      	bne.n	8005674 <_scanf_i+0xa8>
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005664:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005668:	d11b      	bne.n	80056a2 <_scanf_i+0xd6>
 800566a:	2110      	movs	r1, #16
 800566c:	6061      	str	r1, [r4, #4]
 800566e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005672:	6022      	str	r2, [r4, #0]
 8005674:	68a2      	ldr	r2, [r4, #8]
 8005676:	1e51      	subs	r1, r2, #1
 8005678:	60a1      	str	r1, [r4, #8]
 800567a:	b192      	cbz	r2, 80056a2 <_scanf_i+0xd6>
 800567c:	6832      	ldr	r2, [r6, #0]
 800567e:	1c51      	adds	r1, r2, #1
 8005680:	6031      	str	r1, [r6, #0]
 8005682:	7812      	ldrb	r2, [r2, #0]
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	1c5d      	adds	r5, r3, #1
 8005688:	6873      	ldr	r3, [r6, #4]
 800568a:	3b01      	subs	r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	6073      	str	r3, [r6, #4]
 8005690:	dc06      	bgt.n	80056a0 <_scanf_i+0xd4>
 8005692:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005696:	4631      	mov	r1, r6
 8005698:	4658      	mov	r0, fp
 800569a:	4798      	blx	r3
 800569c:	2800      	cmp	r0, #0
 800569e:	d140      	bne.n	8005722 <_scanf_i+0x156>
 80056a0:	462b      	mov	r3, r5
 80056a2:	f108 0801 	add.w	r8, r8, #1
 80056a6:	f1b8 0f03 	cmp.w	r8, #3
 80056aa:	d1ba      	bne.n	8005622 <_scanf_i+0x56>
 80056ac:	6862      	ldr	r2, [r4, #4]
 80056ae:	b90a      	cbnz	r2, 80056b4 <_scanf_i+0xe8>
 80056b0:	220a      	movs	r2, #10
 80056b2:	6062      	str	r2, [r4, #4]
 80056b4:	6862      	ldr	r2, [r4, #4]
 80056b6:	493d      	ldr	r1, [pc, #244]	; (80057ac <_scanf_i+0x1e0>)
 80056b8:	6960      	ldr	r0, [r4, #20]
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	1a89      	subs	r1, r1, r2
 80056be:	f000 f877 	bl	80057b0 <__sccl>
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	f04f 0800 	mov.w	r8, #0
 80056c8:	461d      	mov	r5, r3
 80056ca:	68a3      	ldr	r3, [r4, #8]
 80056cc:	b35b      	cbz	r3, 8005726 <_scanf_i+0x15a>
 80056ce:	6831      	ldr	r1, [r6, #0]
 80056d0:	6960      	ldr	r0, [r4, #20]
 80056d2:	780a      	ldrb	r2, [r1, #0]
 80056d4:	5c80      	ldrb	r0, [r0, r2]
 80056d6:	b330      	cbz	r0, 8005726 <_scanf_i+0x15a>
 80056d8:	2a30      	cmp	r2, #48	; 0x30
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	d108      	bne.n	80056f0 <_scanf_i+0x124>
 80056de:	0510      	lsls	r0, r2, #20
 80056e0:	d506      	bpl.n	80056f0 <_scanf_i+0x124>
 80056e2:	f108 0801 	add.w	r8, r8, #1
 80056e6:	b14f      	cbz	r7, 80056fc <_scanf_i+0x130>
 80056e8:	3301      	adds	r3, #1
 80056ea:	3f01      	subs	r7, #1
 80056ec:	60a3      	str	r3, [r4, #8]
 80056ee:	e005      	b.n	80056fc <_scanf_i+0x130>
 80056f0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80056f4:	6022      	str	r2, [r4, #0]
 80056f6:	780b      	ldrb	r3, [r1, #0]
 80056f8:	702b      	strb	r3, [r5, #0]
 80056fa:	3501      	adds	r5, #1
 80056fc:	6873      	ldr	r3, [r6, #4]
 80056fe:	3b01      	subs	r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	6073      	str	r3, [r6, #4]
 8005704:	dd03      	ble.n	800570e <_scanf_i+0x142>
 8005706:	6833      	ldr	r3, [r6, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	6033      	str	r3, [r6, #0]
 800570c:	e005      	b.n	800571a <_scanf_i+0x14e>
 800570e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005712:	4631      	mov	r1, r6
 8005714:	4658      	mov	r0, fp
 8005716:	4798      	blx	r3
 8005718:	b928      	cbnz	r0, 8005726 <_scanf_i+0x15a>
 800571a:	68a3      	ldr	r3, [r4, #8]
 800571c:	3b01      	subs	r3, #1
 800571e:	60a3      	str	r3, [r4, #8]
 8005720:	e7d3      	b.n	80056ca <_scanf_i+0xfe>
 8005722:	f04f 0800 	mov.w	r8, #0
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	05d9      	lsls	r1, r3, #23
 800572a:	d50c      	bpl.n	8005746 <_scanf_i+0x17a>
 800572c:	454d      	cmp	r5, r9
 800572e:	d908      	bls.n	8005742 <_scanf_i+0x176>
 8005730:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005734:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005738:	4632      	mov	r2, r6
 800573a:	4658      	mov	r0, fp
 800573c:	4798      	blx	r3
 800573e:	1e6f      	subs	r7, r5, #1
 8005740:	463d      	mov	r5, r7
 8005742:	454d      	cmp	r5, r9
 8005744:	d027      	beq.n	8005796 <_scanf_i+0x1ca>
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	f012 0210 	ands.w	r2, r2, #16
 800574c:	d11b      	bne.n	8005786 <_scanf_i+0x1ba>
 800574e:	702a      	strb	r2, [r5, #0]
 8005750:	6863      	ldr	r3, [r4, #4]
 8005752:	9e00      	ldr	r6, [sp, #0]
 8005754:	4649      	mov	r1, r9
 8005756:	4658      	mov	r0, fp
 8005758:	47b0      	blx	r6
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	f8da 3000 	ldr.w	r3, [sl]
 8005760:	f012 0f20 	tst.w	r2, #32
 8005764:	d107      	bne.n	8005776 <_scanf_i+0x1aa>
 8005766:	07d2      	lsls	r2, r2, #31
 8005768:	d505      	bpl.n	8005776 <_scanf_i+0x1aa>
 800576a:	1d1a      	adds	r2, r3, #4
 800576c:	f8ca 2000 	str.w	r2, [sl]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	8018      	strh	r0, [r3, #0]
 8005774:	e004      	b.n	8005780 <_scanf_i+0x1b4>
 8005776:	1d1a      	adds	r2, r3, #4
 8005778:	f8ca 2000 	str.w	r2, [sl]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6018      	str	r0, [r3, #0]
 8005780:	68e3      	ldr	r3, [r4, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60e3      	str	r3, [r4, #12]
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	ebc9 0505 	rsb	r5, r9, r5
 800578c:	4445      	add	r5, r8
 800578e:	441d      	add	r5, r3
 8005790:	6125      	str	r5, [r4, #16]
 8005792:	2000      	movs	r0, #0
 8005794:	e000      	b.n	8005798 <_scanf_i+0x1cc>
 8005796:	2001      	movs	r0, #1
 8005798:	b007      	add	sp, #28
 800579a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579e:	bf00      	nop
 80057a0:	08005a50 	.word	0x08005a50
 80057a4:	08005081 	.word	0x08005081
 80057a8:	08005815 	.word	0x08005815
 80057ac:	08005de9 	.word	0x08005de9

080057b0 <__sccl>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	780b      	ldrb	r3, [r1, #0]
 80057b4:	2b5e      	cmp	r3, #94	; 0x5e
 80057b6:	bf13      	iteet	ne
 80057b8:	1c4a      	addne	r2, r1, #1
 80057ba:	1c8a      	addeq	r2, r1, #2
 80057bc:	784b      	ldrbeq	r3, [r1, #1]
 80057be:	2100      	movne	r1, #0
 80057c0:	bf08      	it	eq
 80057c2:	2101      	moveq	r1, #1
 80057c4:	1e44      	subs	r4, r0, #1
 80057c6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80057ca:	f804 1f01 	strb.w	r1, [r4, #1]!
 80057ce:	42ac      	cmp	r4, r5
 80057d0:	d1fb      	bne.n	80057ca <__sccl+0x1a>
 80057d2:	b90b      	cbnz	r3, 80057d8 <__sccl+0x28>
 80057d4:	1e50      	subs	r0, r2, #1
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	f081 0401 	eor.w	r4, r1, #1
 80057dc:	54c4      	strb	r4, [r0, r3]
 80057de:	4611      	mov	r1, r2
 80057e0:	780d      	ldrb	r5, [r1, #0]
 80057e2:	2d2d      	cmp	r5, #45	; 0x2d
 80057e4:	f101 0201 	add.w	r2, r1, #1
 80057e8:	d006      	beq.n	80057f8 <__sccl+0x48>
 80057ea:	2d5d      	cmp	r5, #93	; 0x5d
 80057ec:	d00f      	beq.n	800580e <__sccl+0x5e>
 80057ee:	b10d      	cbz	r5, 80057f4 <__sccl+0x44>
 80057f0:	462b      	mov	r3, r5
 80057f2:	e7f3      	b.n	80057dc <__sccl+0x2c>
 80057f4:	4608      	mov	r0, r1
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	784e      	ldrb	r6, [r1, #1]
 80057fa:	2e5d      	cmp	r6, #93	; 0x5d
 80057fc:	d0f8      	beq.n	80057f0 <__sccl+0x40>
 80057fe:	42b3      	cmp	r3, r6
 8005800:	dcf6      	bgt.n	80057f0 <__sccl+0x40>
 8005802:	3102      	adds	r1, #2
 8005804:	3301      	adds	r3, #1
 8005806:	429e      	cmp	r6, r3
 8005808:	54c4      	strb	r4, [r0, r3]
 800580a:	dcfb      	bgt.n	8005804 <__sccl+0x54>
 800580c:	e7e8      	b.n	80057e0 <__sccl+0x30>
 800580e:	4610      	mov	r0, r2
 8005810:	bd70      	pop	{r4, r5, r6, pc}
	...

08005814 <_strtol_r>:
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	4680      	mov	r8, r0
 800581a:	4840      	ldr	r0, [pc, #256]	; (800591c <_strtol_r+0x108>)
 800581c:	f8d0 9000 	ldr.w	r9, [r0]
 8005820:	460f      	mov	r7, r1
 8005822:	463d      	mov	r5, r7
 8005824:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005828:	eb09 0004 	add.w	r0, r9, r4
 800582c:	7840      	ldrb	r0, [r0, #1]
 800582e:	f000 0008 	and.w	r0, r0, #8
 8005832:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8005836:	b108      	cbz	r0, 800583c <_strtol_r+0x28>
 8005838:	462f      	mov	r7, r5
 800583a:	e7f2      	b.n	8005822 <_strtol_r+0xe>
 800583c:	2c2d      	cmp	r4, #45	; 0x2d
 800583e:	d103      	bne.n	8005848 <_strtol_r+0x34>
 8005840:	1cbd      	adds	r5, r7, #2
 8005842:	787c      	ldrb	r4, [r7, #1]
 8005844:	2601      	movs	r6, #1
 8005846:	e003      	b.n	8005850 <_strtol_r+0x3c>
 8005848:	2c2b      	cmp	r4, #43	; 0x2b
 800584a:	bf04      	itt	eq
 800584c:	787c      	ldrbeq	r4, [r7, #1]
 800584e:	1cbd      	addeq	r5, r7, #2
 8005850:	b113      	cbz	r3, 8005858 <_strtol_r+0x44>
 8005852:	2b10      	cmp	r3, #16
 8005854:	d10a      	bne.n	800586c <_strtol_r+0x58>
 8005856:	e05b      	b.n	8005910 <_strtol_r+0xfc>
 8005858:	2c30      	cmp	r4, #48	; 0x30
 800585a:	d157      	bne.n	800590c <_strtol_r+0xf8>
 800585c:	7828      	ldrb	r0, [r5, #0]
 800585e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005862:	2858      	cmp	r0, #88	; 0x58
 8005864:	d14d      	bne.n	8005902 <_strtol_r+0xee>
 8005866:	786c      	ldrb	r4, [r5, #1]
 8005868:	2310      	movs	r3, #16
 800586a:	3502      	adds	r5, #2
 800586c:	2e00      	cmp	r6, #0
 800586e:	bf14      	ite	ne
 8005870:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8005874:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8005878:	2700      	movs	r7, #0
 800587a:	fbbc faf3 	udiv	sl, ip, r3
 800587e:	4638      	mov	r0, r7
 8005880:	fb03 cc1a 	mls	ip, r3, sl, ip
 8005884:	eb09 0e04 	add.w	lr, r9, r4
 8005888:	f89e e001 	ldrb.w	lr, [lr, #1]
 800588c:	f01e 0f04 	tst.w	lr, #4
 8005890:	d001      	beq.n	8005896 <_strtol_r+0x82>
 8005892:	3c30      	subs	r4, #48	; 0x30
 8005894:	e00b      	b.n	80058ae <_strtol_r+0x9a>
 8005896:	f01e 0e03 	ands.w	lr, lr, #3
 800589a:	d01b      	beq.n	80058d4 <_strtol_r+0xc0>
 800589c:	f1be 0f01 	cmp.w	lr, #1
 80058a0:	bf0c      	ite	eq
 80058a2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80058a6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80058aa:	ebce 0404 	rsb	r4, lr, r4
 80058ae:	42a3      	cmp	r3, r4
 80058b0:	dd10      	ble.n	80058d4 <_strtol_r+0xc0>
 80058b2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80058b6:	d00a      	beq.n	80058ce <_strtol_r+0xba>
 80058b8:	4550      	cmp	r0, sl
 80058ba:	d806      	bhi.n	80058ca <_strtol_r+0xb6>
 80058bc:	d101      	bne.n	80058c2 <_strtol_r+0xae>
 80058be:	4564      	cmp	r4, ip
 80058c0:	dc03      	bgt.n	80058ca <_strtol_r+0xb6>
 80058c2:	fb03 4000 	mla	r0, r3, r0, r4
 80058c6:	2701      	movs	r7, #1
 80058c8:	e001      	b.n	80058ce <_strtol_r+0xba>
 80058ca:	f04f 37ff 	mov.w	r7, #4294967295
 80058ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058d2:	e7d7      	b.n	8005884 <_strtol_r+0x70>
 80058d4:	1c7b      	adds	r3, r7, #1
 80058d6:	d10c      	bne.n	80058f2 <_strtol_r+0xde>
 80058d8:	2e00      	cmp	r6, #0
 80058da:	f04f 0322 	mov.w	r3, #34	; 0x22
 80058de:	bf14      	ite	ne
 80058e0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80058e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80058e8:	f8c8 3000 	str.w	r3, [r8]
 80058ec:	b92a      	cbnz	r2, 80058fa <_strtol_r+0xe6>
 80058ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f2:	b106      	cbz	r6, 80058f6 <_strtol_r+0xe2>
 80058f4:	4240      	negs	r0, r0
 80058f6:	b172      	cbz	r2, 8005916 <_strtol_r+0x102>
 80058f8:	b107      	cbz	r7, 80058fc <_strtol_r+0xe8>
 80058fa:	1e69      	subs	r1, r5, #1
 80058fc:	6011      	str	r1, [r2, #0]
 80058fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005902:	2430      	movs	r4, #48	; 0x30
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1b1      	bne.n	800586c <_strtol_r+0x58>
 8005908:	2308      	movs	r3, #8
 800590a:	e7af      	b.n	800586c <_strtol_r+0x58>
 800590c:	230a      	movs	r3, #10
 800590e:	e7ad      	b.n	800586c <_strtol_r+0x58>
 8005910:	2c30      	cmp	r4, #48	; 0x30
 8005912:	d0a3      	beq.n	800585c <_strtol_r+0x48>
 8005914:	e7aa      	b.n	800586c <_strtol_r+0x58>
 8005916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591a:	bf00      	nop
 800591c:	20000104 	.word	0x20000104

08005920 <__submore>:
 8005920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005924:	460c      	mov	r4, r1
 8005926:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800592c:	4299      	cmp	r1, r3
 800592e:	d11c      	bne.n	800596a <__submore+0x4a>
 8005930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005934:	f7fd f9f0 	bl	8002d18 <_malloc_r>
 8005938:	b918      	cbnz	r0, 8005942 <__submore+0x22>
 800593a:	f04f 30ff 	mov.w	r0, #4294967295
 800593e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005946:	63a3      	str	r3, [r4, #56]	; 0x38
 8005948:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800594c:	6360      	str	r0, [r4, #52]	; 0x34
 800594e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005952:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005956:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800595a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800595e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005962:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005966:	6020      	str	r0, [r4, #0]
 8005968:	e012      	b.n	8005990 <__submore+0x70>
 800596a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800596c:	0077      	lsls	r7, r6, #1
 800596e:	463a      	mov	r2, r7
 8005970:	f000 f811 	bl	8005996 <_realloc_r>
 8005974:	4605      	mov	r5, r0
 8005976:	2800      	cmp	r0, #0
 8005978:	d0df      	beq.n	800593a <__submore+0x1a>
 800597a:	eb00 0806 	add.w	r8, r0, r6
 800597e:	4601      	mov	r1, r0
 8005980:	4632      	mov	r2, r6
 8005982:	4640      	mov	r0, r8
 8005984:	f7fe ff26 	bl	80047d4 <memcpy>
 8005988:	f8c4 8000 	str.w	r8, [r4]
 800598c:	6365      	str	r5, [r4, #52]	; 0x34
 800598e:	63a7      	str	r7, [r4, #56]	; 0x38
 8005990:	2000      	movs	r0, #0
 8005992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005996 <_realloc_r>:
 8005996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005998:	4607      	mov	r7, r0
 800599a:	4615      	mov	r5, r2
 800599c:	460e      	mov	r6, r1
 800599e:	b921      	cbnz	r1, 80059aa <_realloc_r+0x14>
 80059a0:	4611      	mov	r1, r2
 80059a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059a6:	f7fd b9b7 	b.w	8002d18 <_malloc_r>
 80059aa:	b91a      	cbnz	r2, 80059b4 <_realloc_r+0x1e>
 80059ac:	f7fd f966 	bl	8002c7c <_free_r>
 80059b0:	4628      	mov	r0, r5
 80059b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b4:	f000 f815 	bl	80059e2 <_malloc_usable_size_r>
 80059b8:	4285      	cmp	r5, r0
 80059ba:	d90e      	bls.n	80059da <_realloc_r+0x44>
 80059bc:	4629      	mov	r1, r5
 80059be:	4638      	mov	r0, r7
 80059c0:	f7fd f9aa 	bl	8002d18 <_malloc_r>
 80059c4:	4604      	mov	r4, r0
 80059c6:	b150      	cbz	r0, 80059de <_realloc_r+0x48>
 80059c8:	4631      	mov	r1, r6
 80059ca:	462a      	mov	r2, r5
 80059cc:	f7fe ff02 	bl	80047d4 <memcpy>
 80059d0:	4631      	mov	r1, r6
 80059d2:	4638      	mov	r0, r7
 80059d4:	f7fd f952 	bl	8002c7c <_free_r>
 80059d8:	e001      	b.n	80059de <_realloc_r+0x48>
 80059da:	4630      	mov	r0, r6
 80059dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059de:	4620      	mov	r0, r4
 80059e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059e2 <_malloc_usable_size_r>:
 80059e2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80059e6:	2800      	cmp	r0, #0
 80059e8:	bfbe      	ittt	lt
 80059ea:	1809      	addlt	r1, r1, r0
 80059ec:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80059f0:	18c0      	addlt	r0, r0, r3
 80059f2:	3804      	subs	r0, #4
 80059f4:	4770      	bx	lr
	...

080059f8 <_gettimeofday>:
 80059f8:	4b02      	ldr	r3, [pc, #8]	; (8005a04 <_gettimeofday+0xc>)
 80059fa:	2258      	movs	r2, #88	; 0x58
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005a02:	4770      	bx	lr
 8005a04:	20001120 	.word	0x20001120

08005a08 <_sbrk>:
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <_sbrk+0x14>)
 8005a0a:	6819      	ldr	r1, [r3, #0]
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	b909      	cbnz	r1, 8005a14 <_sbrk+0xc>
 8005a10:	4903      	ldr	r1, [pc, #12]	; (8005a20 <_sbrk+0x18>)
 8005a12:	6019      	str	r1, [r3, #0]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	4402      	add	r2, r0
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	4770      	bx	lr
 8005a1c:	20000158 	.word	0x20000158
 8005a20:	20001124 	.word	0x20001124

08005a24 <_init>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	bf00      	nop
 8005a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2a:	bc08      	pop	{r3}
 8005a2c:	469e      	mov	lr, r3
 8005a2e:	4770      	bx	lr

08005a30 <_fini>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	bf00      	nop
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr
